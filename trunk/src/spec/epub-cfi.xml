<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../util/docbook/schema/docbookspec.rng" type="xml"?>
<?oxygen SCHSchema="../../util/docbook/schema/docbookspec.sch"?>
<?oxygen SCHSchema="../../util/docbook/schema/docbook.sch"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:epub="http://www.idpf.org/2011/epub" xmlns:xi="http://www.w3.org/2001/XInclude"
    version="5.1">
    <title>Canonical Fragment Identifiers (CFI) for EPUB</title>

    <info>
        <releaseinfo>Working Group Draft</releaseinfo>
        <pubdate>29 April 2011</pubdate>

        <printhistory>
            <formalpara>
                <title>This version</title>
                <para>
                    <link xlink:href="http://www.idpf.org/epub/linking/20110429/epub-linking.html"/>
                </para>
            </formalpara>
            <formalpara>
                <title>Latest version</title>
                <para>
                    <link xlink:href="http://www.idpf.org/epub/linking/epub-linking.html"/>
                </para>
            </formalpara>
            <formalpara>
                <title>Previous version</title>
                <para>N/A</para>
            </formalpara>
            <formalpara>
                <title>Diffs to previous version</title>
                <para>N/A</para>
            </formalpara>
        </printhistory>
        <xi:include href="./share/copyright.xml"/>
        <xi:include href="./share/legalnotice.xml"/>
        <authorgroup role="current">
            <editor>
                <personname>Peter Sorotokin</personname>
                <affiliation>
                    <org>
                        <orgname>Adobe</orgname>
                    </org>
                </affiliation>
            </editor>
            <editor>
                <personname>Garth Conboy</personname>
                <affiliation>
                    <org>
                        <orgname>Google Inc.</orgname>
                    </org>
                </affiliation>
            </editor>
        </authorgroup>

        <abstract role="index-description">
            <para>This specification ... </para>
        </abstract>

    </info>

    <chapter xml:id="sec-overview">
        <title>Overview</title>

        <section xml:id="sec-overview-purpose-and-scope">
            <title>Purpose and Scope</title>

            <para>The Web has proven that the concept of hyperlinking is tremendously powerful.
                EPUBs have been denied much of this benefit because there has been no standardized
                method of referencing content within an EPUB document. This specification provides a
                remedy for that situation. </para>

            <para>Following are the considerations that have influenced the design:</para>

            <itemizedlist>
                <listitem>
                    <para>Reading Systems should be interoperable, allowing one Reading System to
                        use a reading position created by another.</para>
                </listitem>
                <listitem>
                    <para>Document references to EPUB content should be enabled in the same way that
                        existing hyperlinks enable references throughout the Web.</para>
                </listitem>
                <listitem>
                    <para>Each location in an EPUB file should be able to be identified - without a
                        need to specifically modify the document</para>
                </listitem>
                <listitem>
                    <para>All fragment identifiers that reference the same logical location should
                        be equal when compared</para>
                </listitem>
                <listitem>
                    <para>Comparison operations, including tests for sorting and comparison, should
                        be able to be performed without accessing the referenced files</para>
                </listitem>
                <listitem>
                    <para>Simple manipulations should be possible without access to the original
                        files (e.g. given a reference deep in a file, it should be possible to
                        generate a reference to the start of the file)</para>
                </listitem>
                <listitem>
                    <para>Identifier resolution should be reasonably efficient (e.g. processing of
                        the first chapter is not required to resolve a fragment identifier that
                        points to the last chapter)</para>
                </listitem>
                <listitem>
                    <para>References should be bale to recover their target locations through parser
                        variations (e.g. whitespace jitter) and document revisions (edit
                        jitter)</para>
                </listitem>
                <listitem>
                    <para>An extensible mechanism to accommodate future reference recovery
                        heuristics should be provided</para>
                </listitem>
                <listitem>
                    <para>Expression of simple, contiguous ranges should be supported</para>
                </listitem>
            </itemizedlist>
        </section>

        <section xml:id="sec-overview-relations" conformance="informative">
            <title>Relationship to Other Specifications</title>
            <remark role="todo">TODO</remark>
        </section>

        <section xml:id="sec-overview-versioning">
            <title>Versioning Strategy</title>
            <remark role="todo">TODO</remark>
        </section>

        <section xml:id="sec-terminology">
            <title>Terminology</title>
            <remark role="todo">TODO</remark>
        </section>

        <xi:include href="./share/conformancestatements.xml"/>

    </chapter>

    <chapter>
        <title>Overview</title>

        <para>The situations that motivate references to locations within EPUB publications are
            varied (e.g. reading location maintenance, annotation attachment, navigation). As such,
            there may be a need for multiple referencing strategies. Defined herein is the first
            such method – an arbitrary structural reference that can uniquely identify any location,
            or simple range of locations, within an EPUB publication. </para>

        <para>A Fragment Identifier is a part of a URI that defines a location within a resource.
            Syntactically, it is the part of URI that starts with # and is appended at the end of
            the URI of the file itself. For HTML documents, ids and named anchors are used as
            fragment identifiers. For XML documents, the Shorthand XPointer notation is used to
            refer to a given ID.</para>

        <para>An EPUB Canonical Fragment Identifier structurally expresses a location within an EPUB
            publication. It is defined by the "epubcfi" Fragment Identifier method.</para>

        <para>Example:</para>

        <informalexample>
            <synopsis>demo.epub#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)</synopsis>
        </informalexample>

        <para>Syntax:</para>

        <programlisting><![CDATA[
reference:   "#" method
method:      "epubcfi"]]>
        </programlisting>

        <para>The details of the this "epubcfi" EPUB referencing method are defined herein.</para>
    </chapter>

    <chapter>
        <title>EPUB Canonical Fragment Identifier (epubcfi) Specification</title>

        <para>This specification defines syntax and semantics for structurally identifying a
            location within an EPUB publication – the "epubcfi" reference method.</para>

        <para>Example:</para>

        <informalexample>
            <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)</synopsis>
        </informalexample>

        <para>A Canonical Fragment Identifier (CFI) consists of an initial sequence "epubcfi" that
            identifies this particular reference method, and a parenthesized path or range. A path
            is build up as a sequence of structural steps to reference a location. A range is a path
            followed by two local (or relative) paths that identify the start and end of the
            range.</para>

        <para>Note that "epub" is prepended to the name of the scheme, so that a more generic
            CFI-like scheme could be potentially defined in the future for all XML+ZIP-based file
            formats.</para>

        <para>Steps can either be navigational or terminating. Navigational steps may be repeated as
            necessary (to count elements, to process children, or to follow references). There may
            be only one terminating step, which, if present, must be the last step in the sequence. </para>

        <para>Sub-strings in brackets are extensible assertions that improve the robustness of
            traversing paths and migrating them from one revision of the document to another. These
            assertions preserve additional information about traversed elements of the document,
            which makes it possible to recover intended location even after some modifications were
            made to the publication.</para>

        <section>
            <title>epubcfi Syntax</title>

            <para>Syntax:</para>

            <programlisting><![CDATA[
fragment:    "epubcfi(" (path | range) ")" 

range:       path "," local_path "," local_path

path:        step local_path

local_path:  (step | "!")* termstep?

step:        "/" integer ("[" assertion "]")?


termstep:    terminus ("[" assertion "]")?

terminus:    ":" integer | "@" number ":" number |

            "~" number | "~" number "@" number ":" number 

number:      digit+ ("." digit+)?

integer:     digit+

assertion:   csv? parameters

parameters:  (";" param_name "=" csv)*

param_name:  xml_identifier

csv:         value ("," value)*

value:       string | quoted-string            // See below]]>
            </programlisting>

            <para>"value"s in the syntax above can either be a quoted string or a sequence of
                characters that do not interfere with parsing (specifically, any character except
                for quote ("), brackets ([,]), parenthesis ((,)), comma (,), and semicolon (;)).
                Quoted string is delimited by the quote (") character with quote and backslash (\)
                escaped using the backslash character.</para>

            <para>To ensure uniqueness, leading zeros are not allowed for numbers or integers;
                trailing zeros are not allowed in the fractional part of a number; zero must be
                represented as the integer "0"; numbers in the range "1 > N > 0" must have a leading
                "0."; integral numbers must be represented as integers.</para>

            <section>
                <title>Path Resolution</title>

                <para>The CFI is processed in the following manner. </para>

                <para>Assume that all documents are parsed into a W3C DOM tree (though, this is not
                    needed for actual implementation). Start with the root (document) XML element
                    node of the EPUB OPF file (i.e. package element - not DOM "document" node!).
                    Process each CFI step one by one, left to right, applying the following
                    rules.</para>

                <section>
                    <title>"/" Step Reference to Child Node</title>
                    <para>A step with a "/" followed by an integer refers to a child node or nodes
                        in the following manner:</para>

                    <orderedlist>
                        <listitem>
                            <para>Each element is assigned an <emphasis>even</emphasis> positive
                                index. The first element is given index 2, the second element index
                                4, etc.</para>
                        </listitem>
                        <listitem>
                            <para>Each (possibly empty) collection of non-element nodes before the
                                first element, between elements, and after the last element are
                                given <emphasis>odd</emphasis> indices according to their position.
                                Typically this refers to the text of the publication.</para>
                        </listitem>
                        <listitem>
                            <para>Non-element nodes that are not any kind of text nodes
                                (specifically, text, cdata section, and entity reference) are always
                                ignored.</para>
                        </listitem>
                        <listitem>
                            <para>This indexing method ensures that node identification is not
                                sensitive to XML parser handling of whitespace text nodes, entity
                                references, and CDATA sections. For instance a parser may collapse
                                whitespace-only text nodes, or not keep text, CDATA sections, and
                                entity references as distinct nodes, or break text in multiple
                                nodes.</para>
                        </listitem>
                    </orderedlist>

                    <para>The leading step in an absolute "epubcfi" (the portion of the URI
                        preceding the fragment references an EPUB file) must start with a "/"
                        followed by an even number, which must reference the <code>spine</code>
                        child element of the OPF root element (<code>package</code>). The OPF file
                        traversed by the CFI must the the one specified as the default publication
                        rendition in the publication’s "META-INF/container.xml" file. That is, the
                        OPF referenced by the first <code>rootfile</code> element in
                        "container.xml".</para>

                    <para>A relative "epubcfi" allows one Content Document to reference another
                        Content Document within an EPUB publication – the portion of the URI
                        preceding the fragment references a Content Document. See "Relative CFI’s"
                        below. In this case, the first step must start with a "/" followed by a
                        child node number, referencing a child position within the the root element
                        of the target Content Document (for XHTML content, the reference would be to
                        the <code>body</code> element).</para>
                </section>

                <section>
                    <title>"[" XML ID Assertion</title>

                    <para>Each element specified with a "/" followed by an even number may
                        optionally include the XML ID specified for the element, enclosed in square
                        brackets. If an element traversed by a step has an XML ID, the identifier
                        must be included in the step notation, within brackets square.</para>

                    <para>Specification of such identifiers adds robustness to the CFI scheme. A
                        Reading System may determine that the location referenced by the CFI is not
                        the original intended location, and may use the identifier to compute the
                        set of steps that reach the desired destination in the content (see
                        "Intended Target Location Recovery" below). The cost of this added
                        robustness is that comparison (and sorting) of CFI strings may only be
                        performed after logically stripping all bracketed sub-strings (see "Sorting
                        Rules" below).</para>
                </section>

                <section>
                    <title>"!" Step Indirection</title>

                    <para>A step with a leading "!" means that the reference must be followed. The
                        next step must be applied starting from the target node (root element node
                        when a complete XML document is referenced). Only these specific references
                        are honored:</para>

                    <itemizedlist>
                        <listitem>
                            <para>For OPF <code>itemref</code> in the <code>spine</code> refers to
                                the file referenced by the href attribute of the <code>item</code>
                                element in the <code>manifest</code> with the given id.</para>
                        </listitem>
                        <listitem>
                            <para>For HTML <code>iframe</code> and <code>embed</code> elements,
                                references are defined by the src attribute</para>
                        </listitem>
                        <listitem>
                            <para>For the HTML <code>object</code> element, the reference is defined
                                by the data attribute</para>
                        </listitem>
                        <listitem>
                            <para>For SVG image and use elements references are defined by the
                                xlink:href attribute</para>
                        </listitem>
                        <listitem>
                            <para>Note that this schema does not take into account hyperlinks, only
                                "embedding" references; thus, it is illegal to follow links from the
                                XHTML (or SVG) <code>a</code> element.</para>
                        </listitem>
                    </itemizedlist>

                </section>

                <section>
                    <title>":" Terminating Step – Character Offset</title>

                    <para>A terminating step with a leading ":" followed by an integer refers to a
                        character offset. For element nodes, the character offset is a UTF-16
                        codepoint index in the element's intrinsic textual value. This is zero for
                        most element nodes, except for the XHTML img element where the alt attribute
                        value is used. For text nodes or a collection of nodes, the UTF-16 codepoint
                        index is calculated after concatenating text data from all the nodes. Offset
                        is zero-based and always refers to a position between characters, so 0 means
                        before the first character, and a number equal to the total UTF-16 length
                        means after the last character. A character offset value greater than the
                        UTF-16 length of the available text must not be specified.</para>

                    <para>A character offset terminating step may only be present following a "/N"
                        step. For XHTML documents, N would be even when referencing the alt text of
                        an img element, and N would be odd when referencing text in a text
                        node.</para>

                    <para>No other steps may follow a character offset terminating step.</para>
                </section>

                <section>
                    <title>"~" Terminating Step – Temporal Offset</title>

                    <para>A terminating step with a leading "~" followed by a number means temporal
                        position for audio or video, measured in seconds.</para>

                    <para>No other steps can follow a temporal offset terminating step.</para>
                </section>

                <section>
                    <title>"@" Terminating Step – Spacial Offset</title>

                    <para>A terminating step with a leading "@" followed by two colon-seperated
                        numbers indicates a 2D spacial position within an image or video using x and
                        y in the range "0" to "100" to represent scaled locations. The upper left is
                        "0:0" and the lower right is "100:100" regardless of the image’s native or
                        display dimensions.</para>

                    <para>No other steps can follow a spacial offset terminating step.</para>
                </section>

                <section>
                    <title>"~" + "@" Terminating Step – Temporal-Spacial Offset</title>

                    <para>A temporal and a spacial position may be used together. In this case, the
                        temporal specification must precede the spacial one syntactically (.e.g.
                        "~23.5@5.75:97.6" – 23.5 seconds into a video, referencing a point in the
                        lower left of the frame).</para>

                    <para>No other steps can follow a temporal-spacial position terminating
                        step.</para>
                </section>

                <section>
                    <title>"[" Text Location Assertion</title>

                    <para>For another level of added robustness, CFI may contain "text location
                        assertion". This assertion may only be present following a "character
                        offset" (":") terminating step.</para>

                    <para>In it simplest form it contains a substring preceding the encountered
                        point. For example, the following expression asserts that "bbb" is expected
                        to be right before the encountered point.</para>

                    <informalexample>
                        <synopsis>#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[bbb])</synopsis>
                    </informalexample>

                    <para>An additional substring that follows the encountered point can be given
                        after comma. For example:</para>

                    <informalexample>
                        <synopsis>#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[aa,b])</synopsis>
                    </informalexample>

                    <para>refers to the same position as the earlier one, marked by the
                        asterisk:</para>

                    <informalexample>
                        <synopsis><![CDATA[
a a a b b b 0 1 2 3 4 5 6 7 8 9
| | | * | | | | | | | | | | | | |]]></synopsis>
                    </informalexample>

                    <para>There is no particular restriction on the amount of the preceding and
                        following text included in the text match. Text is taken from the document
                        ignoring element boundaries. Whitespace is always collapsed, in other words
                        a non-empty sequence of contiguous whitespace characters is always replaced
                        with a single space character. If there is no preceding text, or only
                        trailing text is specified, a text location assertion such as "[,bbb]" may
                        be used.</para>

                    <para>A Reading System may determine that the location referenced by the CFI is
                        not the original intended location (due to non-matching text), and may use
                        the preceding/trailing text to compute the set of steps that reach the
                        desired destination in the content (see "Intended Target Location
                        Correction" below). The cost of this added robustness is that comparison
                        (and sorting) of CFI strings may only be performed after logically stripping
                        all bracketed sub-strings (see "Sorting Rules" below).</para>
                </section>

                <section>
                    <title>"[" + ";s=" Side Bias</title>

                    <para>In some situations, it is important to preserve information on which side
                        of a location is desired to be referenced when it makes a difference. For
                        instance, when resolving a location in a dynamically paginated environment,
                        for some locations (e.g. right on the page break) it would make a difference
                        if a location is "glued" to the content before or after it. Side bias only
                        specifies which side of a specified location to "stick to" if there is some
                        sort of a break which falls at that location (e.g. page break or line
                        break). </para>

                    <para>To preserve this information, the "s" parameter can be used. It can take
                        two values: "a" means that location is glued to the content "after" it, and
                        "b" means to the content before it. This parameter must always be used
                        inside square brackets at the very end of the CFI, even if the XML ID or
                        text location assertion is empty. For instance, given:</para>

                    <informalexample>
                        <synopsis><![CDATA[<p id="para05">aaa<em>bbb</em>0123456789</p>]]></synopsis>
                    </informalexample>

                    <para>the location just after "bbb" which is glued to the content before it can
                        be expressed as:</para>

                    <informalexample>
                        <synopsis>#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[;s=b])</synopsis>
                    </informalexample>

                    <para>or (also including a text location assertion):</para>

                    <informalexample>
                        <synopsis>#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[bbb;s=b])</synopsis>
                    </informalexample>

                    <para>Or, in this case, the location of the start of <code>em</code> element,
                        using side-bias to be glued to the content just before before the
                            <code>em</code> element starts:</para>

                    <informalexample>
                        <synopsis>#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2[;s=b])</synopsis>
                    </informalexample>

                    <para>If the side bias in the just-preceding example was "a", rather than "b",
                        it would glue to the content just after the <code>em</code> element starts,
                        not the end of the <code>em</code> element’s content (i.e. excluding the
                        possibility of any generated content, stick to the leading "b").</para>

                    <para>Note that since side bias is expressed as a parameter, it does not
                        participate in CFI comparison (see "Sorting Rules" below).</para>

                    <para>Side is not defined for locations with spacial terminus.</para>
                </section>

            </section>

            <section>
                <title>Example</title>

                <para>In the example above, if the OPF file looks like this:</para>

                <informalexample>
                    <synopsis><xi:include parse="text" href="examples/cfi/opf-1.xml"/></synopsis>
                </informalexample>

                <para>and chapter01.xhtml like this:</para>

                <informalexample>
                    <synopsis><xi:include parse="text" href="examples/cfi/html-1.xml"/></synopsis>
                </informalexample>

                <para>Then the initial example fragment identifier:</para>

                <informalexample>
                    <synopsis>#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)</synopsis>
                </informalexample>

                <para>refers to the position right after the digit 9. When producing CFIs for text
                    locations, unless the text is defined by an img element's alt tag, one should
                    always start with the text node or text node collection (even if empty) that
                    corresponds to the location and then trace the ancestor and reference chain to
                    the OPF file root.</para>

                <para>Here are some examples:</para>

                <informalexample>
                    <para>img element</para>
                    <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/16[svgimg])</synopsis>
                </informalexample>

                <informalexample>
                    <para> location just before aaa</para>
                    <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:0)</synopsis>
                </informalexample>

                <informalexample>
                    <para> location just before bbb</para>
                    <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:0)</synopsis>
                </informalexample>

                <informalexample>
                    <para> location just after bbb</para>
                    <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3)</synopsis>
                </informalexample>

            </section>

            <section>
                <title>Sorting Rules</title>

                <para>In order to sort or compute relative locations of multiple EPUB CFI’s
                    referencing the same publication, the following rules must be followed:</para>

                <orderedlist>
                    <listitem>
                        <para>The "URI un-escaped" core path is used</para>
                    </listitem>
                    <listitem>
                        <para>All bracketed annotations are removed or ignored entirely</para>
                    </listitem>
                    <listitem>
                        <para>Steps that come earlier in the sequence are more important</para>
                    </listitem>
                    <listitem>
                        <para>XML child nodes, character offsets and temporal positions are sorted
                            in natural order</para>
                    </listitem>
                    <listitem>
                        <para>The y position is more important than x</para>
                    </listitem>
                    <listitem>
                        <para>Omitted spacial position precedes all other spacial positions</para>
                    </listitem>
                    <listitem>
                        <para>Omitted temporal position precedes all other temporal positions</para>
                    </listitem>
                    <listitem>
                        <para>Temporal position is more important than spacial</para>
                    </listitem>
                    <listitem>
                        <para>Different step types come in the following order from least important
                            to most important: character offset (":"), child ("/"), temporal-spacial
                            ("~" or "@"), reference/indirect ("!’).</para>
                    </listitem>
                </orderedlist>

            </section>

            <section>
                <title>Relative CFI’s</title>

                <para>A CFI can also be used to cross-reference XML content inside the EPUB package.
                    In that case, a relative reference to a particular resource in the spine could
                    be given (as usual), followed by a CFI which must be resolved starting from the
                    document root element. For instance, chapter02.xhtml might give a reference to
                    the last location in the previous example like this:</para>

                <informalexample>
                    <synopsis><![CDATA[<a href="chapter01.xhtml#epubcfi(/4[body01]/10[para05]/2/1:3b)">location</a>]]></synopsis>
                </informalexample>
            </section>

            <section>
                <title>Simple Ranges</title>

                <para>EPUB CFI provides for simple ranges extending from a start location to an end
                    location. Rather than simply stating start and finish, a range is expressed as a
                    parent path followed by a start subpath and a end subpath.</para>

                <para>An path prefix is a prefix of a path ending at a step that is common for the
                    path of the start and end locations of the range. A local subpath is a suffix of
                    a start and end paths consisting of zero or more steps to a terminus.</para>

                <para>A range is a pair of locations in non-decreasing order. A range description
                    (often just called a "range") is a triple, (P,S,E) where P is a path prefix, S
                    is a local subpath and E is a local subpath, and the pair of concatenations
                    (PS,PE) specify a range (two locations in non-decreasing order).</para>

                <para>The range from PS to PE is represented as:</para>

                <informalexample>
                    <synopsis>#epubcfi(P,S,E)</synopsis>
                </informalexample>

                <para>Ranges are compared according to the PS, then PE, components.</para>

                <para>Using sample document above this range represents text from the second b in
                    "bbb" to (and including) digit "3":</para>

                <informalexample>
                    <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05],/2/1:1,/3:4)</synopsis>
                </informalexample>

                <para>Note that it is incorrect to use a path to an element as a shorthand for the
                    range from the beginning to the end of the element. Single path notation always
                    denotes a location point and range is represented by the notation described
                    above. There is no special step to procude a reference to the end of an element
                    as that would make sorting impossible without consulting the content of the
                    document.</para>

                <para>If range is used where single location is expected by the context, the start
                    location must be used.</para>

                <para>Side-bias parameters must not be used for ranges; the start of a range is
                    implicitly glued to the content after the start location, and the end is
                    implicitly glued to the content before the end location.</para>
            </section>

            <section>
                <title>Intended Target Location Correction</title>

                <para>An EPUB may be updated, corrected, or otherwise slightly altered over time; it
                    is useful to derive an EPUB CFI for the modified document from one that targeted
                    a previous version of that publication. EPUB CFI provides two mechanisms and an
                    extension architecture (see "Rules for Extensions" below) to detect and adapt to
                    content changes that impact CFI’s: XML ID and Text Location assertions.</para>

                <para>When a Reading System is processing a CFI, it should check the correctness of
                    any encountered assertions. For example, given "/6/4[chap01ref]!...", when
                    processing element "4", an <code>itemref</code> in the <code>spine</code>, the
                    Reading System should verify that the element has the XML ID matching
                    "chap01ref". If not, the Reading System should locate the XML ID "chap01ref"
                    within the document and "correct" the CFI (e.g. if a new <code>itemref</code>
                    was inserted before the "chap01ref" <code>itemref</code>, the desired element
                    number would now be "6" rather than "4", and the corrected CFI would be
                    "/6/6[chap01ref]!..."). Likewise, text location assertions should be used to
                    check referenced target locations, and used to derive a corrected CFI that
                    targets the desired text location.</para>

                <para>If one of the assertions fails during processing, and a corrected CFI can not
                    be derived (XML ID not found in the document, or text matches could not be
                    found), the CFI must be considered an invalid reference. In cases where a
                    Reading System can not check for correctness (e.g. document-resident XML IDs are
                    not available at CFI processing time), a Reading System must ignore the CFI
                    assertions.</para>

                <para>This notion of "correcting" CFI’s can lead to circumstances where two
                    different CFI’s point to the same location (i.e. the "stale" CFI,
                    pre-correction, and the corrected CFI). The corrected CFI should be used where
                    possible. A Reading System and any surrounding content management system should
                    attempt to replace stale CFI’s with their corrected versions where
                    possible.</para>
            </section>

            <section>
                <title>Rules for Extensions</title>

                <para>It is premature, if not impossible, to know which additional heuristics will
                    be useful and reliable for CFI verification and correction (in addition to the
                    currently provided XML ID and text location assertions). The provision for such
                    extensions (CSV parameter lists, prefixed by an parameter name, and separated by
                    semicolons) allow Reading Systems to apply new or experimental heuristics to
                    assist migrating EPUB CFI fragments to updated documents. Future versions of
                    this specification may define additional parameter names. Implementations must
                    ignore all parameters that they do not understand or cannot parse.</para>

                <para>It is recommended that any vendor-specific parameter names start with "vnd."
                    followed by the vendor name.</para>

                <para>For a sake of example, one heuristic often applied when using XPointers is to
                    overcome whitespace jitter by searching for the nth instance of a substring, in
                    the hope that no identical substrings were introduced or removed when the
                    document changed. The introduction of intervening whitespace (due to parser
                    variations) or of minor edits may push the pattern around, but the intended
                    location will be tracked by the text location assertion.</para>

                <para>The XPointer string-range function supports obtaining a character position
                    based on an offset from the nth instance (if any) of a given string. A simple
                    possible extension for EPUB CFI would be to specify an offset from the nth
                    instance of a search string (defaulting to 0 on failure):</para>

                <informalexample>
                    <synopsis>";nth=" searchString [ "," searchInstance [ "," searchOffset ] ] </synopsis>
                </informalexample>

                <para>When migrating EPUB CFI references to a revised document, the Reading System
                    may recognize such an extension and attempt to correct the target location
                    accordingly.</para>
            </section>

        </section>

    </chapter>

    <xi:include href="./share/references.xml"/>

</book>

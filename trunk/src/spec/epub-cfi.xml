<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../util/docbook/schema/docbookspec.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="../../util/docbook/schema/docbookspec.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-model href="../../util/docbook/schema/docbook.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<book version="5.1" xmlns="http://docbook.org/ns/docbook" xmlns:epub="http://www.idpf.org/2011/epub"
  xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>EPUB Canonical Fragment Identifier (epubcfi) Specification</title>
  <info>
    <releaseinfo>Draft Specification</releaseinfo>
    <pubdate>8 November 2013</pubdate>
    <printhistory>
      <formalpara>
        <title>This version</title>
        <para>
          <link xlink:href="http://www.idpf.org/epub/linking/cfi/epub-cfi-20131108.html"/>
        </para>
      </formalpara>
      <formalpara>
        <title>Latest version</title>
        <para>
          <link xlink:href="http://www.idpf.org/epub/linking/cfi/epub-cfi.html"/>
        </para>
      </formalpara>
      <formalpara>
        <title>Previous version</title>
        <para>
          <link xlink:href="http://www.idpf.org/epub/linking/cfi/epub-cfi-20111011.html"/>
        </para>
      </formalpara>
    </printhistory>
    <releaseinfo role="errata"> Please refer to the <link xlink:href="./epub-cfi-errata/"
        >errata</link> for this document, which may include some normative corrections. </releaseinfo>
    <releaseinfo role="diff"> A <link
      xlink:href="http://code.google.com/p/epub-revision/source/diff?spec=svn4846&amp;old=3218&amp;r=4846&amp;format=side&amp;path=%2Ftrunk%2Fsrc%2Fspec%2Fepub-cfi.xml"
      >diff of changes</link> from the previous version is also available. </releaseinfo>
    <copyright xmlns="http://docbook.org/ns/docbook">
      <year>2011</year>
      <holder>International Digital Publishing Forum™</holder>
    </copyright>
    <xi:include href="./share/legalnotice.xml"/>
    <authorgroup>
      <editor>
        <personname>Peter Sorotokin</personname>
        <affiliation>
          <org>
            <orgname>Adobe</orgname>
          </org>
        </affiliation>
      </editor>
      <editor>
        <personname>Garth Conboy</personname>
        <affiliation>
          <org>
            <orgname>Google Inc.</orgname>
          </org>
        </affiliation>
      </editor>
      <editor>
        <personname>Brady Duga</personname>
        <affiliation>
          <org>
            <orgname>Google Inc.</orgname>
          </org>
        </affiliation>
      </editor>
      <editor>
        <personname>John Rivlin</personname>
        <affiliation>
          <org>
            <orgname>Google Inc.</orgname>
          </org>
        </affiliation>
      </editor>
      <editor>
        <personname>Don Beaver</personname>
        <affiliation>
          <org>
            <orgname>Apple Inc.</orgname>
          </org>
        </affiliation>
      </editor>
      <editor>
        <personname>Kevin Ballard</personname>
        <affiliation>
          <org>
            <orgname>Apple Inc.</orgname>
          </org>
        </affiliation>
      </editor>
      <editor>
        <personname>Alastair Fettes</personname>
        <affiliation>
          <org>
            <orgname>Apple Inc.</orgname>
          </org>
        </affiliation>
      </editor>
      <editor>
        <personname>Daniel Weck</personname>
        <affiliation>
          <org>
            <orgname>DAISY Consortium</orgname>
          </org>
        </affiliation>
      </editor>
    </authorgroup>
    <abstract role="index-description">
      <para>This specification defines a standardized method for referencing arbitrary content
        within an EPUB 3 Publication through the use of fragment identifiers. </para>
    </abstract>
  </info>
  <chapter xml:id="sec-overview" conformance="informative">
    <title>Overview</title>
    <section xml:id="sec-overview-purpose-and-scope">
      <title>Purpose and Scope</title>
      <para xml:id="sibling-specs">This specification, EPUB Canonical Fragment Identifier (epubcfi),
        defines a standardized method for referencing arbitrary content within an EPUB® Publication
        through the use of fragment identifiers. </para>
      <para>The Web has proven that the concept of hyperlinking is tremendously powerful, but EPUB
        Publications have been denied much of the benefit that hyperlinking makes possible because
        of the lack of a standardized scheme to link into them. Although proprietary schemes have
        been developed and implemented for individual Reading Systems, without a commonly-understood
        syntax there has been no way to achieve cross-platform interoperability. The functionality
        that can see significant benefit from breaking down this barrier, however, is varied: from
        reading location maintenance to annotation attachment to navigation, the ability to point
        into any Publication opens a whole new dimension not previously available to developers and
        Authors. </para>
      <para>This specification attempts to rectify this situation by defining an arbitrary
        structural reference that can uniquely identify any location, or simple range of locations,
        in an EPUB Publication: the EPUB CFI. The following considerations have strongly influenced the
        design and scope of this scheme:</para>
      <itemizedlist>
        <listitem>
          <para>The mechanism used to reference content should be interoperable: references to a
            reading position created by one Reading System should be usable by another.</para>
        </listitem>
        <listitem>
          <para>Document references to EPUB content should be enabled in the same way that existing
            hyperlinks enable references throughout the Web.</para>
        </listitem>
        <listitem>
          <para>Each location in an EPUB file should be able to be identified without the need to
            modify the document.</para>
        </listitem>
        <listitem>
          <para>All fragment identifiers that reference the same logical location should be equal
            when compared.</para>
        </listitem>
        <listitem>
          <para>Comparison operations, including tests for sorting and comparison, should be able to
            be performed without accessing the referenced files.</para>
        </listitem>
        <listitem>
          <para>Simple manipulations should be possible without access to the original files (e.g.,
            given a reference deep in a file, it should be possible to generate a reference to the
            start of the file).</para>
        </listitem>
        <listitem>
          <para>Identifier resolution should be reasonably efficient (e.g., processing of the first
          	chapter is not required to resolve a fragment identifier that points to the last
            chapter).</para>
        </listitem>
        <listitem>
          <para>References should be able to recover their target locations through parser
            variations and document revisions.</para>
        </listitem>
        <listitem>
          <para>Expression of simple, contiguous ranges should be supported.</para>
        </listitem>
        <listitem>
        	<para>An extensible mechanism to accommodate future reference recovery heuristics should
            be provided.</para>
        </listitem>
      </itemizedlist>
      <para>In the case of both <xref linkend="gloss-cfi-pub"/>s and <xref linkend="gloss-cfi-intra-pub"/>s, 
        this specification conforms with the guidelines expressed by W3C in 
        <link xlink:href="http://www.w3.org/TR/fragid-best-practices/#structures">Section 6. Best Practices for 
        Fragid Structures</link> <xref linkend="refFragIDBP"/>.</para>
      <para>In other words, both standard CFI URIs (e.g., "<uri>book.epub#epubcfi(…)</uri>", referred 
        media type "<code role="media-type">application/epub+zip</code>") and intra-publication CFI URIs 
        (e.g., "<uri>package.opf#epubcfi(…)</uri>", referred media type "<code role="media-type">application/oebps-package+xml</code>")
        make use of a fragment identifier syntax that does not overlap with existing schemes in the 
        context of the aforementioned media types' suffix registrations (i.e., "<markup>-xml</markup>"
    	and "<markup>-zip</markup>").
   	   </para>
    </section>
    <section xml:id="sec-terminology">
      <title>Terminology</title>
      <para>
        <emphasis>Please refer to the EPUB Specifications for definitions of EPUB-specific
          terminology used in this document.</emphasis>
      </para>
      <glosslist>
        <glossentry xml:id="gloss-cfi-pub">
          <glossterm>Standard EPUB CFI</glossterm>
          <glossdef>
            <para>A publication-level EPUB CFI links into an EPUB Publication. The path preceding
              the EPUB CFI references the location of the EPUB Publication.</para>
          </glossdef>
        </glossentry>
        <glossentry xml:id="gloss-cfi-intra-pub">
          <glossterm>Intra-Publication EPUB CFI</glossterm>
          <glossdef>
            <para>An intra-publication EPUB CFI allows one Content Document to reference another
              within the same Rendition of an EPUB Publication. The path preceding the EPUB CFI references the current
              Rendition's Package Document.</para>
            <para>Refer to <xref epub:spec-include="cfi" linkend="sec-intra-cfis"/>
              <olink epub:spec-include="default" targetdoc="cfi" targetptr="sec-intra-cfis"
                type="epub-spec"/> for more information. </para>
          </glossdef>
        </glossentry>
      </glosslist>
    </section>
    <xi:include href="./share/typography.xml"/>
    <xi:include href="./share/conformancestatements.xml"/>
  </chapter>
  <chapter xml:id="sec-epubcfi-def">
    <title>EPUB CFI Definition</title>
    <section conformance="informative" xml:id="sec-epubcfi-intro">
      <title>Introduction</title>
      <para>A fragment identifier is the part of an IRI <xref linkend="refRFC3987"/> that defines a
        location within a resource. Syntactically, it is the segment attached to the of end the
        resource IRI starting with a hash (<literal>#</literal>). For HTML documents, IDs and named
        anchors are used as fragment identifiers, while for XML documents the Shorthand XPointer
          <xref linkend="refXPTRSH"/> notation is used to refer to a given ID.</para>
      <para>A Canonical Fragment Identifier (CFI) is a similar construct to these, but expresses a
        location within an EPUB Publication. For example:</para>
      <informalexample>
        <synopsis>book.epub#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)</synopsis>
      </informalexample>
      <para>The function-like string immediately following the hash (<markup>epubcfi(…)</markup>)
        indicates that this fragment identifier conforms to the scheme defined by this
        specification, and the value contained in the parentheses is the syntax used to reference
        the location within the specified EPUB Publication (<filename>book.epub</filename>). Using the
        processing rules defined in <xref linkend="sec-path-res"/>, any Reading System can parse
        this syntax, open the corresponding Content Document in the EPUB Publication and load the
        specified location for the User.</para>
      <para>A complete definition of the EPUB CFI syntax is provided in the next section.</para>
      <note>
        <para><markup>epub</markup> has been prepended to the name of the scheme, as a more generic
          CFI-like scheme may be defined in the future for all XML+ZIP-based file formats.</para>
      </note>
    </section>
    <section xml:id="sec-epubcfi-syntax">
      <title>Syntax</title>
      <productionset>
        <title>The EPUB Canonical Fragment Identifier (CFI) Syntax</title>
        <production xml:id="epubcfi.ebnf.fragment">
          <lhs>fragment</lhs>
          <rhs> "epubcfi(" , ( <nonterminal def="#epubcfi.ebnf.path">path</nonterminal> ,
              [ <nonterminal def="#epubcfi.ebnf.range">range</nonterminal> ] ) , ")" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.path">
          <lhs>path</lhs>
          <rhs>
            <nonterminal def="#epubcfi.ebnf.step">step</nonterminal> , <nonterminal
              def="#epubcfi.ebnf.local_path">local_path</nonterminal>
          </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.range">
          <lhs>range</lhs>
          <rhs>
            "," , <nonterminal
              def="#epubcfi.ebnf.local_path">local_path</nonterminal> , "," , <nonterminal
              def="#epubcfi.ebnf.local_path">local_path</nonterminal>
          </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.local_path">
          <lhs>local_path</lhs>
          <rhs> { <nonterminal def="#epubcfi.ebnf.step">step</nonterminal> } , ( 
          	<nonterminal def="#epubcfi.ebnf.redirected_path">redirected_path</nonterminal> |
          	[ <nonterminal def="#epubcfi.ebnf.offset">offset</nonterminal> ] )</rhs>
        </production>
      	<production xml:id="epubcfi.ebnf.redirected_path">
      		<lhs>redirected_path</lhs>
      		<rhs> "!" , ( <nonterminal def="#epubcfi.ebnf.offset">offset</nonterminal> |
      			<nonterminal def="#epubcfi.ebnf.path">path</nonterminal> )</rhs>
      	</production>
        <production xml:id="epubcfi.ebnf.step">
          <lhs>step</lhs>
          <rhs> "/" , <nonterminal def="#epubcfi.ebnf.integer">integer</nonterminal> , [ "[" ,
              <nonterminal def="#epubcfi.ebnf.assertion">assertion</nonterminal> , "]" ] </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.offset">
          <lhs>offset</lhs>
          <rhs>
          	( ( ":" , <nonterminal def="#epubcfi.ebnf.integer">integer</nonterminal> ) | ( "@" ,
          	<nonterminal def="#epubcfi.ebnf.number">number</nonterminal> , ":" , <nonterminal
          	  def="#epubcfi.ebnf.number">number</nonterminal> ) | ( "~" , <nonterminal
          	  def="#epubcfi.ebnf.number">number</nonterminal> , [ "@" , <nonterminal
          	  def="#epubcfi.ebnf.number">number</nonterminal> , ":" , <nonterminal
          	  def="#epubcfi.ebnf.number">number</nonterminal> ] ) )  , [ "[" , <nonterminal
              def="#epubcfi.ebnf.assertion">assertion</nonterminal> , "]" ] </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.number">
          <lhs>number</lhs>
          <rhs> ( <nonterminal def="#epubcfi.ebnf.digit-non-zero">digit-non-zero</nonterminal> , {
              <nonterminal def="#epubcfi.ebnf.digit">digit</nonterminal> } , [ "." , { <nonterminal
              def="#epubcfi.ebnf.digit">digit</nonterminal> } , <nonterminal
              def="#epubcfi.ebnf.digit-non-zero">digit-non-zero</nonterminal> ] ) | ( <nonterminal
              def="#epubcfi.ebnf.zero">zero</nonterminal> , [ "." , { <nonterminal
              def="#epubcfi.ebnf.digit">digit</nonterminal> } , <nonterminal
              def="#epubcfi.ebnf.digit-non-zero">digit-non-zero</nonterminal> ] ) </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.integer">
          <lhs>integer</lhs>
          <rhs>
            <nonterminal def="#epubcfi.ebnf.zero">zero</nonterminal> | ( <nonterminal
              def="#epubcfi.ebnf.digit-non-zero">digit-non-zero</nonterminal> , { <nonterminal
              def="#epubcfi.ebnf.digit">digit</nonterminal> } ) </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.assertion">
          <lhs>assertion</lhs>
          <rhs> ( ( <nonterminal def="#epubcfi.ebnf.value">value</nonterminal> , 
        		[ "," , <nonterminal def="#epubcfi.ebnf.value">value</nonterminal> ] ) | 
        		( "," , <nonterminal def="#epubcfi.ebnf.value">value</nonterminal> ) | 
        		( <nonterminal def="#epubcfi.ebnf.parameter">parameter</nonterminal> ) ) 
        		{ <nonterminal def="#epubcfi.ebnf.parameter">parameter</nonterminal> } </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.parameter">
          <lhs>parameter</lhs>
          <rhs> ";" , <nonterminal def="#epubcfi.ebnf.value-no-space">value-no-space</nonterminal> ,
            "=" , <nonterminal def="#epubcfi.ebnf.csv">csv</nonterminal>
          </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.csv">
          <lhs>csv</lhs>
          <rhs>
            <nonterminal def="#epubcfi.ebnf.value">value</nonterminal> , { "," , <nonterminal
              def="#epubcfi.ebnf.value">value</nonterminal> } </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.value">
          <lhs>value</lhs>
          <rhs>
            <nonterminal def="#epubcfi.ebnf.string-escaped-special-chars"
              >string-escaped-special-chars</nonterminal>
          </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.value-no-space">
          <lhs>value-no-space</lhs>
          <rhs>
            <nonterminal def="#epubcfi.ebnf.value">value</nonterminal> - ( [ <nonterminal
              def="#epubcfi.ebnf.value">value</nonterminal> ] , <nonterminal
              def="#epubcfi.ebnf.space">space</nonterminal> , [ <nonterminal
              def="#epubcfi.ebnf.value">value</nonterminal> ] ) </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.special-chars">
          <lhs>special-chars</lhs>
          <rhs><nonterminal def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> | <nonterminal
              def="#epubcfi.ebnf.square-brackets">square-brackets</nonterminal> | <nonterminal
              def="#epubcfi.ebnf.parentheses">parentheses</nonterminal> | <nonterminal
              def="#epubcfi.ebnf.comma">comma</nonterminal> | <nonterminal
              def="#epubcfi.ebnf.semicolon">semicolon</nonterminal> | <nonterminal
              def="#epubcfi.ebnf.equal">equal</nonterminal>
          </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.escaped-special-chars">
          <lhs>escaped-special-chars</lhs>
          <rhs> ( <nonterminal def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> ,
              <nonterminal def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> ) | (
              <nonterminal def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> , <nonterminal
              def="#epubcfi.ebnf.square-brackets">square-brackets</nonterminal> ) | ( <nonterminal
              def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> , <nonterminal
              def="#epubcfi.ebnf.parentheses">parentheses</nonterminal> ) | ( <nonterminal
              def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> , <nonterminal
              def="#epubcfi.ebnf.comma">comma</nonterminal> ) | ( <nonterminal
              def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> , <nonterminal
              def="#epubcfi.ebnf.semicolon">semicolon</nonterminal> ) | ( <nonterminal
              def="#epubcfi.ebnf.circumflex">circumflex</nonterminal> , <nonterminal
              def="#epubcfi.ebnf.equal">equal</nonterminal> ) </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.character-escaped-special">
          <lhs>character-escaped-special</lhs>
          <rhs> ( <nonterminal def="#epubcfi.ebnf.character">character</nonterminal> - <nonterminal
              def="#epubcfi.ebnf.special-chars">special-chars</nonterminal> ) | <nonterminal
              def="#epubcfi.ebnf.escaped-special-chars">escaped-special-chars</nonterminal>
          </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.string-escaped-special-chars">
          <lhs>string-escaped-special-chars</lhs>
          <rhs>
            <nonterminal def="#epubcfi.ebnf.character-escaped-special"
              >character-escaped-special</nonterminal> , { <nonterminal
              def="#epubcfi.ebnf.character-escaped-special">character-escaped-special</nonterminal>
            } </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.digit">
          <lhs>digit</lhs>
          <rhs>
            <nonterminal def="#epubcfi.ebnf.zero">zero</nonterminal> | <nonterminal
              def="#epubcfi.ebnf.digit-non-zero">digit-non-zero</nonterminal>
          </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.digit-non-zero">
          <lhs>digit-non-zero</lhs>
          <rhs> "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.zero">
          <lhs>zero</lhs>
          <rhs> "0" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.space">
          <lhs>space</lhs>
          <rhs> " " </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.circumflex">
          <lhs>circumflex</lhs>
          <rhs> "^" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.square-brackets">
          <lhs>square-brackets</lhs>
          <rhs> "[" | "]" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.parentheses">
          <lhs>parentheses</lhs>
          <rhs> "(" | ")" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.comma">
          <lhs>comma</lhs>
          <rhs> "," </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.semicolon">
          <lhs>semicolon</lhs>
          <rhs> ";" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.equal">
          <lhs>equal</lhs>
          <rhs> "=" </rhs>
        </production>
        <production xml:id="epubcfi.ebnf.character">
          <lhs>character</lhs>
          <rhs> ? Unicode Characters ? <!--<lineannotation>/* . */</lineannotation>-->
          </rhs>
          <!--<constraint linkend="unicode-chars" />-->
        </production>
      </productionset>
      <constraintdef xml:id="unicode-chars">
        <title>Unicode Characters</title>
        <para> The definition of allowed Unicode characters is the same as <xref linkend="refXML"/>. This excludes
          the surrogate blocks, FFFE, and FFFF: </para>
        <programlisting>
<![CDATA[
#x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
]]></programlisting>
        <para>Document authors are encouraged to avoid "compatibility characters", as defined in
          section 2.3 of <xref linkend="refUnicode5"/>. The characters defined in the following ranges are also
          discouraged. They are either control characters or permanently undefined Unicode
          characters:</para>
        <programlisting>
<![CDATA[
[#x7F-#x84], [#x86-#x9F], [#xFDD0-#xFDEF],
[#x1FFFE-#x1FFFF], [#x2FFFE-#x2FFFF], [#x3FFFE-#x3FFFF],
[#x4FFFE-#x4FFFF], [#x5FFFE-#x5FFFF], [#x6FFFE-#x6FFFF],
[#x7FFFE-#x7FFFF], [#x8FFFE-#x8FFFF], [#x9FFFE-#x9FFFF],
[#xAFFFE-#xAFFFF], [#xBFFFE-#xBFFFF], [#xCFFFE-#xCFFFF],
[#xDFFFE-#xDFFFF], [#xEFFFE-#xEFFFF], [#xFFFFE-#xFFFFF],
[#x10FFFE-#x10FFFF].
]]></programlisting>
      </constraintdef>
      <!-- 
                ascii-string = ascii-char { ascii-char } .
                ascii-char     = lowercase-char | uppercase-char | digit .
                lowercase-char = "a" | "b" | "…" | "z" .
                uppercase-char = "A" | "B" | "…" | "Z" .
            -->
      <!-- production xml:id="epubcfi.ebnf.fragment">
                <lhs>fragment</lhs>
                <rhs -->
      <!-- lineannotation>Comment.</lineannotation -->
      <!-- /rhs -->
      <!-- /production -->
      <!-- REPLACE "xxx" with copy/paste of the EBNF production rules (using mouse from web browser) -->
      <!-- imagedata fileref="http://data.daisy.org/projects/tobi/ebnf/ebnf.php?syntax=%22EBNF%20production%20rules%20/%20syntax%20diagram%20for%20EPUB%20CFI%20(Canonical%20Fragment%20Identifiers)%20%22{
                xxx
                }" format="PNG"/ -->
      <!--
            <mediaobject>
                <imageobject>
                    <imagedata fileref="" format="PNG"/>
                </imageobject>
                <textobject>
                    <phrase>EBNF production rules / syntax diagram for EPUB CFI (Canonical Fragment Identifiers)</phrase>
                </textobject>
                <caption>
                <para>
                    EBNF production rules / syntax diagram for EPUB CFI (Canonical Fragment Identifiers)
                </para>
                </caption>
                </mediaobject>
            
             mediaobject>
                <imageobject>
                    <imagedata fileref="./epub-cfi-ebnf-syntax-diagram.png" format="PNG"/>
                </imageobject>
                <textobject>
                    <phrase>The EPUB Canonical Fragment Identifier (CFI) Syntax Diagram</phrase>
                </textobject>
                <caption>
                    <para>
                        The EPUB Canonical Fragment Identifier (CFI) Syntax Diagram
                    </para>
                </caption>
            </mediaobject -->
      <!-- programlisting><![CDATA[
fragment      = "epubcfi(" , ( path | range ) , ")" ;

path          = step , local_path ;

range         = path , "," , local_path , "," , local_path ;

local_path    = { step | "!" } , [ termstep ] ;

step          = "/" , integer , [ "[" , assertion , "]" ] ;

termstep      = terminus , [ "[" , assertion , "]" ] ;

terminus      = (":" , integer)
                | ("@" , number , ":" , number)
                | ("~" , number)
                | ("~" , number , "@" , number , ":" , number) ;

number        = digit , { digit } , [ "." , digit , { digit } ] ;

integer       = digit , { digit } ;

assertion     = [ csv ] , parameters ;

parameters    = { ";" , param_name , "=" , csv } ;

param_name    = xml_id ;

csv           = value , { "," , value } ;

value         = string | quoted-string ;

quoted-string = '"' , string , '"' ;

string        = char , { char } ;

digit         = "0".."9" ;

char          = ? unicode characters ? ;

xml_id        = ? xml identifier ? ;]]></programlisting -->
      <para>A Canonical Fragment Identifier (CFI) consists of an initial sequence
          <markup>epubcfi</markup> that identifies this particular reference method, and a
        parenthesized path or range. A path is built up as a sequence of structural steps to
        reference a location. A range is a path followed by two local (or relative) paths that
        identify the start and end of the range.</para>
      <para>Steps are denoted by the forward slash character (<literal>/</literal>), and are 
      	used to traverse XML content. The last step in a CFI path represents a location within 
      	a document, either structural (XML element), textual (character data), or aural-visual 
      	(image, audio, or video media). Such terminating steps <literal role="rfc2119">may</literal> 
      	be complemented by an optional "offset", which denotes a particular character position, 
      	temporal or spatial fragment.</para>
      <para>Substrings in brackets are extensible assertions that improve the robustness of
        traversing paths and migrating them from one revision of the document to another. These
        assertions preserve additional information about traversed elements of the document, which
        makes it possible to recover intended location even after some modifications are made to the
        EPUB Publication.</para>
      <para>Although the <emphasis role="strong">value</emphasis> definition in the syntax above allows any a
        sequence of characters, a circumflex (<literal>^</literal>) <literal role="rfc2119">must</literal> be used to escape the
        following characters to ensure their presence does not interfere with parsing:</para>
      <itemizedlist>
        <listitem>
          <para>brackets (<literal>[</literal>,<literal>]</literal>)</para>
        </listitem>
        <listitem>
          <para>circumflex (<literal>^</literal>)</para>
        </listitem>
        <listitem>
          <para>comma (<literal>,</literal>)</para>
        </listitem>
        <listitem>
          <para>parentheses (<literal>(</literal>,<literal>)</literal>)</para>
        </listitem>
        <listitem>
          <para>semicolon (<literal>;</literal>)</para>
        </listitem>
      </itemizedlist>
      <informalexample>
        <para>Example of an EPUB CFI that points to a location after the text
          "<literal>2[1]</literal>".</para>
        <synopsis>epubcfi(/6/14[chap05ref]!/4[body01]/10/2/1:3[2^[1^]])</synopsis>
      </informalexample>
      <para>The following rules apply to the use of numbers and integers within the path or
        range:</para>
      <itemizedlist>
        <listitem>
          <para>leading zeros are not allowed for numbers or integers (to ensure uniqueness);</para>
        </listitem>
        <listitem>
          <para>trailing zeros are not allowed in the fractional part of a number;</para>
        </listitem>
        <listitem>
          <para>zero <literal role="rfc2119">must</literal> be represented as the integer <literal>0</literal>;</para>
        </listitem>
        <listitem>
          <para>numbers in the range <literal>1 > N > 0</literal> <literal role="rfc2119">must</literal> have a leading
              <literal>0.</literal>;</para>
        </listitem>
        <listitem>
          <para>integral numbers <literal role="rfc2119">must</literal> be represented as integers.</para>
        </listitem>
      </itemizedlist>
    </section>
    <section xml:id="sec-epubcfi-escaping">
      <title>Character Escaping</title>
      <para> As described in <xref linkend="sec-epubcfi-syntax"/>, the EPUB CFI grammar contains
        characters that have a special purpose as delimiters within a fragment identifier
        expression. These characters <literal role="rfc2119">must</literal> be escaped using the circumflex '<literal>^</literal>'
      	character when not intended for use as delimiters, so that they can appear within the EPUB CFI data
        without being mistaken for delimiters. Depending on the usage context of such EPUB CFI,
        further character escaping <literal role="rfc2119">may</literal> be necessary in order to ensure that all
        potentially-conflicting text tokens are encoded correctly. </para>
      <itemizedlist>
        <listitem>
          <itemizedlist>
            <para>IRI and URI references:</para>
            <listitem>
              <para> The EPUB CFI (fragment identifier) scheme is designed to be used within URI and
                IRI references. The <xref linkend="refRFC3986"/> specification defines a number of
                "reserved" characters that have a specific purpose as delimiters, and which <literal role="rfc2119">may</literal> need
                to be escaped in cases when they would otherwise conflict with the syntactical
                structure of the URI/IRI reference. The character used for escaping is the percent
                sign '<literal>%</literal>', and escapable characters get percent-encoded. For
                example, the percent character itself becomes "<literal>%25</literal>" when it gets
                escaped (note the difference with EPUB CFI's circumflex '<literal>^</literal>',
                which gets escaped using a double character '<literal>^^</literal>').</para>
            </listitem>
            <listitem>
              <para> Unlike IRI references, URI references require unicode characters to be
                ASCII-encoded. Although the EPUB specification itself is based on IRIs (i.e. authors
                and production tools are expected to use IRIs), some systems or APIs may only
                support URIs. As a result, implementors <literal role="rfc2119">may</literal> still need too handle the conversion of
                IRI to URI references, as defined in <xref linkend="refRFC3987"/>. Disallowed
                characters are escaped as follows: </para>
              <itemizedlist>
                <listitem>
                  <para> Each disallowed character is converted to UTF-8 <xref linkend="refRFC2279"
                    /> as one or more bytes. The disallowed characters in URI references include all
                    non-ASCII characters, plus the excluded characters listed in Section 2.4 of
                      <xref linkend="refRFC2396"/>, except for the number sign
                    '<literal>#</literal>' and percent sign '<literal>%</literal>' and the square
                    bracket characters re-allowed in <xref linkend="refRFC2732"/>.</para>
                  <para> The resulting bytes are escaped with the URI escaping mechanism (that is,
                    converted to '<literal>%HH</literal>', where HH is the hexadecimal notation of
                    the byte value). </para>
                  <para> The original character is replaced by the resulting character sequence.
                  </para>
                </listitem>
              </itemizedlist>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>(X)HTML context:</para>
          <para> IRI references are designed to be used in the various types of documents that EPUB
            Publications comprise. XML and XHTML represent yet another insertion context that
            requires specific character escaping rules. For example, double quote characters or
            angle brackets conflict with significant delimiters in the markup syntax, and <literal role="rfc2119">must</literal>
            therefore be escaped using the <literal>&amp;xxx;</literal> special sequence (character
            reference).</para>
        </listitem>
      </itemizedlist>
      <para> When multiple layers of character escaping are applied to escape or unescape an EPUB
        CFI, they <literal role="rfc2119">must</literal> be applied in reverse order to revert back to the original form. For example,
        [ EPUB-CFI -> IRI -> XHTML ] becomes [ XHTML -> IRI -> EPUB-CFI ] </para>
      <informalexample>
        <para>The following example shows an EPUB CFI in its "raw" form (only with
            '<literal>^</literal>' circumflex escaping). Note the assertion text at the end of it,
          with escaped square brackets as well as the escaped circumflex character itself
          (the unescaped text is 'Ф-"spa ce"-99%-aa[bb]^'):</para>
        <synopsis>epubcfi(/6/4!/4/10/2/1:3[Ф-"spa ce"-99%-aa^[bb^]^^])</synopsis>
      </informalexample>
      <informalexample>
        <para>When taking part in a IRI, the space character within the assertion may become
          percent-escaped ('<literal>%20</literal>'), and the percent character itself must be
          escaped ('<literal>%25</literal>'). Note that the square brackets '<literal>[</literal>'
          '<literal>]</literal>' and semicolumn '<literal>:</literal>' are "reserved" characters
          (as per the URI specification) but because they serve no purpose as delimiters when the
          IRI processor extracts the fragment identifier, they do not need to be escaped (i.e. the
          fragment component of the IRI can non-ambiguously be parsed by processing all the text after
          the '<literal>#</literal>' character). The circumflex '<literal>^</literal>' also falls
          within the category of "unwise" (or "unsafe") characters, but the EPUB fragment
          identifier scheme does not require escaping them. Here is the IRI-escaped EPUB CFI:</para>
        <synopsis>#epubcfi(/6/4!/4/10/2/1:3[Ф-"spa%20ce"-99%25-aa^[bb^]^^])</synopsis>
      </informalexample>
      <informalexample>
        <para>When the IRI appears within an XML attribute, the double quote character (quotation
          mark) is significant as a delimiter of the attribute value, so it becomes escaped with
          '<literal>&amp;#x22;</literal>'. Note that the Cyrillic "EF" character ('Ф') is directly
          supported in EPUB XML documents (which use the UTF-8 encoding to represent the unicode
          character repertoire), so it doesn't need to be encoded:</para>
        <synopsis>#epubcfi(/6/4!/4/10/2/1:3[Ф-&amp;#x22;spa%20ce-99%25&amp;#x22;-aa^[bb^]^^])</synopsis>
      </informalexample>
      <informalexample>
        <para>Should the IRI need to be converted to URI, the non-ASCII Cyrillic "EF" character
          ('Ф') would get percent-escaped with 2 bytes ('<literal>0xd0 0xa4</literal>', in
          hexadecimal). This would result in the following URI:</para>
        <synopsis>#epubcfi(/6/4!/4/10/2/1:3[%d0%a4-&amp;#x22;spa%20ce&amp;#x22;-99%25-aa^[bb^]^^])</synopsis>
        <para> URI encoding / decoding APIs usually "aggressively" percent-encode characters, as
          demonstrated in the following example. Note how the circumflexes '<literal>^</literal>'
          (%5E), square brackets '<literal>[</literal>' (%5B) '<literal>]</literal>' (%5D) and
          double-quotes '<literal>"</literal>' (%22) are also percent-encoded (due to their "unsafe"
          / "unwise" nature within URIs) :</para>
        <synopsis>#epubcfi(/6/4!/4/10/2/1:3%5B%D0%A4-%22spa%20ce%22-99%25-aa%5E%5Bbb%5E%5D%5E%5E%5D)</synopsis>
      </informalexample>
    </section>
  </chapter>
  <chapter xml:id="sec-epubcfi-processing">
    <title>EPUB CFI Processing</title>
    <section xml:id="sec-path-res">
      <title>Path Resolution</title>
      <para>The process of resolving an EPUB CFI to a location within an EPUB Publication begins with the
        root <markup>package</markup> element of the Package Document. Each step in the CFI is then
        processed one by one, left to right, applying the rules defined in the following
        subsections.</para>
      <note>
        <para>The EPUB CFI examples in the following subsections are based on the sample documents
          in <xref linkend="sec-path-examples"/>.</para>
      </note>
      <section xml:id="sec-path-child-ref">
        <title>Step Reference to Child Element or Character Data (<literal>/</literal>)</title>
      	
        <para>A step with a slash (<literal>/</literal>) followed by a positive integer refers to either 
      		a child element or a chunk of character data, as per the rules defined herein:</para> 
      	
      	<itemizedlist>
      		<listitem>
      			<para><xref linkend="refXML"/> content other than element and character data is ignored. 
      				Note that as per the <xref linkend="refXML"/> specification, character data inside CDATA 
      				sections is included, and conversely, XML comments are ignored.</para>
      		</listitem>
      		<listitem>
      			<para><xref linkend="refXML"/> character data that corresponds to insignificant whitespace 
      				(typically used for markup formatting/indenting) is preserved. Character and entity 
      				references are considered expanded, and character data is obtained from the 
      				"included replacement text" (as per the terminology defined in the <xref linkend="refXML"/> 
      				specification).</para>
      		</listitem>
      		<listitem>
      			<para><xref linkend="refXML"/> character data that is interspersed amongst sibling child 
      				elements (i.e., "mixed content" context) is logically organised into (potentially-empty) 
      				chunks of contiguous character data: the first chunk is located before the first child 
      				element (left sibling), the last chunk is located after the last child element (right sibling), 
      				and there is one chunk between each pair of child elements. When there are no child elements, 
      				there is one (potentially-empty) chunk of character data. Consecutive (potentially-empty) chunks 
      				of character data are each assigned odd indices (i.e., starting at 1, followed by 3, etc.).</para>
      		</listitem>
      		<listitem>
      			<para>Child <xref linkend="refXML"/> elements are assigned even indices (i.e., starting at 2, 
      				followed by 4, etc.). Additionally, 0 is a valid index that refers to a non-existing element 
      				which virtually precedes the first potentially-empty chunk of character data within the parent 
      				element's content. Similarly, <literal>n+2</literal> is a valid index that refers to a non-existing 
      				element which virtually follows the last potentially-empty chunk of character data, where 
      			  <literal>n</literal> is the even index of the last child element, or 0 if there are no child 
      				elements. CFI processors (e.g., Reading Systems) <literal role="rfc2119">must</literal> be capable 
      				of consuming (e.g., parsing and interpreting) CFI expressions containing references to the 0 and 
      			  <literal>n+2</literal> "virtual" elements, even when the first (or last, respectively) chunk of 
      				character data is empty. Conversely, the *production* of such CFI expressions is governed by the 
      				following conformance requirement: if the first chunk of character data is empty, a CFI expression 
      				<literal role="rfc2119">should not</literal> be constructed using a reference to the "virtual" 
      				element at index 0, instead the "real" first child element (at index 2) 
      				<literal role="rfc2119">should</literal> be referred to. Similarly, if the last chunk of character 
      				data is empty, a CFI expression <literal role="rfc2119">should not</literal> be constructed using a 
      			  reference to the "virtual" element at index <literal>n+2</literal>, instead the "real" last child element 
      			  (at index <literal>n</literal>) <literal role="rfc2119">should</literal> be referred to.</para>
      		</listitem>
      	</itemizedlist>
      	
      	<note>
      		<para>The "virtual" first / last elements mechanism may facilitate interoperability with certain instances 
      			of DOM Ranges, whereby non-existing elements are used to span across textual content without relying on 
      			character offsets at the start/end boundaries.</para>
      	</note>
      	
      	<para>For a <xref linkend="gloss-cfi-pub"/>, the leading step in the CFI <literal role="rfc2119">must</literal> start with a
      	  slash (<literal>/</literal>) followed by an even number that references the
            <markup>spine</markup> child element of the Package Document's root <markup>package</markup>
          element. The Package Document traversed by the CFI <literal role="rfc2119">must</literal> be the one specified as the
          Default Rendition in the EPUB Publication's <filename>META-INF/container.xml</filename> file
          (i.e., the Package Document referenced by the first <markup>rootfile</markup> element in
            <filename>container.xml</filename>).</para>
        <para>For an <xref linkend="gloss-cfi-intra-pub"/>, the first step <literal role="rfc2119">must</literal> start with a slash
          followed by a node number that references a position in Package Document starting from the
          root <markup>package</markup> element.</para>
      </section>
      <section xml:id="sec-path-xmlid">
        <title>XML ID Assertion (<literal>[</literal>)</title>
        <para>When an EPUB CFI references an element that contains an ID <xref linkend="refXML"/>,
          the corresponding path step <literal role="rfc2119">must</literal> include that ID in square brackets (i.e., after the slash
          (<literal>/</literal>) and even number that identifies the element).</para>
      	<para>Specification of identifiers adds robustness to the CFI scheme: a Reading System <literal role="rfc2119">may</literal>
          determine that the location referenced by the CFI is not the original intended location,
          and <literal role="rfc2119">may</literal> use the identifier to compute the set of steps that reach the desired destination
          in the content (see <xref linkend="sec-target-correction"/>). The cost of this added
          robustness is that comparison (and sorting) of CFI strings <literal role="rfc2119">may</literal> be performed only after
          logically stripping all bracketed substrings (see <xref linkend="sec-sorting"/>).</para>
      </section>
      <section xml:id="sec-path-indirection">
        <title>Step Indirection (<literal>!</literal>)</title>
      	<para>If a step, or a sequence of steps, points to an element that references another document, 
      	  the exclamation mark (<literal>!</literal>) <literal role="rfc2119">must</literal> be used whenever that
      		step is immediately followed by an expression that applies to the referenced document ("indirection").
      		The following expression is then resolved from the root element of the referenced XML document, 
      		or from the targeted XML fragment (when specified).</para>
      	<para>Only the following references are honored:</para>
        <itemizedlist>
          <listitem>
            <para>For <markup>itemref</markup> in the Package Document <markup>spine</markup>, the reference
              is defined by the <markup>href</markup> attribute of the corresponding <markup>item</markup>
              element in the <markup>manifest</markup> (i.e., that the <markup>itemref</markup>'s
                <markup>idref</markup> attribute references).</para>
          </listitem>
          <listitem>
            <para>For <xref linkend="refHTML5"/>
              <markup xlink:href="http://www.w3.org/TR/html5/Overview.html#the-iframe-element"
                  >iframes</markup> and <markup
                  xlink:href="http://www.w3.org/TR/html5/Overview.html#the-embed-element"
                  >embed</markup> elements, references are defined by the <markup>src</markup>
              attribute</para>
          </listitem>
          <listitem>
            <para>For the <xref linkend="refHTML5"/>
              <markup xlink:href="http://www.w3.org/TR/html5/Overview.html#the-object-element"
                  >object</markup> element, the reference is defined by the <markup>data</markup>
              attribute</para>
          </listitem>
          <listitem>
            <para>For <xref linkend="refSVG"/>
              <markup xlink:href="http://www.w3.org/TR/SVG11/struct.html#ImageElement"
                  >image</markup> and <markup
                  xlink:href="http://www.w3.org/TR/SVG11/struct.html#UseElement">use</markup>
              elements, references are defined by the <markup>xlink:href</markup> attribute</para>
          </listitem>
        </itemizedlist>
        <note>
          <para>This scheme does not take into account hyperlinks, only embedding references.
            Consequently, it is illegal to follow links from the <xref linkend="refHTML5"/> (or
              <xref linkend="refSVG"/>) <markup>a</markup> element.</para>
        </note>
      </section>
      <section xml:id="sec-path-terminating-char">
        <title>Character Offset (<literal>:</literal>)</title>
        <para>A path terminating with a leading colon (<literal>:</literal>) followed by an integer
          refers to a character offset. The given character offset <literal role="rfc2119">may</literal> apply to an element only
          if this element is the <xref linkend="refHTML5"/>
          <markup xlink:href="http://www.w3.org/TR/html5/Overview.html#the-img-element"
              >img</markup> element with an <markup>alt</markup> attribute containing the text to
          which the character offset applies.</para>
      	<para>For XML character data, the offset is zero-based and always refers to a position between
          characters, so <literal>0</literal> means before the first character and a number equal to
          the total UTF-16 length means after the last character. A character offset value greater
          than the UTF-16 length of the available text <literal role="rfc2119">must not</literal> be specified.</para>
        <para>A character offset <literal role="rfc2119">may</literal> follow a
            <literal>/N</literal> step. For XHTML Content Documents, <literal>N</literal> would be
          an even number when referencing the <markup>alt</markup> text of an <markup>img</markup> element,
          and <literal>N</literal> would be odd when referencing XML character data within elements.</para>
      	<para>CFI expressions that terminate with an odd numbered <literal>/N</literal> step 
      		<literal role="rfc2119">should</literal> include an explicit character offset. However, 
      		CFI processors (e.g., Reading Systems) <literal role="rfc2119">must</literal> be capable of 
      		consuming (i.e., parse + interpret / render) such CFI expressions, by assuming the implicit 
      		<literal>/N:0</literal> character offset.</para>
      </section>
      <section xml:id="sec-path-terminating-temporal">
        <title>Temporal Offset (<literal>~</literal>)</title>
        <para>A path terminating with a leading tilde (<literal>~</literal>) followed by a number
          indicates a temporal position for audio or video measured in seconds.</para>
      </section>
      <section xml:id="sec-path-terminating-spatial">
        <title>Spatial Offset (<literal>@</literal>)</title>
        <para>A path terminating with a leading at sign (<literal>@</literal>) followed by two
          colon-separated numbers indicates a 2D spatial position within an image or video. The two
          numbers represent scaled locations in the <literal>x</literal> and <literal>y</literal>
          axes, and <literal role="rfc2119">must</literal> be in the range <literal>0</literal> to <literal>100</literal> regardless
          of the image's native or display dimensions (i.e., the upper left is
            <literal>0:0</literal> and the lower right is <literal>100:100</literal>).</para>
      </section>
      <section xml:id="sec-path-terminating-tempspatial">
        <title>Temporal-Spatial Offset (<literal>~</literal> +
            <literal>@</literal>)</title>
        <para>A temporal and a spatial position <literal role="rfc2119">may</literal> be used together. In this case, the temporal
          specification <literal role="rfc2119">must</literal> precede the spatial one syntactically (e.g.,
            <literal>~23.5@5.75:97.6</literal> refers to a point 23.5 seconds into a video in the
          lower left of the frame).</para>
      </section>
      <section xml:id="sec-path-text-location">
        <title>Text Location Assertion (<literal>[</literal>)</title>
        <para>An EPUB CFI <literal role="rfc2119">may</literal> specify a substring that is expected to precede and/or follow the encountered
          point, but such assertions <literal role="rfc2119">must</literal> occur only after a <link
            linkend="sec-path-terminating-char">character offset</link>.</para>
        <para>For example, the following expression asserts that <literal>yyy</literal> is expected
          immediately before the encountered point using the <link linkend="sec-path-examples"
            >sample content below</link>:</para>
        <informalexample>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[yyy])</synopsis>
        </informalexample>
        <para>An additional substring that follows the encountered point can be given after a comma.
          For example:</para>
        <informalexample>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:3[xx,y])</synopsis>
        </informalexample>
        <para>refers to the position marked by the asterisk:</para>
        <informalexample>
          <synopsis><![CDATA[
x x x y y y 0 1 2 3 4 5 6 7 8 9
| | | * | | | | | | | | | | | |]]></synopsis>
        </informalexample>
      	<para>If there is no preceding text, or only trailing text is specified, a comma <literal role="rfc2119">must</literal>
          immediately precede the text assertion:</para>
        <informalexample>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[,y])</synopsis>
        </informalexample>
        <para>There is no restriction on the amount of the preceding and following text that can be
          included in the match. Text is taken from the document ignoring element boundaries and
          whitespace is always collapsed (i.e., a non-empty sequence of contiguous whitespace
          characters is always replaced with a single space character).</para>
        <para>A Reading System <literal role="rfc2119">may</literal> determine that the location referenced by the CFI is not the
          original intended location (due to non-matching text), and <literal role="rfc2119">may</literal> use the preceding/trailing
          text to compute the set of steps that reach the desired destination in the content (see
            <xref linkend="sec-target-correction"/>). The cost of this added robustness is that
          comparison (and sorting) of CFI strings <literal role="rfc2119">may</literal> be performed only after logically stripping
          all bracketed substrings (see <xref linkend="sec-sorting"/>).</para>
      </section>
      <section xml:id="sec-path-side-bias">
        <title>Side Bias (<literal>[</literal> + <literal>;s=</literal>)</title>
        <para>In some situations, it is important to preserve which side of a location a reference
          points to. For example, when resolving a location in a dynamically paginated environment,
          it would make a difference if a location is attached to the content before or after it
          (e.g., to determine whether to display the verso or recto side at a page break).</para>
        <para>The <literal>s</literal> parameter is used to preserve this sided-ness aspect of a
        	location. It can take two values: '<literal>b</literal>' ("before") means that the location is 
        	attached to the content that precedes (according to the XML serialization document order),
        	'<literal>a</literal>' ("after") refers to the content that follows.
        	 This parameter <literal role="rfc2119">must</literal> always be used inside square brackets at
          the end of the CFI, even if the ID <xref linkend="refXML"/> or text location assertion is
          empty.</para>
        <para>The location just after <literal>yyy</literal> in the <link
            linkend="sec-path-examples">sample content below</link> can be expressed as belonging
          with the content before it as follows:</para>
        <informalexample>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[;s=b])</synopsis>
        </informalexample>
        <para>Equally, it can be expressed including a text location assertion as:</para>
        <informalexample>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[yyy;s=b])</synopsis>
        </informalexample>
        <para>The location at the start of <markup>em</markup> element can be attached to the content
          preceding the <markup>em</markup> element as follows:</para>
        <informalexample>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2[;s=b])</synopsis>
        </informalexample>
        <para>If the side bias in the preceding example was set to <literal>a</literal> rather than
            <literal>b</literal>, the location would be attached to the child content of the
            <markup>em</markup> element, not the content following the <markup>em</markup> element.</para>
        <para>Since side bias is expressed as a parameter, it does not participate in CFI comparison
          (see <xref linkend="sec-sorting"/>).</para>
        <para>Side is not defined for locations with spatial offset.</para>
        <note>
          <para>Side bias is only meaningful when some type of break falls at the location (e.g., a
            page break or line break).</para>
        </note>
      </section>
      <section conformance="informative" xml:id="sec-path-examples">
        <title>Examples</title>
        <para>Given the following Package Document:</para>
        <informalexample>
          <synopsis><xi:include href="examples/cfi/opf-1.xml" parse="text"/></synopsis>
        </informalexample>
        <para>and the XHTML Content Document <filename>chapter01.xhtml</filename>:</para>
        <informalexample>
          <synopsis><xi:include href="examples/cfi/html-1.xml" parse="text"/></synopsis>
        </informalexample>
        <para>Then the EPUB CFI:</para>
        <informalexample>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/3:10)</synopsis>
        </informalexample>
        <para>refers to the position right after the digit <literal>9</literal> in the paragraph
          with the ID <literal>para05</literal>. When producing CFIs for text locations, unless the
          text is defined by an <markup>img</markup> element's <markup>alt</markup> tag, one <literal role="rfc2119">should</literal> always
        	start with the reference to the (possibly-empty) chunk of XML character data that corresponds to the 
          location and then trace the ancestor and reference chain to the Package Document
          root.</para>
        <para>The following examples show how EPUB CFIs can be constructed to reference additional
          content locations.</para>
        <informalexample>
          <para>Reference to the <markup>img</markup> element.</para>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/16[svgimg])</synopsis>
        </informalexample>
        <informalexample>
          <para>Reference to the location just before <literal>xxx</literal>.</para>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/1:0)</synopsis>
        </informalexample>
        <informalexample>
          <para>Reference to the location just before <literal>yyy</literal>.</para>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:0)</synopsis>
        </informalexample>
        <informalexample>
          <para>Reference to the location just after <literal>yyy</literal>.</para>
          <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3)</synopsis>
        </informalexample>
      </section>
    </section>
    <section xml:id="sec-sorting">
      <title>Sorting Rules</title>
      <para>In order to sort or compute relative locations of multiple EPUB CFIs referencing the
        same EPUB Publication, the following rules <literal role="rfc2119">must</literal> be applied:</para>
      <orderedlist>
        <listitem>
          <para> The EPUB CFI scheme data <literal role="rfc2119">must</literal> be in unescaped form, as per the rules described in
              <xref linkend="sec-epubcfi-escaping"/>.</para>
        </listitem>
        <listitem>
          <para>all bracketed assertions are removed (ignored) entirely;</para>
        </listitem>
        <listitem>
          <para>steps that come earlier in the sequence are more important;</para>
        </listitem>
        <listitem>
          <para>XML elements, references to chunks of XML character data, character offsets 
          	and temporal positions are sorted in natural order;</para>
        </listitem>
        <listitem>
          <para>the <literal>y</literal> position is more important than
            <literal>x</literal>;</para>
        </listitem>
        <listitem>
          <para>omitted spatial position precedes all other spatial positions;</para>
        </listitem>
        <listitem>
          <para>omitted temporal position precedes all other temporal positions;</para>
        </listitem>
        <listitem>
          <para>temporal position is more important than spatial;</para>
        </listitem>
        <listitem>
          <para>different step types come in the following order from least important to most
            important: character offset (<literal>:</literal>), child (<literal>/</literal>),
            temporal-spatial (<literal>~</literal> or <literal>@</literal>), reference/indirect
              (<literal>!</literal>).</para>
        </listitem>
      </orderedlist>
    </section>
    <section xml:id="sec-intra-cfis">
      <title>Intra-Publication CFIs</title>
      <para>An EPUB CFI can be used to reference content inside the container. This kind of
        referencing can be achieved by specifying a reference to the Package Document followed by a
        CFI, which <literal role="rfc2119">must</literal> be resolved starting from the root <markup>package</markup> element.</para>
      <para>For example, using the Package Document in the <link linkend="sec-path-examples"
          >previous example</link>, a reference to the last location in
          <filename>chapter01.xhtml</filename> might be written as follows:</para>
      <informalexample>
        <synopsis><![CDATA[<a href="../pub.opf#epubcfi(/6/4[chap01ref]!/4[body01]/10[para05]/2/1:3[;s=b])">location</a>]]></synopsis>
      </informalexample>
    </section>
    <section xml:id="sec-ranges">
      <title>Simple Ranges</title>
      <para>EPUB CFIs allow the expression of simple ranges extending from a start location to an
        end location. A range <literal role="rfc2119">must</literal> be expressed as a triple of <emphasis>parent</emphasis> path
          (<literal>P</literal>), <emphasis>start</emphasis> subpath (<literal>S</literal>) and
          <emphasis>end</emphasis> subpath (<literal>E</literal>), or of the form:</para>
      <informalexample>
        <synopsis>epubcfi(P,S,E)</synopsis>
      </informalexample>
       <para>The parent path <literal role="rfc2119">must</literal> not be empty, and <literal role="rfc2119">must</literal>
        end at a step that is common for resolving both the path of the
        start and end locations of the range, and each start and end subpath <literal role="rfc2119">must</literal> resolve to a
        location in non-decreasing order in the document.</para>
    	<para>To determine the start and end locations of the range, the start and end subpaths <literal role="rfc2119">must</literal>
        be concatenated to the parent path to create the start location path (<literal>PS</literal>)
        and end location path (<literal>PE</literal>). The parent path <literal role="rfc2119">should</literal>
        include the deepest possible common path leading to both the start and end path (in other words, 
        the start and end location <literal role="rfc2119">should not</literal> contain a common path). 
        The start location <literal role="rfc2119">may</literal> be empty, to avoid repetition of a common path 
        in cases where the end location is situated within the subtree rooted at the start location.</para>
      <para>Using the <link linkend="sec-path-examples">sample documents above</link>, the following
        range would represents the text from the second <literal>y</literal> in
          <literal>yyy</literal> up to (and including) digit <literal>3</literal>:</para>
      <informalexample>
        <synopsis>epubcfi(/6/4[chap01ref]!/4[body01]/10[para05],/2/1:1,/3:4)</synopsis>
      </informalexample>
      <para>Ranges <literal role="rfc2119">must</literal> be compared according to their <literal>PS</literal>, then
      	<literal>PE</literal>, components. The start and end locations <literal role="rfc2119">should</literal> reference 
      	points in the document that have the same "nature", that is to say elements and character offsets (document structure),
      	temporal offsets (timed media), spatial offsets (visual media), or the combined temporal-spatial offsets. In the case 
      	of temporal offsets, the start and end locations <literal role="rfc2119">should</literal> reference the same timed media. 
      	In the case of spatial offsets, the start and end locations <literal role="rfc2119">should</literal> reference the same 
      	visual media. This specification does not define expected behaviors, such as how the combination of two spatial offsets 
      	(i.e., start and end locations within a visual media) is to be interpreted by processing agents, including production 
      	tools and reading systems.</para>
      <para>It is not valid to use a path to an element as a shorthand for the range from the
        beginning to the end of the element. Single path notation always denotes a location point,
        and range is represented by the notation described above. There is no special step to
        produce a reference to the end of an element, as that would make sorting impossible without
        consulting the content of the document.</para>
      <para>If range is used where single location is expected by the context, the start location
        <literal role="rfc2119">must</literal> be used.</para>
      <para>Side-bias parameters <literal role="rfc2119">must not</literal> be used for ranges; the start of a range is implicitly
        attached to the content after the start location and the end is implicitly attached to the
        content before the end location.</para>
    </section>
    <section xml:id="sec-target-correction">
      <title>Intended Target Location Correction</title>
      <para>As an EPUB Publication may be updated, corrected or otherwise altered over time, it is
        useful to be able to derive an EPUB CFI for the modified document from one that targeted a
        previous version. This specification provides two mechanisms to detect and adapt to content
        changes that impact CFIs: IDs <xref linkend="refXML"/> and <link
          linkend="sec-path-text-location">text location assertions</link>.</para>
      <para>When a Reading System is processing a CFI, it <literal role="rfc2119">should</literal> check the correctness of any
      	encountered assertions. For example, given the path <literal>/6/4[chap01ref]!…</literal>,
        the Reading System <literal role="rfc2119">should</literal> verify that the element has the ID matching
          <literal>chap01ref</literal> when processing element <literal>4</literal> (for this
        example, an <markup>itemref</markup> in the <markup>spine</markup>). If not, the Reading System
        <literal role="rfc2119">should</literal> locate the ID <literal>chap01ref</literal> within the document and correct the CFI
        (e.g., if a new <markup>itemref</markup> was inserted before the <literal>chap01ref</literal>
        <markup>itemref</markup>, the desired element number would now be <literal>6</literal> and the
      	corrected CFI would be <literal>/6/6[chap01ref]!…</literal>). Likewise, text location
        assertions <literal role="rfc2119">should</literal> be used to check referenced target locations, and used to derive a
        corrected CFI that targets the desired text location.</para>
      <para>If one of the assertions fails during processing, and a corrected CFI can not be derived
        (the ID is not found in the document, or text matches could not be found), the CFI <literal role="rfc2119">must</literal> be
        considered an invalid reference. In cases where a Reading System cannot check for
        correctness (e.g., document-resident XML IDs are not available at CFI processing time), a
        Reading System <literal role="rfc2119">must</literal> ignore the CFI assertions.</para>
      <para>This notion of correcting CFIs can lead to circumstances where two different CFIs point
        to the same location (i.e., the "stale" CFI, pre-correction, and the corrected CFI). The
        corrected CFI <literal role="rfc2119">should</literal> be used where possible. A Reading System and any surrounding content
        management system <literal role="rfc2119">should</literal> attempt to replace stale CFIs with their corrected versions where
        possible.</para>
      <note>
        <para>This specification encourages the development of custom functions to assist with CFI
          correction where the intrinsic functionality is insufficient. Refer to <xref
            linkend="sec-extensions"/> for more information on how to develop such
          functionality.</para>
      </note>
    </section>
  </chapter>
  <chapter xml:id="sec-extensions">
    <title>Extending EPUB CFIs</title>
    <para>The provision for extensions (CSV parameter lists, prefixed by a parameter name, and
      separated by semicolons) allow Reading Systems to apply new or experimental heuristics to
      assist, for example, in migrating EPUB CFI fragments to updated documents.</para>
    <para>It is <literal role="rfc2119">recommended</literal> that any vendor-specific parameter names start with
        <literal>vnd.</literal> followed by the vendor name.</para>
    <para>Implementations <literal role="rfc2119">must</literal> ignore all parameters that they do not understand or cannot
      parse.</para>
  </chapter>
  <xi:include href="./share/references.xml"/>
  <appendix xml:id="DUMMY_REMOVE">
    <!-- a dummy that is removed by the build -->
    <title>THIS SECTION SHOULD NOT BE IN THE BUILD</title>
    <para xml:id="confreq-spine-itemtypes"/>
    <para xml:id="sec-fallback-processing-flow"/>
    <para xml:id="sec-link-elem"/>
    <para xml:id="sec-manifest-elem"/>
    <para xml:id="sec-opf-metadata-identifiers-pid"/>
    <para xml:id="sec-package-documents"/>
    <para xml:id="sec-publication-resources"/>
    <para xml:id="sec-resource-locations"/>
    <para xml:id="sec-spine-elem"/>
    <para xml:id="sec-css"/>
    <para xml:id="sec-contentdocs"/>
    <para xml:id="physical-container-zip"/>
    <para xml:id="sec-xhtml"/>
    <para xml:id="sec-svg"/>
    <para xml:id="sec-xhtml-nav-content-conf"/>
    <para xml:id="sec-xhtml-nav"/>
    <para xml:id="sec-scripted-content"/>
  </appendix>
</book>

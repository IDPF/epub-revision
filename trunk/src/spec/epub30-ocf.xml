<?xml version="1.0" encoding="UTF-8"?>
<?oxygen RNGSchema="../../util/docbook/schema/docbookspec.rng" type="xml"?>
<?oxygen SCHSchema="../../util/docbook/schema/docbookspec.sch"?>
<?oxygen SCHSchema="../../util/docbook/schema/docbook.sch"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:epub="http://www.idpf.org/2011/epub"
    xmlns:xi="http://www.w3.org/2001/XInclude" version="5.1b2">

    <title>EPUB Open Container Format (OCF) 3.0</title>

    <info>
        <releaseinfo>Editors Draft</releaseinfo>
        <pubdate>16 December 2010</pubdate>
        <printhistory>
            <formalpara>
                <title>This version</title>
                <para><link xlink:href="www.idpf.org/specs/TODO"/></para>
            </formalpara>
            <formalpara>
                <title>Previous version</title>
                <para><link xlink:href="www.idpf.org/specs/TODO"/></para>
            </formalpara>
            <formalpara>
                <title>Diffs to previous version</title>
                <para><link xlink:href="www.idpf.org/specs/TODO"/></para>
            </formalpara>
        </printhistory>
        <copyright>
            <year>2010</year>
            <year>2011</year>
            <holder>International Digital Publishing Forum™</holder>
        </copyright>
        <legalnotice>
            <para>All rights reserved. This work is protected under Title 17 of the United States
                Code. Reproduction and dissemination of this work with changes is prohibited except
                with the written permission of the International Digital Publishing Forum.</para>
        </legalnotice>
        <authorgroup>
            <editor>
                <personname>James Pritchett</personname>
                <affiliation>
                    <org>
                        <orgname>Recording for the Blind &amp; Dyslexic</orgname>
                    </org>
                </affiliation>
            </editor>
            <editor>
                <personname>Garth Conboy</personname>
                <affiliation>
                    <org>
                        <orgname>eBook Technologies</orgname>
                    </org>
                </affiliation>
            </editor>
            <editor>
                <personname>Markus Gylling</personname>
                <affiliation>
                    <org>
                        <orgname>DAISY Consortium</orgname>
                    </org>
                </affiliation>
            </editor>
            <editor>
                <personname>William McCoy</personname>
                <affiliation>
                    <org>
                        <orgname>WebPaper, inc.</orgname>
                    </org>
                </affiliation>
            </editor>            
        </authorgroup>
        <abstract>
            <title>Abstract</title>
            <para>
                <remark role="todo">TODO</remark>
            </para>
        </abstract>
    </info>

    <chapter xml:id="sec-overview">
        <title>Overview</title>
        <para>This specification, the EPUB Open Container Format (<link linkend="gloss-ocf"
                >OCF</link>), defines a file format and processing model for encapsulating a
            set of related resources into a single-file (ZIP) or logical (file system)
            container</para>
        <para>This document is meant to be read and understood in concert with the other
            documents that make up EPUB3. The EPUB3 Overview <xref linkend="refEPUB3Overview"/>,
            which provides an informative overview of EPUB and a roadmap to the rest of the
            EPUB3 documents, should be read first.</para>
        <section xml:id="sec-overview-purpose-and-scope">
            <title>Purpose and Scope</title>
            <para>This specification defines the Open Container Format (OCF). OCF is a
                general-purpose container technology. This specification describes the
                general-purpose container technology in the context of encapsulating EPUB
                publications and OPTIONAL alternate renditions thereof. It is however anticipated
                that the general-purpose container technology described herein may ultimately be
                used in other bundling applications.</para>
            <para>OCF collects a related set of files into a predictable, machine-readable structure
                which can be encapsulated in a single file. OCF can be used to collect files in
                various document formats and for classes of applications. The standardized container
                structure enables easy transport of, management of, and random access to, the
                collection.</para>
            <para>OCF defines the rules for structuring the file collection in the abstract: the
                “abstract container”. It also defines the rules for the representation of
                this abstract container within a ZIP archive (the "physical container"). The rules for
                ZIP physical containers build upon and are backward compatible with the ZIP
                technologies used by <link linkend="refODF">Open Document Format
                (ODF)</link>.  OCF also defines a standard method for obfuscating embedded fonts for those EPUB publications that require this functionality.</para>
            <para>OCF is the REQUIRED container technology for EPUB publications. OCF MAY play a
                role in the following workflows:</para>
            <itemizedlist>
                <listitem>
                    <para>During the preparation steps in producing an electronic publication, OCF
                        MAY be used as the container format when exchanging in-progress publications
                        between different individuals and/or different organizations.</para>
                </listitem>
                <listitem>
                    <para>When providing an electronic publication from publisher or conversion
                        house (Content Provider) to the distribution or sales channel, OCF is the
                        RECOMMENDED container format to be used as the transport format.</para>
                </listitem>
                <listitem>
                    <para>When delivering the final publication to an EPUB Reading System or
                        end-user, OCF is the REQUIRED format for the container that holds all of the
                        assets that make up the publication.</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="sec-overview-terminology">
            <title>Terminology</title>
            <remark role="todo">Rethink/revise after the rest of the rewrites are done.</remark>
            <glosslist>
                <glossentry xml:id="gloss-ascii">
                    <glossterm>ASCII</glossterm>
                    <glossdef>
                        <para>American Standard Code for Information Interchange – a 7-bit character
                            encoding based on the English alphabet (ANSI X3.4-1986). When used in
                            this document, ASCII refers to the printable graphic characters in the
                            range 33 (decimal) through 126 (decimal) and the nonprintable space
                            character 32 (decimal).</para>
                    </glossdef></glossentry>
                <glossentry xml:id="gloss-content-provider">
                    <glossterm>Content Provider</glossterm>
                    <glossdef>
                        <para>A publisher, author, individual, or other information source that
                            provides a publication to distribution or sales channels or directly to
                            one or more EPUB Reading Systems using OCF as described in this
                            specification.</para>
                    </glossdef></glossentry>
                <glossentry xml:id="gloss-epub">
                    <glossterm>EPUB</glossterm>
                    <glossdef>
                        <para>The publication format as defined by the OCF 3.0, <link
                                xlink:href="EPUB_Publications30.xml">OPF 3.0</link> and <link
                                xlink:href="EPUB_ContentDocs30.xml">OPS 3.0</link>
                            specifications.</para>
                    </glossdef></glossentry>
                <glossentry xml:id="gloss-epub-publication">
                    <glossterm>EPUB Publication</glossterm>
                    <glossdef>
                        <para>A collection of OPS Documents, an OPF Package file, and other files,
                            typically in a variety of media types, including structured text and
                            graphics, packaged in an OCF container that constitute a cohesive unit
                            for publication, as defined by the EPUB standards.</para>
                    </glossdef></glossentry>
                <glossentry xml:id="gloss-reading-system">
                    <glossterm>EPUB Reading System (or Reading System)</glossterm>
                    <glossdef>
                        <para>A combination of hardware and/or software that accepts EPUB
                            Publications and makes them available to consumers of the content. Great
                            variety is possible in the architecture of Reading Systems. A Reading
                            System MAY be implemented entirely on one device, or it MAY be split
                            among several computers. In particular, a reading device that is a
                            component of a Reading System need not directly accept OCF-Packaged EPUB
                            Publications, but all Reading Systems MUST do so. Reading Systems MAY
                            include additional processing functions, such as compression, indexing,
                            encryption, rights management, and distribution.</para>
                    </glossdef></glossentry>
                <!--
                    RFC
                    Literally “Request For Comments”, but more generally a document published by the Internet Engineering Task Force (IETF). See http://www.ietf.org/rfc.html.
                -->
                <glossentry xml:id="gloss-rootfile">
                    <glossterm>Rootfile</glossterm>
                    <glossdef>
                        <para>The top-level file of a rendition of a publication; either the “root”
                            from which all other components can be found or the lone file
                            encapsulating the rendition. The EPUB rootfile is the OPF Package file.
                            A PDF file containing the PDF rendition could also be a rootfile.</para>
                    </glossdef></glossentry>
                <glossentry xml:id="gloss-ocf">
                    <glossterm>OCF</glossterm>
                    <glossdef>
                        <para>The Open Container Format defined by this specification.</para>
                    </glossdef></glossentry>
                <glossentry xml:id="gloss-opf-package">
                    <glossterm>OPF Package</glossterm>
                    <glossdef>
                        <para>An XML document that describes the contents of an EPUB Publication
                            providing metadata, manifest, reading-order and navigation information
                            for the publication.</para>
                    </glossdef></glossentry>
                <glossentry xml:id="gloss-ops-document">
                    <glossterm>OPS Document</glossterm>
                    <glossdef>
                        <para>An XML document that conforms to <link
                                xlink:href="EPUB_ContentDocs30.xml">the OPS 3.0
                            specification</link>, containing the textual content of an EPUB
                            Publication.</para>
                    </glossdef></glossentry>
            </glosslist>
        </section>
        <section xml:id="sec-overview-conformance">
            <title>Conformance</title>
            <xi:include href="./share/conformancestatements.xml"/>
            <section xml:id="sec-overview-conforming-containers">
                <title>Conforming Containers</title>
                <para>The term “Conforming OCF Abstract Container” indicates an OCF Abstract
                    Container (see <xref linkend="sec-ocf-overview-abstract-vs-physical"/>) that
                    conforms to all of the relevant conformance criteria defined in this
                    specification. The term “Conforming OCF ZIP Container” indicates a ZIP archive
                    that conforms to the relevant ZIP container conformance criteria (see <xref
                        linkend="physical-container-zip"/>) and whose contents is a Conforming OCF
                    Abstract Container.</para>
                <para>
                    <remark role="todo">JP:  This appears to duplicate the document requirements of the OPF and OPS specs.  Can this be removed?</remark>In addition to other conformance criteria defined in this specification, all
                    XML files in a Conforming OCF Abstract Container MUST meet the following
                    conditions:</para>
                <itemizedlist>
                    <listitem>
                        <para>All XML files MUST be well-formed XML Documents as defined by <xref
                                linkend="refXML"/></para>
                    </listitem>
                    <listitem>
                        <para>All XML files MUST be compatible with the XML 1.0
                            specification (http://www.w3.org/TR/2006/REC-xml-20060816/) and the
                            Namespaces in XML specification
                            (http://www.w3.org/TR/2006/REC-xml-names-20060816/)</para>
                    </listitem>
                    <listitem>
                        <para>All XML files MUST be encoded in UTF-8 or UTF-16 as defined by <xref
                                linkend="refUnicode5"/></para>
                    </listitem>
                    <listitem>
                        <para>All XML files MUST conform to the relevant XML specification for the
                            MIME type specified for the file</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="sec-overview-conforming-reading-systems">
                <title>Conforming Processors</title>
                <para>
                    <remark role="todo">JP:  This needs review and revision to align with conformance statements in other specs.</remark>
                </para>
                <para>The term “Conforming EPUB Reading System” indicates a Reading System that
                    supports all of the mandatory features defined by this specification and the OPF
                    and OPS specifications.</para>
                <para>An EPUB Reading System that does not support all of the features defined in
                    this specification and the OPF and OPS specifications MUST NOT claim to be a
                    Conforming EPUB Reading System and SHOULD provide readily available
                    documentation of the subset of features it supports.</para>
                <para>An EPUB Reading System SHOULD provide readily available documentation of the
                    accessibility features it supports. This documentation SHOULD conform to the
                    relevant version of the W3C's Web Content Accessibility Guidelines.</para>
            </section>
        </section>
    </chapter>
    <chapter xml:id="sec-ocf-overview">
        <title>OCF Overview</title>
        <section xml:id="sec-ocf-overview-intro">
            <title>OCF: A General Container Technology</title>
            <para>OCF is purposely designed as a general container technology that can be used by
                other file formats, not just EPUB.
                <!-- In particular, OCF is purposely designed to be
                upwardly compatible with the container technology used in ODF 1.0 such that a future
                version of ODF might use OCF.--></para>
        </section>
        <section xml:id="sec-ocf-overview-abstract-vs-physical">
            <title>OCF Abstract Container vs. OCF Physical Container</title>
            <para>An “OCF Abstract Container” defines a file system model for the contents of the
                container. The file system model uses a single common root directory for all of the
                contents of the container. All (non-remote) electronic assets for embedded
                publications are located within the directory tree headed by the container’s root
                directory, although no specific file system structure is mandated for this. The file
                system model also includes a mandatory directory named <filename>META-INF</filename>
                that is a direct child of the root directory and which is used to store the
                following special files: <itemizedlist>
                    <listitem>
                        <para>container.xml points to the file that is the point of entry for the
                            publication. This file is always present.</para>
                    </listitem>
                    <listitem>
                        <para><filename>signatures.xml</filename> contains digital signatures for
                            various assets (if used).</para>
                    </listitem>
                    <listitem>
                        <para><filename>encryption.xml</filename> contains information about the
                            encryption of various assets (if used).</para>
                    </listitem>
                    <listitem>
                        <para><filename>metadata.xml</filename> may be used to store metadata about
                            the container (optional).</para>
                    </listitem>
                    <listitem>
                        <para><filename>rights.xml</filename> may be used to store information about
                            digital rights, if necessary.</para>
                    </listitem>
                    <listitem>
                        <para><filename>manifest.xml</filename> is an optional manifest of container
                            contents, compatible with <link linkend="refODF">Open Document Format
                                (ODF)</link>.</para>
                    </listitem>
                </itemizedlist> Full details of conformance requirements for the various files in
                    <filename>META-INF</filename> are found in <xref linkend="sec-container-metainf"
                />. </para>
            <para>An “OCF Physical Container” is the physical manifestation of an abstract
                container. This specification defines how an abstract container MUST be mapped to a ZIP
                archive (<xref linkend="physical-container-zip"/>).</para>
        </section>
    </chapter>
    <chapter xml:id="sec-container">
        <title>OCF Abstract Container</title>
        <section xml:id="sec-container-file-and-dir-structure">
            <title>File and directory structure</title>
            <para>The virtual file system for the OCF Abstract Container MUST have a single common
                root directory for all of the contents of the container.</para>
            <para> The OCF Abstract Container MUST include a directory named
                    <filename>META-INF</filename> at the root level of the virtual file system.
                Requirements for the contents of this directory are described in <xref
                    linkend="sec-container-metainf"/>.</para>
            <para>The file name <filename>mimetype</filename> in the root directory is reserved for
                use by OCF ZIP Containers, as explained in <xref linkend="physical-container-zip"
                />.</para>
            <para>All other files used by the publication rendition(s) within the OCF Abstract
                Container MAY be in any location descendant from the root directory except for
                    <filename>mimetype</filename> at the root level or within the
                    <filename>META-INF</filename> directory.</para>
            <para>It is RECOMMENDED that the contents of individual publications be stored within
                dedicated directories under the root to minimize potential file name collisions in
                the event that multiple renditions are used.</para>
        </section>
        <section xml:id="sec-container-iri">
            <title>Relative IRIs for referencing other components</title>
            <para>Files
                within the OCF Abstract Container MUST reference each other via Relative IRI References
                    (<xref linkend="refRFC3987"/> and <xref linkend="refRFC3986"/>).
                For example, if a file named <filename>chapter1.html</filename> references an image
                file named <filename>image1.jpg</filename> that is located in the same directory,
                then <filename>chapter1.html</filename> might contain the following as part of its
                content:</para>
            <informalexample>
                <synopsis>
&lt;img src="image1.jpg" alt="…" /&gt;
                </synopsis>
            </informalexample>
            <para>For Relative IRI References, the Base IRI (see <xref linkend="refRFC3986"/>) is
                determined by the relevant language specifications for the given file formats. For
                example, the CSS specification defines how relative IRI references work in the
                context of CSS style sheets and property declarations. Note that some language
                specifications reference RFCs that preceded RFC3987, in which case the earlier RFC
                applies for content in that particular language.</para>
            <para>Unlike most language specifications, the Base IRIs for all files within the
                META-INF/ directory use the root folder for the Abstract Container as the default
                Base IRI. For example, if <filename>META-INF/container.xml</filename> has the
                following content:</para>
            <informalexample>
                <synopsis>
<xi:include parse="text" href="./examples/ocf/container-2.xml"/>
            </synopsis>
            </informalexample>
            <para>then the path <filename>OEBPS/Great Expectations.opf</filename> is relative to the
                root directory for the OCF Abstract Container and not relative to the
                    <filename>META-INF/</filename> directory.</para>
        </section>
        <section xml:id="sec-container-filenames">
            <title>File Names</title>
            <para>The term <literal>File Name</literal> represents the name of any type of file,
                either a directory or an ordinary file within a directory within an OCF Abstract
                Container. For a given directory within the OCF Abstract Container, the Path Name is
                a string holding all directory names in the full path concatenated together with a
                “/” (ASCII 0x2F) character separating the directory names. For a given file within
                the Abstract Container, the Path Name is the string holding all directory names
                concatenated together with a “/” character separating the directory names, followed
                by a “/” character and then the name of the file. The File Name restrictions
                described below are designed to allow directory names and file names to be used
                without modification on most commonly used operating systems. This specification
                does not specify how an OCF Processor that is unable to represent OCF conforming
                File Names would compensate for this incompatibility.</para>
            <para>The following statements apply to Conforming OCF Abstract Containers:</para>
            <itemizedlist>
                <listitem>
                    <para>File Names MUST be UTF-8 (<xref linkend="refUnicode5"/>) encoded with the
                        restrictions below</para>
                </listitem>
                <listitem>
                    <para>When represented as UTF-8, File Names MUST NOT exceed 255 bytes</para>
                </listitem>
                <listitem>
                    <para>When represented as UTF-8, the Path Name for any directory or file within
                        the Abstract Container MUST NOT exceed 65535 bytes</para>
                </listitem>
                <listitem>
                    <para>File Names MUST NOT use the following characters (Reason: these characters
                        may not be supported always across commonly used operating systems):</para>
                    <itemizedlist>
                        <listitem>
                            <para>Slash: <literal>/</literal> (ASCII 0x2F)</para>
                        </listitem>
                        <listitem>
                            <para>Double quote: <literal>"</literal> (ASCII 0x22)</para>
                        </listitem>
                        <listitem>
                            <para>Asterisk: <literal>*</literal> (ASCII 0x2A)</para>
                        </listitem>
                        <listitem>
                            <para>Period as the last character: <literal>.</literal> (ASCII
                                0x3A)</para>
                        </listitem>
                        <listitem>
                            <para>Colon: <literal>:</literal> (ASCII 0x3A)</para>
                        </listitem>
                        <listitem>
                            <para>Less than: <literal>&lt;</literal> (ASCII 0x3C)</para>
                        </listitem>
                        <listitem>
                            <para>Greater than: <literal>></literal> (ASCII 0x3E)</para>
                        </listitem>
                        <listitem>
                            <para>Question mark: <literal>?</literal> (ASCII 0x3F)</para>
                        </listitem>
                        <listitem>
                            <para>Back slash : <literal>\</literal> (ASCII 0x5C)</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>File Names are case sensitive.</para>
                </listitem>
                <listitem>
                    <para>Two File Names within the same directory MUST NOT map to the same string
                        following case normalization as described in section 3.13 of (<xref
                            linkend="refUnicode5"/>). Two File Names that differ only in case are
                        disallowed within the same directory.</para>
                </listitem>
                <listitem>
                    <para>Two File Names within the same directory MAY map to the same string
                        following accent normalization.</para>
                </listitem>
            </itemizedlist>
            <para>Note that some commercial ZIP tools do not support the full Unicode range and may
                only support the ASCII range for File Names. Content creators who want to use ZIP
                tools that have these restrictions MAY find it is best to restrict their File Names
                to the ASCII range. If the names of files can not be preserved during the unzipping
                process, it will be necessary to compensate for any name translation which took
                place when the files are referenced by URI from within the content.</para>
        </section>
        <section xml:id="sec-container-metainf">
            <title>META-INF</title>
            <para>All valid OCF Abstract Containers MUST include a directory called
                    <filename>META-INF</filename> at the root level of the container file system.
                This directory contains the files specified below that describe the contents,
                metadata, signatures, encryption, rights and other information about the contained
                publication.</para>
            <para>The semantics of the following files that MAY be present at the
                    <filename>META-INF/</filename> level are specified. All other files found at the
                    <filename>META-INF/</filename> level MUST be ignored by conformant OCF
                Processor.</para>
            <section xml:id="sec-container-metainf-container.xml">
                <title>Container – META-INF/container.xml (Required)</title>
                <para>All valid OCF Containers MUST include a file called
                        <filename>container.xml</filename> within the <filename>META-INF</filename>
                    directory at the root level of the container file system. The
                        <filename>container.xml</filename> file MUST identify the MIME type of, and
                    path to, the rootfile for the OPF/OPS version of the publication and any
                    OPTIONAL alternate renditions included within the container.</para>
                <para>The <filename>container.xml</filename> file MUST NOT be encrypted.</para>
                <para>A RELAX NG OCF schema describing the &lt;container&gt; element can be found in
                        <xref linkend="rng-ocf-schema"/>. Conforming
                        <filename>container.xml</filename> files MUST be valid according to the
                        <link linkend="rng-ocf-schema">RELAX NG OCF schema</link> with the
                        <code>&lt;container&gt;</code> element as the root element after removing
                    all elements (and child nodes of these elements) and attributes from other
                    namespaces.</para>
                <para >The <code>&lt;rootfiles&gt;</code> element must contain at
                    least one &lt;rootfile&gt; element, each of which must uniquely reference a
                    single form of of the contained publication.</para>
                <remark role="todo">TODO: consider supporting human-readable label and/or
                    machine-readable type metadata to facilitate choosing from multiple
                    alternatives</remark>
                <para role="epubconf">For EPUB Publications, there must be at least one
                    &lt;rootfile&gt; element with a media-type of
                        <literal>application/oebps-package+xml</literal>. The target of such a
                    reference (an OPF package file) must not be encrypted. </para>
                <para >A Reading System should consider the first such reference to
                    occur within the &lt;rootfiles> element to be the default rendition for the
                    contained publication.</para>
                <informalexample>
                    <para>The following example shows a sample container.xml for an EPUB Publication
                        with the root file <filename>OEBPS/My Crazy Life.opf</filename> (the OPF
                        package file):</para>
                    <synopsis>
<xi:include parse="text" href="./examples/ocf/container-3.xml"/>
                    </synopsis>
                </informalexample>
                <informalexample>
                    <para>The following example adds an alternate PDF version of the
                        publication:</para>
                    <synopsis>
<xi:include parse="text" href="./examples/ocf/container-4.xml"/>
                    </synopsis>
                </informalexample>
                <para>The <code>&lt;manifest&gt;</code> element contained within the OPF root
                    package file specifies the one and only manifest used for OPS processing; all
                    items referenced in this manifest MUST be included in the ZIP archive. Ancillary
                    manifest information contained in the ZIP archive or in the OPTIONAL
                        <filename>manifest.xml</filename> file MUST NOT be used for OPS processing
                    purposes. Any extra files in the ZIP archive (i.e., files within the ZIP archive
                    that are not listed within the package files’ <code>&lt;manifest&gt;</code>
                    element, such as META-INF files or alternate derived renditions of the
                    publication) MUST NOT be used in the processing of the OPS publication.</para>
                <para>The values of the <code>full-path</code> attributes MUST contain a
                        <literal>path component</literal> (as defined by <xref linkend="refRFC3986"
                    />) which MUST only take the form of a <literal>path-rootless</literal> (as
                    defined by RFC3986). The path components are relative to the root of the
                    container in which they are used.</para>
                <para>Conforming OCF Processors MUST ignore unrecognized elements (and their
                    contents) and unrecognized attributes within a
                        <filename>container.xml</filename> file, including unrecognized elements and
                    unrecognized attributes from other namespaces.</para>
            </section>
            <section xml:id="sec-container-metainf-signatures.xml">
                <title>Digital Signatures – META-INF/signatures.xml (Optional)</title>
                <para>An OPTIONAL <filename>signatures.xml</filename> file within the
                        <filename>META-INF</filename> directory at the root level of the container
                    file system holds digital signatures of the container and its contents. This
                    file is an XML document whose root element is <code>&lt;signatures&gt;</code>.
                    The <code>&lt;signatures&gt;</code> element contains child elements of type
                        <code>&lt;Signature&gt;</code> as defined by <xref linkend="refXMLDSIGCORE"
                    />. Signatures can be applied to the publication and any alternate renditions as
                    a whole or to parts of the publication and renditions. XML Signature can specify
                    the signing of any kind of data, not just XML.</para>
                <para>The signatures.xml file MUST NOT be encrypted.</para>
                <para>When the <filename>signatures.xml</filename> file is not present, the OCF
                    container provides no information indicating any part of the container is
                    digitally signed at the container level. It is however possible that digital
                    signing exists within any optional alternate contained renditions.</para>
                <para>A RELAX NG OCF schema describing the <code>&lt;signatures&gt;</code> element
                    can be found in the <xref linkend="rng-ocf-schema"/>. Conforming
                        <filename>signatures.xml</filename> files MUST be valid according to this
                    schema with the <code>&lt;signatures&gt;</code> element as the root element
                    after removing all elements (and child nodes of these elements) and attributes
                    from other namespaces.</para>
                <para>When an OCF agent creates a signature of data in a container, it SHOULD add
                    the new signature as the last child <code>&lt;Signature&gt;</code> element of
                    the <code>&lt;signatures&gt;</code> element in the
                        <filename>signatures.xml</filename> file.</para>
                <para>Each <code>&lt;Signature&gt;</code> in the signatures.xml file identifies by
                    IRI the data to which the signature applies, using the XML Signature
                        <code>&lt;Manifest&gt;</code> element and its <code>&lt;Reference&gt;</code>
                    sub-elements. Individual contained files MAY be signed separately or together.
                    Separately signing each file creates a digest value for the resource that can be
                    validated independently. This approach MAY make a Signature element larger. If
                    files are signed together, the set of signed files can be listed in a single XML
                    Signature <code>&lt;Manifest&gt;</code> element and referenced by one or more
                        <code>&lt;Signature&gt;</code> elements.</para>
                <para>Any or all files in the container can be signed in their entirety with the
                    exception of the signatures.xml file since that file will contain the computed
                    signature information. Whether and how the signatures.xml file SHOULD be signed
                    depends on the objective of the signer.</para>
                <para>If the signer wants to allow signatures to be added or removed from the
                    container without invalidating the signer’s signature, the signatures.xml file
                    SHOULD NOT be signed.</para>
                <para>If the signer wants any addition or removal of a signature to invalidate the
                    signer’s signature, the Enveloped Signature transform (defined in <link
                        xlink:href="http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-EnvelopedSignature"
                        >Section 6.6.4</link> of <xref linkend="refXMLDSIGCORE"/>) can be used to
                    sign the entire preexisting signature file excluding the
                        <code>&lt;Signature&gt;</code> being created. This transform would sign all
                    previous signatures, and it would become invalid if a subsequent signature was
                    added to the package.</para>
                <para>If the signer wants the removal of an existing signature to invalidate the
                    signer’s signature but also wants to allow the addition of signatures, an XPath
                    transform can be used to sign just the existing signatures. (This is only a
                    suggestion. The particular XPath transform is not a part of OCF
                    specification.)</para>
                <para>XML-Signature does not associate any semantics with a signature, however an
                    agent MAY include semantic information, for example, by adding information to
                    the Signature element that describes the signature. XML Signature describes how
                    additional information can be added to a signature (for example, by using the
                        <code>&lt;SignatureProperties&gt;</code> element).</para>
                <informalexample>
                    <para>The following XML expression shows the content of an example
                            <filename>signatures.xml</filename> file, and is based on the examples
                        found in <link
                            xlink:href="http://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-Overview"
                            >Section 2</link> of <xref linkend="refXMLDSIGCORE"/>. It contains one
                        signature, and the signature applies to two resources,
                            <filename>OEBFPS/book.html</filename> and
                            <filename>OEBFPS/images/cover.jpeg</filename>, in the container.</para>
                    <synopsis>
<xi:include parse="text" href="./examples/ocf/signatures-2.xml"/>
                    </synopsis>
                </informalexample>
            </section>
            <section xml:id="sec-container-metainf-encryption.xml">
                <title>Encryption – META-INF/encryption.xml (Optional)</title>
                <para>An OPTIONAL “encryption.xml” file within the “META-INF” directory at the root
                    level of the container file system holds all encryption information on the
                    contents of the container. This file is an XML document whose root element is
                        <code>&lt;encryption&gt;</code>. The <code>&lt;encryption&gt;</code> element
                    contains child elements of type <code>&lt;EncryptedKey&gt;</code> and
                        <code>&lt;EncryptedData&gt;</code> as defined by <xref
                        linkend="refXMLENCCORE"/>. Each <code>&lt;EncryptedData&gt;</code> element
                    describes how one or more container files are encrypted. Consequently, if any
                    resource within the container is encrypted, “encryption.xml” MUST be present to
                    indicate that the resource is encrypted and provide information on how it is
                    encrypted.</para>
                <para>An <code>&lt;EncryptedKey&gt;</code> element describes each encryption key
                    used in the container, while an <code>&lt;EncryptedData&gt;</code> element
                    describes each encrypted file. Each <code>&lt;EncryptedData&gt;</code> element
                    refers to an <code>&lt;EncryptedKey&gt;</code> element, as described in XML
                    Encryption.</para>
                <para>A RELAX NG OCF schema describing the <code>&lt;encryption&gt;</code> element
                    of encryption.xml can be found in <xref linkend="rng-ocf-schema"/>. Conforming
                        <filename>encryption.xml</filename> files MUST be valid according to this
                    schema with the <code>&lt;encryption&gt;</code> element as the root element
                    after removing all elements (and child nodes of these elements) and attributes
                    from other namespaces.</para>
                <para>When the encryption.xml file is not present, the OCF Abstract Container
                    provides no information indicating any part of the container is
                    encrypted.</para>
                <para>OCF encrypts individual files independently, trading off some security for
                    improved performance, allowing the container contents to be incrementally
                    decrypted. Encryption in this way still exposes the directory structure and file
                    naming of the whole package.</para>
                <para>OCF uses XML Encryption (<xref linkend="refXMLENCCORE"/>) to provide a
                    framework for encryption, allowing a variety of algo­rithms to be used. XML
                    Encryption specifies a process for encrypting arbitrary data and representing
                    the result in XML. Even though an OCF Abstract Container MAY contain non-XML
                    data, XML Encryption can be used to encrypt all data in an OCF Abstract
                    Container. OCF encryption sup­ports only encryption of whole files. The
                    encryption.xml file, if present, MUST NOT be encrypted.</para>
                <para>Encrypted data replaces unencrypted data in an OCF Abstract Container. For
                    example, if an image named “photo.jpeg” is encrypted, the contents of the
                    photo.jpeg resource SHOULD be replaced by its encrypted contents. When stored in
                    a ZIP container, streams of data MUST be compressed before they are encrypted;
                    Deflate compression MUST be used. Within the ZIP directory, encrypted files
                    SHOULD be stored rather than Deflate-compressed.</para>
                <para>
                    It MAY be desired to obfuscate the storage of embedded fonts referenced by an
                    EPUB Publication to tie them to the “parent” publication and make them more
                    difficult to extract for unrestricted use. In these cases,
                        <filename>encryption.xml</filename> SHOULD be used to provide requisite font
                    decoding information according to <xref linkend="font-obfuscation"/>.</para>
                <para>The following files MUST never be encrypted (regardless of whether default or
                    specific encryption is requested):</para>
                <simplelist>
                    <member><filename>mimetype</filename></member>
                    <member><filename>META-INF/container.xml</filename></member>
                    <member><filename>META-INF/manifest.xml</filename></member>
                    <member><filename>META-INF/metadata.xml</filename></member>
                    <member><filename>META-INF/signatures.xml</filename></member>
                    <member><filename>META-INF/encryption.xml</filename></member>
                    <member><filename>META-INF/rights.xml</filename></member>
                    <member><filename>EPUB rootfile (the OPF Package file)</filename></member>
                </simplelist>
                <para>Signed resources MAY subsequently be encrypted by using the Decryption
                    Transform for XML Signature. This feature enables an application such as an OCF
                    agent to distinguish data that was encrypted before signing from data that was
                    encrypted after signing. Only data that was encrypted after signing MUST be
                    decrypted before computing the digest used to validate the signature.</para>
                <informalexample>
                    <para>In the following example, adapted from <link
                            xlink:href="http://www.w3.org/TR/2002/REC-xmlenc-core-20021210/#sec-eg-Symmetric-Key"
                            >Section 2.2.1 </link> of <xref linkend="refXMLENCCORE"/> the resource
                        image.jpeg is encrypted using a symmetric key algorithm (AES) and the
                        symmetric key is further encrypted using an asymmetric key algorithm (RSA)
                        with a key of John Smith.</para>
                    <synopsis>
<xi:include parse="text" href="./examples/ocf/encryption-2.xml"/>
                    </synopsis>
                </informalexample>
            </section>
            <section xml:id="sec-container-metainf-metadata.xml">
                <title>Metadata – META-INF/metadata.xml (Optional)</title>
                <para>A file with the reserved name <filename>metadata.xml</filename> within the
                        <filename>META-INF</filename> directory at the root level of the container
                    file system may appear in a valid OCF Abstract Container. This file, if present,
                    MUST be used for container-level metadata. In version 3.0 of OCF, no such
                    container-level metadata is specified. It is in this file that future innovation
                    and extension SHOULD occur.</para>
                <para>If the <filename>META-INF/metadata.xml</filename> file exists, its contents
                    MUST be valid XML with namespace-qualified elements to avoid collision with
                    future versions of OCF that MAY specify a particular grammar and namespace for
                    elements and attributes within this file.</para>
                <para>The <filename>metadata.xml</filename> file, if present, MUST NOT be
                    encrypted.</para>
            </section>
            <section xml:id="sec-container-metainf-rights.xml">
                <title>Rights Management – META-INF/rights.xml (Optional)</title>
                <para>An OPTIONAL file with the name <filename>rights.xml</filename> within the
                        <filename>META-INF</filename> directory at the root level of the container
                    file system is a reserved name in a valid OCF Abstract Container. This location
                    is reserved for digital rights management (DRM) information for trusted exchange
                    of Publications among rights holders, intermediaries, and users. In version
                    2.0.1 of OCF, there is not a REQUIRED format for DRM information, but a future
                    version of this specification MAY specify a particular format for DRM
                    information.</para>
                <para>If the <filename>META-INF/rights.xml</filename> file exists, it MUST be a
                    well-formed XML document which uses and conforms to XML Namespaces it uses, and
                    its contents SHOULD be valid XML with namespace-qualified elements to avoid
                    collision with future versions of OCF that MAY specify a particular format this
                    file.</para>
                <para>The <filename>rights.xml</filename> file MUST NOT be encrypted.</para>
                <para>When the <filename>rights.xml</filename> file is not present, the OCF
                    container provides no information indicating any part of the container is rights
                    governed.</para>
            </section>
            <section xml:id="sec-container-metainf-manifest.xml">
                <title>Manifest – META-INF/manifest.xml (Optional)</title>
                <para>An OPTIONAL file with the reserved name <filename>manifest.xml</filename>
                    within the <filename>META-INF</filename> directory at the root level of the
                    container may appear in a valid OCF Abstract Container. If present, the content
                    of this file MUST be as defined in the <link linkend="refODFManifestSchema">ODF
                        1.0 manifest schema</link>.</para>
                <para>The <filename>manifest.xml</filename> file, if present, MUST NOT be
                    encrypted.</para>
            </section>
        </section>
    </chapter>
    <chapter xml:id="physical-container-zip">
        <title>OCF Physical Container:  The ZIP Container</title>
            <section xml:id="sec-zip-container-zipreqs">
                <title>ZIP file requirements</title>
                <para>An OCF ZIP Container supports the ZIP format as specified by the application
                    note at <xref linkend="refZIP"/>, but with the following constraints and
                    clarifications:</para>
                <itemizedlist>
                    <listitem>
                        <para>Conforming OCF ZIP Containers MUST NOT use the features in the ZIP
                            application note that allow ZIP files to be split across multiple
                            storage media. Conforming EPUB Reading Systems MUST treat any OCF files
                            that specify that the ZIP file is split across multiple storage media as
                            being in error.</para>
                    </listitem>
                    <listitem>
                        <para>Conforming OCF ZIP Containers MUST only include uncompressed files or
                            Deflate-compressed files within the ZIP archive. Conforming EPUB Reading
                            Systems MUST treat any OCF Containers that use compression techniques
                            other than Deflate as being in error. </para>
                    </listitem>
                    <listitem>
                        <para>
                            Conforming OCF ZIP Containers MAY use the ZIP64 extensions defined as "Version 1" in section V, subsection G of
                            the application note at <xref linkend="refZIP"/> and SHOULD
                            only use those extensions when the content requires them.  Conforming OCF
                            Processors MUST support the ZIP64 extensions defined as "Version 1".</para>
                    </listitem>
                    <listitem>
                        <para>Conforming OCF ZIP Containers MUST NOT use the encryption features
                            defined by the ZIP format; instead, encryption MUST be done using the
                            features described in <xref
                                linkend="sec-container-metainf-encryption.xml"/>. Conforming EPUB
                            Reading Systems MUST treat any other OCF ZIP Containers that use ZIP
                            encryption features as being in error.</para>
                    </listitem>
                    <listitem>
                        <para>It is not a requirement that Conforming OCF Processors preserve
                            information from an OCF ZIP Container through load and save operations
                            that do not map to corresponding representation within the OCF Abstract
                            Container; in particular, a Conforming OCF Processor does not have to
                            preserve CRC values, comment fields or fields that hold file system
                            information corresponding to a particular operating system (e.g.,
                                <code>External file attributes</code> and <code>Extra
                            field</code>).</para>
                    </listitem>
                    <listitem>
                        <para>Conforming OCF ZIP Containers MUST encode File System Names using
                            UTF-8 (<xref linkend="refUnicode5"/>).</para>
                    </listitem>
                </itemizedlist>
                <para>Here are some details about particular fields in the ZIP archive:</para>
                <itemizedlist>
                    <listitem>
                        <para>In the local file header table, Conforming OCF ZIP Containers MUST set
                            the <code>version needed to extract</code> fields to the values
                                <code>10</code>, <code>20</code> or <code>45</code> in order to
                            match the maximum version level needed by the given file (e.g.,
                                <code>20</code> if Deflate is needed, <code>45</code> if ZIP64 is
                            needed). Conforming OCF Processors MUST treat any other values as being
                            in error.</para>
                    </listitem>
                    <listitem>
                        <para>In the local file header table, Conforming OCF ZIP Containers MUST set
                            the <code>compression</code> method field to the values <code>0</code>
                            or <code>8</code>. Conforming OCF Processors MUST treat any other values
                            as being in error.</para>
                    </listitem>
                    <listitem>
                        <para>Conforming OCF Processors MUST treat OCF ZIP Containers with an
                                <code>Archive decryption header</code> or an <code>Archive extra
                                data record</code> as being in error.</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="sec-zip-container-mime">
                <title>OCF ZIP Container media type identification</title>
                <para>It is frequently necessary for applications to determine the media type of a
                    file. This is usually accomplished by looking at the file extension of the file.
                    This gives applications a quick way to determine the type of the file without
                    looking inside the file. OCF ZIP Container files SHOULD use an extension
                        <literal>.epub</literal> to identify to processing applications that they
                    are OCF ZIP Containers.</para>
                <para>In order to translate a file extension into a media type, typically a
                    processing agent will register the relationship between file extension and media
                    type with the operating system. Applications that are interested in OCF ZIP
                    Container files SHOULD register the media type of
                        <literal>application/epub+zip</literal> as corresponding to the file
                    extension of <filename>.epub</filename>.</para>
                <para>Unfortunately, the identification of files through the use of file extensions
                    is notoriously unreliable. As a result, it is desirable to have a more robust
                    way of identifying files independent of their file names or extensions. One
                    mechanism that has evolved for doing this is to require the placement of
                    specific information at specific file offsets. A processing agent can then check
                    a fixed location to determine if the file is an OCF ZIP Container.</para>
                <para>The method that has evolved for doing this in ZIP archives is the inclusion of
                    an uncompressed, unencrypted file called <filename>mimetype</filename> as the
                    first file in the ZIP archive. The contents of this file are the media type of
                    the file. Therefore, the first file in the OCF ZIP Container MUST be a file by
                    the ASCII name of <filename>mimetype</filename> which holds the MIME type for
                    the ZIP Container (i.e., <literal>application/epub+zip</literal> as an ASCII
                    string; no leading padding, leading white-space, or case change). The file MUST
                    be neither compressed nor encrypted and there MUST NOT be an extra field in its
                    ZIP header. If this is done, then the ZIP Container offers convenient “magic
                    number” support as described in <xref linkend="refRFC2048"/> and the following
                    will hold true:</para>
                <itemizedlist>
                    <listitem>
                        <para>The bytes <literal>PK</literal> will be at the beginning of the
                            file</para>
                    </listitem>
                    <listitem>
                        <para>The bytes <literal>mimetype</literal> will be at position
                                <code>30</code></para>
                    </listitem>
                    <listitem>
                        <para>The actual MIME type (i.e., the ASCII string
                                <literal>application/epub+zip</literal>) will begin at position
                                <code>38</code></para>
                    </listitem>
                </itemizedlist>
            </section>
    </chapter>
    <chapter xml:id="font-obfuscation">
        <title>Font obfuscation</title>
        <section xml:id="fobfus-intro">
            <title>Introduction</title>
            <para>Since an OCF Zip Container is fundamentally a ZIP file, commonly available ZIP
                tools can be used to extract any unencrypted content stream from the package. On
                some systems, the contents of the ZIP file may appear like any other native
                container (e.g. a folder). While the ability to do this is quite useful, it can pose
                a problem for an author of the publication who wishes to include a third-party font.
                Many commercial fonts allow embedding, but embedding a font implies making it an
                integral part of the publication, not providing the original font file along with
                the content. Since integrated ZIP support is so ubiquitous in modern operating
                systems, simply placing the font in the ZIP archive is insufficient to signify that
                the font is not intended to be reused in other contexts. This uncertainty can
                undermine the otherwise very useful font embedding capability that OPF/OPS provides.
            </para>
            <para>In order to discourage reuse of the font, some font vendors may allow use of
                their fonts in EPUB publications if those fonts are bound in some way to the
                publication. That is, if the font file can not be installed directly for use on an
                operating system with the built-in tools of that computing device, and it can not be
                directly used by other EPUB publications. It is beyond the scope of this document
                to provide a digital rights management or enforcement system for font files. It will
                instead propose a method of obfuscation that will require additional work on the
                part of the final OCF recipient to gain general access to any included fonts. It is
                the hope of the IDPF that this will meet the requirements of most font vendors.
                However, no claim is made in this document or by the IDPF that this constitutes
                encryption, nor does it guarantee that the font file will be secure from copyright
                infringement. The proposed mechanism will simply provide a stumbling block for those
                who are unaware of the license details of the supplied font. It will not prevent a
                determined user from gaining full access to the font. Given the original OCF
                Container, it is possible to apply the algorithms described in this document to
                extract the raw font file. Whether this satisfies the requirements of individual
                font licenses remains a question for the licensor and licensee. </para>
        </section>
        <section xml:id="fobfus-algorithm">
            <title>Obfuscation algorithm</title>
            <para>The algorithm employed to obfuscate the font file consists of modifying the first
                1040 bytes (~1KB) of the font file. In the unlikely event that the file is less than
                1040 bytes, then the entire file will be modified. The key for the algorithm must be
                a 20 byte (160 bit) <xref linkend="refSHA1"/> digest of the publication's unique identifier. Details
                on generating this key are given in the section <xref linkend="fobfus-keygen"/>. To
                obfuscate the original data, the result of performing a logical exclusive or (XOR)
                on the first byte of the raw file and the first byte of the key is stored as the
                first byte of the embedded font file. This process is repeated with the next byte of
                source and key, until all bytes in the key have been used. At this point, the
                process continues starting with the first byte of the key and 21st byte of the
                source. Once 1040 bytes have been encoded in this way (or the end of the source is
                reached), any remaining data in the source is directly copied to the destination. In
                pseudo-code, this is the algorithm: </para>
            <programlisting>
                set source to font file
                set destination to obfuscated file
                set keyData to key for font
                set outer to 0
                while outer &lt; 52 and not (source at EOF)
                    set inner to 0
                    while inner &lt; 20 and not (source at EOF)
                        read 1 byte from source     //Assumes read advances file position
                        set sourceByte to result of read
                        set keyByte to byte inner of keyData
                        set obfuscatedByte to (sourceByte XOR keyByte)
                        write obfuscatedByte to destination
                        increment inner
                    end while
                    increment outer
                end while
                if not (source at EOF) then
                    read source to EOF
                    write result of read to destination
                end if 
            </programlisting>
            <para>To get the original font data back, the process is simply reversed. That is, the
                source file becomes the obfuscated data and the destination file will contain the
                raw font data.</para>
        </section>
        <section xml:id="fobfus-keygen">
            <title>Generating the obfuscation key</title>
            <para>To tie a font to a particular EPUB publication, it is necessary to bind to a unique
                property of that publication. Such a value is required by the EPUB Publications 3.0 specification,
                as detailed in its section 4.3.2.5 "Publication Identifiers". Every compliant OPF file has a
                    <code>dc:identifier</code> element which uniquely identifies the
                publication. The OPF 3.0 specification details finding this element by examining the
                    <code>unique-identifier</code> attribute of the package file's
                    <code>package</code> element. This element provides the required
                characteristic of being unique to a publication, however it is not suitable for use
                directly as the obfuscation key (for instance, its length is not defined).</para>
            <para>In order to create a suitable key that is tied to the publication, an <xref linkend="refSHA1"/> digest
                of the unique identifier should be generated as specified by the Secure Hash
                Standard. Before generating the digest, all whitespace characters as defined by
                the XML 1.0 specification (<xref linkend="refXML"/>), section 2.3 are removed. Specifically the Unicode code
                points <code>0x20</code>, <code>0x09</code>, <code>0x0D</code> and <code>0x0A</code> will be stripped from the string before the digest
                is computed. This digest is then directly used as the key for the algorithm
                described in <xref linkend="fobfus-algorithm"/>.</para>
        </section>
        <section xml:id="fobfus-specifying">
            <title>Specifying obfuscated resources</title>
            <para>All encrypted data in an OCF Abstract Container MUST have an entry in the <filename>encryption.xml</filename> file
                accompanying the publication (see <xref
                    linkend="sec-container-metainf-encryption.xml"/>. This includes fonts obfuscated
                using the method described here. For such obfuscated fonts, in the <filename>encryption.xml</filename>
                file, the <code>EncryptionMethod</code> element child of the <code>EncryptedData</code> MUST have an <code>Algorithm</code>
                attribute with the value <code>"http://www.idpf.org/2008/embedding"</code>. The presence of this
                attribute signals the use of the algorithm described in this specification. All
                resources that have been obfuscated using this approach must be listed in the
                <code>CipherData</code> element.</para>
            <informalexample>
                <para>An example <filename>encryption.xml</filename> file might look like this:</para>
                <synopsis>
<xi:include parse="text" href="./examples/ocf/fobfus-encryption.xml"/>
                </synopsis>
            </informalexample>
            <para>To prevent trivial copying of the embedded font to other publications, the
                explicit key MUST NOT be provided in the <filename>encryption.xml</filename> file. Reading systems that
                implement this specification must derive the key from the package's unique
                identifier.</para>
        </section>
    </chapter>
    <appendix xml:id="rng-ocf-schema">
        <title>RELAX NG OCF Schema</title>
        <para><remark role="todo">TODO <link
                    xlink:href="http://code.google.com/p/epub-revision/issues/detail?id=4">Issue
                    4</link></remark></para>
        <para><remark role="todo">TODO establish and link to canonical standalone URI of
                schema</remark></para>
        <synopsis><!--
<xi:include parse="text" href="../schema/ocf30.rnc"/>-->
        </synopsis>
    </appendix>

    <appendix xml:id="example">
        <title>Example</title>
        <para>The following example demonstrates the use of this OCF format to contain a signed and
            encrypted EPUB publication with an alternate PDF rendition within a ZIP
            Container.</para>

        <example xml:id="example-files">
            <title>Ordered list of files in the ZIP Container</title>
            <synopsis>
mimetype
META-INF/container.xml
META-INF/signatures.xml
META-INF/encryption.xml
OEBPS/As You Like It.opf
OEBPS/book.html
OEBPS/images/cover.png
PDF/As You Like It.pdf
            </synopsis>
        </example>

        <example xml:id="example-mimetype">
            <title>The contents of the <filename>mimetype</filename> file</title>
            <synopsis>
application/epub+zip
            </synopsis>
        </example>

        <example xml:id="example-container">
            <title>The contents of the <filename>META-INF/container.xml</filename> file</title>
            <synopsis>
<xi:include parse="text" href="./examples/ocf/container-1.xml"/>
            </synopsis>
        </example>

        <example xml:id="example-signatures">
            <title>The contents of the <filename>META-INF/signatures.xml</filename> file</title>
            <synopsis>
<xi:include parse="text" href="./examples/ocf/signatures-1.xml"/>
            </synopsis>
        </example>

        <example xml:id="example-encryption">
            <title>The contents of the <filename>META-INF/encryption.xml</filename> file</title>
            <synopsis>
<xi:include parse="text" href="./examples/ocf/encryption-1.xml"/>
            </synopsis>
        </example>

        <example xml:id="example-opf">
            <title>The contents of the <filename>OEBPS/As You Like It.opf</filename> file</title>
            <synopsis>
<xi:include parse="text" href="./examples/ocf/opf-1.xml"/>
            </synopsis>
        </example>

        <remark role="todo">TODO add the rest of the examples from 2.0.1? They dont add any
            contextually relevant information.</remark>

    </appendix>

    <appendix xml:id="acknowledgements" role="acknowledgements" conformance="informative">
        <title>Contributors</title>
        <xi:include href="./share/contributors.xml"/>
    </appendix>
    <xi:include href="./share/references.xml"/>
 
  
</book>

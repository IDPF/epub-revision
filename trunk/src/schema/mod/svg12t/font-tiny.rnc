default namespace = "http://www.w3.org/2000/svg"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace svg = "http://www.w3.org/2005/02/svg-annotations"
namespace xlink = "http://www.w3.org/1999/xlink"

# ==============================================================
#  SVG12-RNG | Tiny Fonts
# ==============================================================
[ xml:lang = "en" ]
grammar {
  svg.GCommon.group |= font | font-face
  svg.FontAdvOrigCommon.attr &=
    [ svg:animatable = "false" svg:inheritable = "false" ]
    attribute horiz-adv-x { Number.datatype }?
  # ... font ...................................................
  [ xml:id = "font" ]
  div {
    font = element font { font.AT, font.CM }
    font.AT &=
      svg.Core.attr,
      svg.External.attr,
      svg.FontAdvOrigCommon.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute horiz-origin-x { Number.datatype }?
    font.CM =
      (svg.Desc.group | font-face | missing-glyph | glyph | hkern)*
  }
  # ... font-face ..............................................
  [ xml:id = "font-face" ]
  div {
    font-face = element font-face { font-face.AT, font-face.CM }
    font-face.AT &=
      svg.Core.attr,
      svg.External.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute font-family { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute font-style { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute font-weight { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute font-variant { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute font-stretch { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute unicode-range { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute panose-1 { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute widths { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute bbox { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute units-per-em { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute stemv { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute stemh { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute slope { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute cap-height { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute x-height { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute accent-height { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute ascent { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute descent { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute ideographic { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute alphabetic { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute mathematical { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute hanging { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute underline-position { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute underline-thickness { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute strikethrough-position { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute strikethrough-thickness { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute overline-position { Number.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute overline-thickness { Number.datatype }?
    font-face.CM = (svg.Desc.group | font-face-src)*
  }
  # ... glyph ..................................................
  [ xml:id = "glyph" ]
  div {
    glyph = element glyph { glyph.AT, glyph.CM }
    glyph.AT &=
      svg.Core.attr,
      svg.FontAdvOrigCommon.attr,
      svg.D.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute unicode { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute glyph-name { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute arabic-form { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute lang { LanguageIDs.datatype }?
    glyph.CM = (svg.Desc.group)*
  }
  # ... missing-glyph ..........................................
  [ xml:id = "missing-glyph" ]
  div {
    missing-glyph =
      element missing-glyph { missing-glyph.AT, missing-glyph.CM }
    missing-glyph.AT &=
      svg.Core.attr, svg.FontAdvOrigCommon.attr, svg.D.attr
    missing-glyph.CM = (svg.Desc.group)*
  }
  # ... hkern ..................................................
  [ xml:id = "hkern" ]
  div {
    hkern = element hkern { hkern.AT, hkern.CM }
    hkern.AT &=
      svg.Core.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute u1 { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute g1 { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute u2 { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute g2 { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute k { Number.datatype }?
    hkern.CM = (svg.Desc.group)*
  }
  # ... font-face-src ..........................................
  [ xml:id = "font-face-src" ]
  div {
    font-face-src =
      element font-face-src { font-face-src.AT, font-face-src.CM }
    font-face-src.AT &= svg.Core.attr
    font-face-src.CM = (svg.Desc.group | font-face-uri)*
  }
  # ... font-face-uri ..........................................
  [ xml:id = "font-face-uri" ]
  div {
    font-face-uri =
      element font-face-uri { font-face-uri.AT, font-face-uri.CM }
    font-face-uri.AT &=
      svg.Core.attr, svg.XLinkRequired.attr, svg.External.attr
    font-face-uri.CM = (svg.Desc.group)*
  }
}

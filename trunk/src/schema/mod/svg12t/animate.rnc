default namespace = "http://www.w3.org/2000/svg"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace svg = "http://www.w3.org/2005/02/svg-annotations"
namespace xlink = "http://www.w3.org/1999/xlink"

# ==============================================================
#  SVG12-RNG | SVG 1.2 Animate Elements
# ==============================================================
[ xml:lang = "en" ]
grammar {
  svg.GCommon.group |= svg.Animate.group
  # Reusable groups
  svg.Animate.group |=
    animate
    | set
    | animateColor
    | animateTransform
    | animateMotion
    | svg.Discard.group
  [ xml:id = "animatetiming" ]
  div {
    svg.AnimateTiming.attr &=
      svg.AnimateTimingNoMinMax.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute min { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute max { text }?
    svg.AnimateTimingNoMinMax.attr &=
      svg.AnimateTimingNoFillNoMinMax.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute fill { "remove" | "freeze" }?
    svg.AnimateTimingNoFillNoMinMax.attr &=
      svg.AnimateBegin.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute dur { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute end { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute repeatCount { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute repeatDur { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute restart { "always" | "never" | "whenNotActive" }?
    svg.AnimateBegin.attr &=
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute begin { text }?
  }
  svg.AnimateSync.attr &=
    [ svg:animatable = "false" svg:inheritable = "false" ]
    attribute syncBehavior {
      "canSlip" | "locked" | "independent" | "default"
    }?,
    [ svg:animatable = "false" svg:inheritable = "false" ]
    attribute syncTolerance { Clock-value.datatype | "default" }?,
    [ svg:animatable = "false" svg:inheritable = "false" ]
    attribute syncMaster { Boolean.datatype }?
  svg.AnimateSyncDefault.attr &=
    [ svg:animatable = "false" svg:inheritable = "false" ]
    attribute syncBehaviorDefault {
      "canSlip" | "locked" | "independent" | "inherit"
    }?,
    [ svg:animatable = "false" svg:inheritable = "false" ]
    attribute syncToleranceDefault { Clock-value.datatype | "inherit" }?
  # Common Attributes
  [ xml:id = "animatecommon" ]
  div {
    svg.AnimateCommon.attr = svg.XLink.attr, svg.Conditional.attr
  }
  [ xml:id = "animateattributecommon" ]
  div {
    svg.AnimateAttributeCommon.attr =
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute attributeName { QName.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute attributeType { "XML" | "CSS" | "auto" }?
  }
  [ xml:id = "animatevalue" ]
  div {
    svg.AnimateToCommon.attr &=
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute to { text }?
    svg.AnimateValueCommon.attr =
      svg.AnimateToCommon.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute calcMode {
        "discrete" | "linear" | "paced" | "spline"
      }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute values { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute keyTimes { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute keySplines { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute from { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute by { text }?
  }
  [ xml:id = "animateaddition" ]
  div {
    svg.AnimateAdditionCommon.attr =
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute additive { "replace" | "sum" }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute accumulate { "none" | "sum" }?
  }
  svg.AnimateTypeCommon.attr =
    [ svg:animatable = "false" svg:inheritable = "false" ]
    attribute type {
      "translate" | "scale" | "rotate" | "skewX" | "skewY"
    }?
  # Common Content Model
  animateCommon.CM = svg.Desc.group | svg.Handler.group
  # ... animate ................................................
  [ xml:id = "animate" ]
  div {
    animate = element animate { animate.AT, animateCommon.CM* }
    animate.AT &=
      svg.Core.attr,
      svg.AnimateCommon.attr,
      svg.AnimateAttributeCommon.attr,
      svg.AnimateTiming.attr,
      svg.AnimateValueCommon.attr,
      svg.AnimateAdditionCommon.attr
  }
  # ... set ....................................................
  [ xml:id = "set" ]
  div {
    set = element set { set.AT, animateCommon.CM* }
    set.AT &=
      svg.Core.attr,
      svg.AnimateCommon.attr,
      svg.AnimateAttributeCommon.attr,
      svg.AnimateTiming.attr,
      svg.AnimateToCommon.attr
  }
  # ... animateColor ...........................................
  [ xml:id = "animateColor" ]
  div {
    animateColor =
      element animateColor { animateColor.AT, animateCommon.CM* }
    animateColor.AT &=
      svg.Core.attr,
      svg.AnimateCommon.attr,
      svg.AnimateAttributeCommon.attr,
      svg.AnimateTiming.attr,
      svg.AnimateValueCommon.attr,
      svg.AnimateAdditionCommon.attr
  }
  # ... animateTransform .......................................
  [ xml:id = "animateTransform" ]
  div {
    animateTransform =
      element animateTransform {
        animateTransform.AT, animateCommon.CM*
      }
    animateTransform.AT &=
      svg.Core.attr,
      svg.AnimateCommon.attr,
      svg.AnimateAttributeCommon.attr,
      svg.AnimateTiming.attr,
      svg.AnimateValueCommon.attr,
      svg.AnimateAdditionCommon.attr,
      svg.AnimateTypeCommon.attr
  }
  # ... animateMotion ..........................................
  [ xml:id = "animateMotion" ]
  div {
    animateMotion =
      element animateMotion {
        animateMotion.AT, animateCommon.CM*, mpath?, animateCommon.CM*
      }
    animateMotion.AT &=
      svg.Core.attr,
      svg.AnimateCommon.attr,
      svg.AnimateTiming.attr,
      svg.AnimateAdditionCommon.attr,
      svg.AnimateValueCommon.attr,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute path { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute keyPoints { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute rotate { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute origin { text }?
  }
  # ... mpath ..................................................
  [ xml:id = "mpath" ]
  div {
    mpath = element mpath { mpath.AT, svg.Desc.group* }
    mpath.AT &= svg.Core.attr, svg.XLinkRequired.attr
  }
}

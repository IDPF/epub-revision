<?xml version="1.0" encoding="UTF-8"?>
<project name="epub-revision" basedir="." default="default"
	xmlns:antcontrib="antlib:net.sf.antcontrib">

	<tstamp>
		<format property="TODAY" pattern="yyyyMMdd"/>
	</tstamp>

	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.src.schema" value="${dir.src}/schema"/>
	<property name="dir.src.spec" value="${dir.src}/spec"/>
	<property name="dir.src.spec.css" value="${dir.src}/spec/css"/>
	<property name="dir.src.spec.examples" value="${dir.src}/spec/examples"/>
	<property name="dir.src.vocab" value="${dir.src}/vocab"/>
	<property name="dir.src.idx" value="${dir.src}/idx"/>
	<property name="dir.src.linking" value="${dir.src}/linking"/>
	<property name="dir.src.errata" value="${dir.src}/errata"/>

	<property name="dir.util" value="${basedir}/util"/>
	<property name="dir.util.rng" value="${dir.util}/relaxng"/>
	<property name="dir.util.rng.schemadoc" value="${dir.util.rng}/schemadoc"/>
	<property name="dir.util.docbook" value="${dir.util}/docbook"/>
	<property name="dir.util.docbook.schema" value="${dir.util.docbook}/schema"/>
	<property name="dir.util.xhtml" value="${dir.util}/xhtml"/>
	<property name="dir.util.xhtml.dtd.catalog" value="${dir.util.xhtml}/dtd"/>
	<property name="dir.util.rdf" value="${dir.util}/rdf"/>
	<property name="dir.util.linking" value="${dir.util}/linking"/>
	<property name="dir.util.java" value="${dir.util}/java"/>

	<property name="dir.test" value="${basedir}/test"/>
	<property name="dir.lib" value="${basedir}/lib"/>
	<property name="dir.build" value="${basedir}/build/"/>
	<property name="dir.build.css" value="${dir.build}/css"/>
	<property name="dir.build.epub" value="${dir.build}/301"/>
	<property name="dir.build.schema" value="${dir.build.epub}/schema"/>
	<property name="dir.build.schemadoc" value="${dir.build.epub}/schemadoc"/>
	<property name="dir.build.vocab" value="${dir.build}/vocab"/>
	<property name="dir.build.vocab.package" value="${dir.build.vocab}/package"/>
	<property name="dir.build.vocab.overlays" value="${dir.build.vocab}/overlays"/>
	<property name="dir.build.spec" value="${dir.build.epub}/spec"/>
	<property name="dir.temp" value="${basedir}/temp"/>
	<property name="dir.temp.spec" value="${dir.temp}/spec"/>
	<property name="dir.build.idx" value="${dir.build}/idx"/>
	<property name="dir.build.linking" value="${dir.build}/linking"/>
	<property name="dir.build.cfi" value="${dir.build.linking}/cfi"/>
	<property name="dir.build.switch" value="${dir.build}/switch"/>
	<property name="dir.build.altss-tags" value="${dir.build}/altss-tags"/>

	<property name="schema.epub.xhtml.rnc" value="${dir.src.schema}/epub-xhtml-30.rnc"/>
	<property name="schema.epub.xhtml.sch" value="${dir.src.schema}/epub-xhtml-30.sch"/>
	<property name="schema.epub.svg.rng" value="${dir.src.schema}/epub-svg-30.rng"/>
	<property name="schema.epub.nav.rnc" value="${dir.src.schema}/epub-nav-30.rnc"/>
	<property name="schema.epub.nav.sch" value="${dir.src.schema}/epub-nav-30.sch"/>
	<property name="schema.epub.mediaoverlay.rnc" value="${dir.src.schema}/media-overlay-30.rnc"/>
	<property name="schema.epub.mediaoverlay.sch" value="${dir.src.schema}/media-overlay-30.sch"/>
	<property name="schema.epub.package.rnc" value="${dir.src.schema}/package-30.rnc"/>
	<property name="schema.epub.package.sch" value="${dir.src.schema}/package-30.sch"/>

	<property name="schema.rng" value="${dir.util.rng}/relaxng.rng"/>
	<property name="schema.docbook" value="${dir.util.docbook.schema}/docbook.nvdl"/>
	<property name="schema.xhtml11" value="${dir.util.xhtml}/rng/xhtml.rng"/>
	<property name="schema.xhtmlrdfa11" value="${dir.util.xhtml}/rng/xhtml-rdfa11.rng"/>

	<property name="xslt.docbook2xhtml" value="${dir.util.docbook}/docbookspec.xsl"/>
	<property name="xslt.biblio-cleaner" value="${dir.util.docbook}/biblio-cleaner.xsl"/>
	<property name="xslt.terminology-cleaner" value="${dir.util.docbook}/terminology-cleaner.xsl"/>
	<property name="xslt.switch" value="${dir.util.docbook}/switch.xsl"/>
	<property name="xslt.olink" value="${dir.util.docbook}/olink.xsl"/>
	<property name="xslt.link-decorator" value="${dir.util.docbook}/link-decorator.xsl"/>
	<property name="xslt.catalog" value="${dir.util}/catalog.xsl"/>
	<property name="xslt.link-index" value="${dir.util}/linking/link-index.xsl"/>
	<property name="xslt.cleanup" value="${dir.util}/xhtml/cleanup.xsl"/>
	<property name="xslt.css.link.replacer" value="${dir.util}/xhtml/xsl/css-link-replacer.xsl"/>
	<property name="xslt.redirect" value="${dir.util}/xhtml/xsl/redirect.xsl"/>

	<property name="css.docbook2xhtml" value="${dir.src.spec.css}/epub-spec.css"/>
	<property name="css.print" value="${dir.src.spec.css}/epub-print.css"/>

	<property name="www.base.path" value="http://www.idpf.org/epub/"/>
	<property name="www.spec.path" value="http://www.idpf.org/epub/301/spec"/>

	<property name="spec.filename.prefix" value="epub30"/>

	<property name="file.exclude.list" value="**/.DS_Store,**/.localized,**/.svn"/>

	<path id="build.classpath">
		<fileset dir="${dir.lib}" includes="**/*.jar"/>
		<pathelement path="${java.class.path}"/>
		<pathelement path="${dir.util.java}"/>
	</path>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   b u i l d - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->


	<target name="default"
		depends=" clean,
		build-specs,
		build-vocabs,
		build-switch-registry,
		build-schemas,
		build-schema-catalog,		
		build-archives, 
		copy-css,
		validate-html-output"/>

	<target name="build-specs" depends="clean, copy-css, compile">

		<mkdir dir="${dir.temp.spec}/00"/>
		<copy todir="${dir.temp.spec}/00">
			<fileset dir="${dir.src.spec}"/>
		</copy>

		<!-- run the olink preprocess xslt -->
		<mkdir dir="${dir.temp.spec}/10"/>
		<saxon-xslt classpathref="build.classpath" basedir="${dir.temp.spec}/00/"
			includes="epub30-*.xml" destdir="${dir.temp.spec}/10/" extension=".xml"
			style="${xslt.olink}">
			<param name="db-spec-base-uri" expression="${dir.temp.spec}/00/"/>
			<param name="spec-group" expression="epub30"/>
		</saxon-xslt>
		<saxon-xslt classpathref="build.classpath" basedir="${dir.temp.spec}/00/"
			includes="epub-cfi.xml" destdir="${dir.temp.spec}/10/" extension=".xml"
			style="${xslt.olink}">
			<param name="db-spec-base-uri" expression="${dir.temp.spec}/00/"/>
			<param name="spec-group" expression="linking"/>
		</saxon-xslt>
		<saxon-xslt classpathref="build.classpath" basedir="${dir.temp.spec}/00/"
			includes="epub-indexes.xml" destdir="${dir.temp.spec}/10/" extension=".xml"
			style="${xslt.olink}">
			<param name="db-spec-base-uri" expression="${dir.temp.spec}/00/"/>
			<param name="spec-group" expression="indexes"/>
		</saxon-xslt>
		<!-- no olinks in altsstags but run anyway to get xincludes dereferenced -->
		<saxon-xslt classpathref="build.classpath" basedir="${dir.temp.spec}/00/"
			includes="altss-tags.xml" destdir="${dir.temp.spec}/10/" extension=".xml"
			style="${xslt.olink}">
			<param name="db-spec-base-uri" expression="${dir.temp.spec}/00/"/>
			<param name="spec-group" expression="altss-tags"/>
		</saxon-xslt>

		<!-- run the bibliocleaner preprocess xslt -->
		<mkdir dir="${dir.temp.spec}/20"/>
		<saxon-xslt description="filters out unreferenced bibliorefs" classpathref="build.classpath"
			basedir="${dir.temp.spec}/10" destdir="${dir.temp.spec}/20/" extension=".xml"
			style="${xslt.biblio-cleaner}" includes="*.xml"/>

		<!-- run the terminology preprocess class -->
		<java classname="org.idpf.docbook.GlosslistHandler" fork="true" failonerror="true"
			maxmemory="512m">
			<arg value="${dir.temp.spec}/20/"/>
			<arg value="${dir.temp.spec}/301/"/>
			<classpath refid="build.classpath"/>
		</java>

		<!-- run the switch preprocess xslt -->
		<mkdir dir="${dir.temp.spec}/40"/>
		<saxon-xslt description="conditional exclude/include" classpathref="build.classpath"
			basedir="${dir.temp.spec}/301/" destdir="${dir.temp.spec}/40/" extension=".xml"
			style="${xslt.switch}"/>

		<!-- run the link decorator xslt -->
		<mkdir dir="${dir.temp.spec}/50"/>
		<saxon-xslt description="decorate links with @role" classpathref="build.classpath"
			basedir="${dir.temp.spec}/40/" destdir="${dir.temp.spec}/50/" extension=".xml"
			style="${xslt.link-decorator}"/>

		<!-- validate docbook sources -->
		<validate-fileset-rng fileset-dir="${dir.temp.spec}/50" fileset-includes="**/*.xml"
			fileset-excludes="" schema="${schema.docbook}" failonerror="true" compaxtsyntax="false"/>

		<!-- run docbook-to-xhtml -->
		<mkdir dir="${dir.temp.spec}/60"/>
		<saxon-xslt classpathref="build.classpath" basedir="${dir.temp.spec}/50/"
			includes="**/*.xml" destdir="${dir.temp.spec}/60/" extension=".html"
			style="${xslt.docbook2xhtml}"
			excludes="**/*indexes.xml">

			<param name="section.autolabel" expression="1"/>
			<param name="part.autolabel" expression="1"/>
			<param name="chapter.autolabel" expression="1"/>
			<param name="toc.section.depth" expression="6"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<param name="html.stylesheet" expression="../../css/epub-spec.css"/>
			<param name="user.print.css" expression="../../css/epub-print.css"/>

		</saxon-xslt>
		
		<!-- hack to deal with hardcoded css locations -->
		<saxon-xslt classpathref="build.classpath" basedir="${dir.temp.spec}/50/"
			includes="**/*indexes.xml" destdir="${dir.temp.spec}/60/" extension=".html"
			style="${xslt.docbook2xhtml}">
			
			<param name="section.autolabel" expression="1"/>
			<param name="part.autolabel" expression="1"/>
			<param name="chapter.autolabel" expression="1"/>
			<param name="toc.section.depth" expression="6"/>
			<param name="section.label.includes.component.label" expression="1"/>
			<param name="section.autolabel.max.depth" expression="8"/>
			<param name="html.stylesheet" expression="../css/epub-spec.css"/>
			<param name="user.print.css" expression="../css/epub-print.css"/>
			
		</saxon-xslt>
		

		<!-- run cleanup -->
		<xslt classpathref="build.classpath" basedir="${dir.temp.spec}/60/"
			destdir="${dir.build.spec}" extension=".html" style="${xslt.cleanup}"
			useimplicitfileset="yes">
			<!-- point catalog to empty DTD file; otherwise xml:space="preserve" gets added in identity transform
				when referencing the local copy of the xhtml 1.1 dtd in the catalog below-->
			<xmlcatalog>
				<dtd publicid="-//W3C//DTD XHTML 1.1//EN"
					location="${dir.util.xhtml.dtd.catalog}/empty.dtd"/>
			</xmlcatalog>
		</xslt>

		<build-htaccess dest-dir="${dir.build.spec}"
			index-name="${spec.filename.prefix}-overview.html"/>

		<!-- move the altss-tags spec and fix the css link -->
		<mkdir dir="${dir.build.altss-tags}"/>
		<saxon-xslt in="${dir.build.spec}/altss-tags.html"
			out="${dir.build.altss-tags}/altss-tags.html" classpathref="build.classpath"
			style="${xslt.css.link.replacer}">
			<param name="css.link" expression="reduce-depth"/>
		</saxon-xslt>
		<delete file="${dir.build.spec}/altss-tags.html"/>
		<build-htaccess dest-dir="${dir.build.altss-tags}" index-name="altss-tags.html"/>

		<!-- move the indexes spec -->
		<mkdir dir="${dir.build.idx}"/>
		<move file="${dir.build.spec}/epub-indexes.html" todir="${dir.build.idx}"/>
		<build-htaccess dest-dir="${dir.build.idx}" index-name="epub-indexes.html"/>
		
		<!-- move the linking spec -->
		<mkdir dir="${dir.build.cfi}"/>
		<move file="${dir.build.spec}/epub-cfi.html" todir="${dir.build.cfi}"/>
		<build-htaccess dest-dir="${dir.build.cfi}" index-name="epub-cfi.html"/>

		<!-- create the linking registry page -->
		<copy todir="${dir.build.linking}" file="${dir.util.linking}/index.html"/>
		<build-htaccess dest-dir="${dir.build.linking}" index-name="index.html"/>

	</target>

	<target name="compile">
		<javac srcdir="${dir.util.java}" destdir="${dir.util.java}" debug="on" source="1.5">
			<classpath refid="build.classpath"/>
		</javac>
	</target>

	<target name="build-schemas" depends="clean">
		<!-- , validate-src-rng-schemas" -->
		<!-- TODO run schemas against test suite -->

		<clean-dir dir="${dir.build.schema}"/>
		<copy todir="${dir.build.schema}">
			<fileset dir="${dir.src.schema}"/>
			<!--  includes="*.rng *.rnc *.sch" -->
		</copy>
		<build-htaccess-dirlist dest-dir="${dir.build.schema}"/>
	</target>

	<target name="build-vocabs" depends="clean, copy-css, compile, build-specs">

		<!-- structure vocab -->
		<echo>building structure vocab...</echo>
		<build-xhtml-vocab in-n3="${dir.src.vocab}/structure.n3" name="structure"
			out-xhtml="${dir.build.vocab}/structure/epub30-vocab-structure.html"
			vocab-canonical-uri="http://www.idpf.org/epub/vocab/structure/" output-htu-expl="1"/>
		<build-htaccess dest-dir="${dir.build.vocab}/structure/"
			index-name="${spec.filename.prefix}-vocab-structure.html"/>

		<!-- add rdfa to publications 
		<echo>building publications vocab...</echo>
		<spec-rdfa spec="${dir.build.spec}/epub30-publications.html"
			vocab-canonical-uri="http://www.idpf.org/epub/vocab/package/" vocab-name="package"/> -->

		<!-- add rdfa to overlays 
		<echo>building overlays vocab...</echo>
		<spec-rdfa spec="${dir.build.spec}/epub30-mediaoverlays.html"
			vocab-canonical-uri="http://www.idpf.org/epub/vocab/overlays/" vocab-name="overlays"/> -->

		<!-- note: need a server Alias for these two; "http://www.idpf.org/epub/vocab/package/#switch" 
			should return "http://www.idpf.org/epub/30/spec/epub30-publications.html#switch" and so on. -->
		<mkdir dir="${dir.build.vocab}/package"/>
		<build-htaccess dest-dir="${dir.build.vocab}/package" index-name="index.html"/>
		<!-- a client redirect page that should never be reached but is added if the server Alias fails -->
		<saxon-xslt classpathref="build.classpath" in="${schema.rng}"
			out="${dir.build.vocab}/package/index.html" style="${xslt.redirect}">
			<param name="target"
				expression="${www.spec.path}/${spec.filename.prefix}-publications.html"/>
			<param name="title" expression="Package Vocabulary"/>
		</saxon-xslt>

		<mkdir dir="${dir.build.vocab}/overlays"/>
		<build-htaccess dest-dir="${dir.build.vocab}/overlays" index-name="index.html"/>
		<!-- a client redirect page that should never be reached but is added if the server Alias fails -->
		<saxon-xslt classpathref="build.classpath" in="${schema.rng}"
			out="${dir.build.vocab}/overlays/index.html" style="${xslt.redirect}">
			<param name="target"
				expression="${www.spec.path}/${spec.filename.prefix}-mediaoverlays.html"/>
			<param name="title" expression="Media Overlays Vocabulary"/>
		</saxon-xslt>
		
		<mkdir dir="${dir.build.vocab}/rendition"/>
		<build-htaccess dest-dir="${dir.build.vocab}/rendition" index-name="index.html"/>
		<!-- a client redirect page that should never be reached but is added if the server Alias fails -->
		<saxon-xslt classpathref="build.classpath" in="${schema.rng}"
			out="${dir.build.vocab}/rendition/index.html" style="${xslt.redirect}">
			<param name="target"
				expression="${www.spec.path}/${spec.filename.prefix}-publications.html"/>
			<param name="title" expression="Rendition Vocabulary"/>
		</saxon-xslt>
		
		<!-- copy the prefix files to their destinations -->
		<copy file="${dir.src.vocab}/pfx-package.html" tofile="${dir.build.vocab}/package/pfx/index.html" overwrite="yes"/>
		<build-htaccess dest-dir="${dir.build.vocab}/package/pfx" index-name="index.html"/>
		<copy file="${dir.src.vocab}/pfx-structure.html" tofile="${dir.build.vocab}/structure/pfx/index.html" overwrite="yes"/>
		<build-htaccess dest-dir="${dir.build.vocab}/structure/pfx" index-name="index.html"/>
		
		<!-- copy the vocab files to their destinations -->
		<copy file="${dir.src.vocab}/dc-types.html" tofile="${dir.build.vocab}/package/types/index.html" overwrite="yes"/>
		<build-htaccess dest-dir="${dir.build.vocab}/package/types" index-name="index.html"/>
		<copy file="${dir.src.vocab}/collection-roles.html" tofile="${dir.build.vocab}/package/roles/index.html" overwrite="yes"/>
		<build-htaccess dest-dir="${dir.build.vocab}/package/roles" index-name="index.html"/>
		<copy file="${dir.src.vocab}/rel-package.html" tofile="${dir.build.vocab}/package/link/index.html" overwrite="yes"/>
		<build-htaccess dest-dir="${dir.build.vocab}/package/link" index-name="index.html"/>
	</target>

	<macrodef name="spec-rdfa">
		<attribute name="spec"/>
		<attribute name="vocab-canonical-uri"/>
		<attribute name="vocab-name"/>
		<sequential>
			<xslt in="@{spec}" out="${dir.temp}/rdfa-temp.html"
				style="${dir.util.rdf}/spec-to-rdfa.xslt" useimplicitfileset="yes"
				classpathref="build.classpath">
				<param name="vocab-canonical-uri" expression="@{vocab-canonical-uri}"/>
				<param name="vocab-name" expression="@vocab-name"/>
				<!-- point catalog to empty DTD file; otherwise xml:space="preserve" gets added in identity transform
				when referencing the local copy of the xhtml 1.1 dtd in the catalog below-->
				<xmlcatalog>
					<dtd publicid="-//W3C//DTD XHTML 1.1//EN"
						location="${dir.util.xhtml.dtd.catalog}/empty.dtd"/>
				</xmlcatalog>
			</xslt>
			<move file="${dir.temp}/rdfa-temp.html" tofile="@{spec}" overwrite="yes"/>
		</sequential>
	</macrodef>

	<target name="build-switch-registry" depends="copy-css">
		<mkdir dir="${dir.build.switch}"/>
		<copy todir="${dir.build.switch}" file="${dir.util}/switch/switch-index.html"/>
		<build-htaccess dest-dir="${dir.build.switch}" index-name="switch-index.html"/>
	</target>

	<target name="copy-css">
		<copy file="${css.docbook2xhtml}" overwrite="true" todir="${dir.build.css}"/>
		<copy file="${css.print}" overwrite="true" todir="${dir.build.css}"/>
	</target>

	<macrodef name="build-xhtml-vocab" description="builds an xhtml+rdfa vocab from an n3 source">

		<attribute name="in-n3"/>
		<!-- full path -->
		<attribute name="name"/>
		<!-- string identifier -->
		<attribute name="out-xhtml"/>
		<!-- full path -->
		<attribute name="vocab-canonical-uri"/>
		<attribute name="output-htu-expl"/>
		<!-- 0 or 1, see rdfxml-to-rdfa.xslt -->
		<sequential>

			<clean-dir dir="${dir.temp}/vocab/"/>

			<!-- convert the n3 to RDF/XML as an xslt source -->
			<jena-n3-to-rdfxml in="@{in-n3}" out="${dir.temp}/vocab/rdfxml.xml"
				vocab-uri="@{vocab-canonical-uri}"/>

			<!-- extract the RDFa from the docbook -->
			<saxon-xslt in="${dir.temp}/vocab/rdfxml.xml" out="${dir.temp}/vocab/rdfa.xhtml"
				style="${dir.util.rdf}/rdfxml-to-rdfa.xslt">
				<param name="vocab-uri" expression="@{vocab-canonical-uri}"/>
				<param name="vocab-as-n3" expression=""/>
				<param name="vocab-as-rdfxml" expression=""/>
				<param name="vocab-revision-history" expression=""/>
				<param name="output-htu-expl" expression="@{output-htu-expl}"/>
			</saxon-xslt>

			<!-- add toc to the xhtml and place in final destination -->
			<saxon-xslt in="${dir.temp}/vocab/rdfa.xhtml" out="@{out-xhtml}"
				style="${dir.util}/xhtml/xsl/toc.xsl"> </saxon-xslt>

		</sequential>
	</macrodef>

	<macrodef name="jena-n3-to-rdfxml" description="convert N3 to RDF/XML using jena.rdfcopy">
		<attribute name="in"/>
		<attribute name="out"/>
		<attribute name="vocab-uri"/>
		<!-- the canonical uri of the vocab being converted -->
		<sequential>
			<property name="jena.intermediary" value="${dir.temp}/vocab/jena-intermediary.xml"/>
			<java output="${jena.intermediary}" classname="jena.rdfcopy" fork="true"
				failonerror="true" maxmemory="512m">
				<arg value="@{in}"/>
				<arg value="N3"/>
				<arg value="RDF/XML"/>
				<classpath refid="build.classpath"/>
			</java>
			<saxon-xslt in="${jena.intermediary}" out="@{out}"
				style="${dir.util.rdf}/jena-rdf-fix.xslt">
				<param name="vocab-uri" expression="@{vocab-uri}"/>
			</saxon-xslt>
		</sequential>
	</macrodef>

	<target name="build-archives" depends="clean, build-vocabs, build-specs, build-schemas">

		<!-- archives of and in the schema dir -->

		<zip destfile="${dir.temp}/${spec.filename.prefix}-schemas.zip"
			basedir="${dir.build.schema}/" excludes="${file.exclude.list},**/.htaccess"/>

		<tar destfile="${dir.temp}/${spec.filename.prefix}-schemas.tar"
			basedir="${dir.build.schema}/" excludes="${file.exclude.list},**/.htaccess"/>

		<gzip src="${dir.temp}/${spec.filename.prefix}-schemas.tar"
			destfile="${dir.build.schema}/${spec.filename.prefix}-schemas.tar.gz"/>

		<copy file="${dir.temp}/${spec.filename.prefix}-schemas.zip" todir="${dir.build.schema}"/>

		<!-- tutti -->

		<zip destfile="${dir.temp}/${spec.filename.prefix}-${TODAY}.zip" basedir="${dir.build}/"
			excludes="${file.exclude.list} spec/"/>

		<tar destfile="${dir.temp}/${spec.filename.prefix}-${TODAY}.tar" basedir="${dir.build}/"
			excludes="${file.exclude.list} spec/"/>

		<gzip src="${dir.temp}/${spec.filename.prefix}-${TODAY}.tar"
			destfile="${dir.build}/${spec.filename.prefix}-${TODAY}.tar.gz"/>

		<copy file="${dir.temp}/${spec.filename.prefix}-${TODAY}.zip" todir="${dir.build}"/>

	</target>

	<target name="build-archives-public">
		<zip destfile="${dir.temp}/${spec.filename.prefix}-${TODAY}.zip" basedir="${dir.build}/"
			excludes="${file.exclude.list},**/.htaccess"/>
		
		<tar destfile="${dir.temp}/${spec.filename.prefix}-${TODAY}.tar" basedir="${dir.build}/"
			excludes="${file.exclude.list},**/.htaccess"/>
		
		<gzip src="${dir.temp}/${spec.filename.prefix}-${TODAY}.tar"
			destfile="${dir.build}/${spec.filename.prefix}-${TODAY}.tar.gz"/>
		
		<copy file="${dir.temp}/${spec.filename.prefix}-${TODAY}.zip" todir="${dir.build}"/>
	</target>

	<target name="build-schema-catalog">
		<fileset id="build.contents" dir="${dir.build.schema}"
			includes="**/*.rnc,**/*.rng,**/*.sch,**/*.nvdl"/>
		<property name="prop.schemadir.contents" refid="build.contents"/>
		<!-- in is a dummy -->
		<saxon-xslt classpathref="build.classpath" in="${schema.epub.package.sch}"
			out="${dir.build.schema}/${spec.filename.prefix}-catalog.xml" style="${xslt.catalog}">
			<param name="list" expression="${prop.schemadir.contents}"/>
			<param name="www-base" expression="http://www.idpf.org/epub/301/schema/"/>
		</saxon-xslt>
	</target>


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   v a l i d a t i o n - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<!-- NVDL (Jing-Trang implementation) has no support for ISO Schematron 
		==> no implementation available for schema language with namespace URI 
		"http://purl.oclc.org/dsdl/schematron". 
		See http://code.google.com/p/jing-trang/issues/detail?id=23 -->

	<target name="validate-html-output">
		<jing rngfile="${schema.xhtmlrdfa11}" failonerror="false" compactsyntax="false">
			<fileset dir="${dir.build}" includes="**/*.html">
				<exclude name="@{fileset-excludes}"/>
			</fileset>
		</jing>
	</target>

	<target name="validate-tests"
		depends="validate-tests-package, validate-tests-overlays, 
				 validate-tests-xhtml, validate-tests-nav"/>

	<target name="validate-tests-package">
		<validate-tests-impl dir="package" schema-rng="${schema.epub.package.rnc}"
			schema-sch="${schema.epub.package.sch}" includes="*.opf" excludes=""/>
	</target>

	<target name="validate-tests-overlays">
		<validate-tests-impl dir="overlays" schema-rng="${schema.epub.mediaoverlay.rnc}"
			schema-sch="${schema.epub.mediaoverlay.sch}" includes="*.smil" excludes=""/>
	</target>

	<target name="validate-tests-xhtml">
		<validate-tests-impl dir="xhtml" schema-rng="${schema.epub.xhtml.rnc}"
			schema-sch="${schema.epub.xhtml.sch}" includes="*.xhtml" excludes=""/>
	</target>

	<target name="validate-tests-nav">
		<validate-tests-impl dir="nav" schema-rng="${schema.epub.nav.rnc}"
			schema-sch="${schema.epub.nav.sch}" includes="*.xhtml" excludes=""/>
	</target>

	<macrodef name="validate-tests-impl">
		<attribute name="dir"/>
		<attribute name="includes"/>
		<attribute name="excludes"/>
		<attribute name="schema-rng"/>
		<attribute name="schema-sch"/>

		<sequential>
			<echo> </echo>
			<echo> </echo>
			<echo>test validation: @{dir}; valid branch</echo>
			<validate-fileset-rng fileset-dir="${dir.test}/@{dir}/valid"
				fileset-includes="@{includes}" fileset-excludes="@{excludes}" compaxtsyntax="true"
				failonerror="true" schema="@{schema-rng}"/>
			
			<iso-sch in-isosch="@{schema-sch}" in-basedir="${dir.test}/@{dir}/valid" in-includes="@{includes}" in-excludes="@{excludes}"/>
						
		</sequential>
	</macrodef>

	<target name="validate-src-rng-schemas"
		description="validate the source schemas against the RelaxNG schema for RelaxNG">
		<validate-fileset-rng fileset-dir="${dir.src.schema}" fileset-includes="**/*.rng"
			fileset-excludes="" schema="${schema.rng}" failonerror="true" compaxtsyntax="false"/>
	</target>

	<target name="validate-src-specs"
		description="validate the source specs against the docbook schema">
		<validate-fileset-rng fileset-dir="${dir.src.spec}" fileset-includes="*.xml"
			fileset-excludes="" schema="${schema.docbook}" failonerror="true" compaxtsyntax="false"
		/>
	</target>

	<target name="validate-spec-examples"
		description="validate spec examples against corresponding schemas where available">

		<property name="example-invalid-pattern" value="**/*invalid*"/>
		<property name="example-full-pattern" value="**/*full*"/>

		<!-- ocf container 		
		<validate-fileset-rng
			fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*container*.xml"
			fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/ocf30-container.rnc"
			failonerror="false"
			compaxtsyntax="true"
		/>
		-->

		<!-- ocf signatures 
		<validate-fileset-rng
			fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*signatures*.xml"
			fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/ocf30-signatures.rnc"
			failonerror="false"
			compaxtsyntax="true"
		/>
		-->

		<!-- ocf encryption 
		<validate-fileset-rng
			fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*encryption*.xml"
			fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/ocf30-encryption.rnc"
			failonerror="false"
			compaxtsyntax="true"
		/>
		-->

		<!-- xhtml TODO -->

		<!-- svg TODO -->

		<!-- package TODO -->

		<!-- nav TODO -->

		<!-- media overlays -->

		<validate-fileset-rng fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*overlay*.xml" fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/media-overlay.rnc" failonerror="false" compaxtsyntax="true"/>
	</target>

	<macrodef name="validate-fileset-rng">
		<attribute name="fileset-dir"/>
		<attribute name="fileset-includes"/>
		<attribute name="fileset-excludes"/>
		<attribute name="schema"/>
		<attribute name="failonerror"/>
		<!-- 'true'|false -->
		<attribute name="compaxtsyntax"/>
		<!-- 'true'|false -->
		<sequential>
			<echo level="info">Validating @{fileset-dir}/@{fileset-includes} against @{schema}
				...</echo>
			<jing rngfile="@{schema}" failonerror="@{failonerror}" compactsyntax="@{compaxtsyntax}">
				<fileset dir="@{fileset-dir}" includes="@{fileset-includes}">
					<exclude name="@{fileset-excludes}"/>
				</fileset>
			</jing>
		</sequential>
	</macrodef>


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   u t i l i t i e s - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<target name="clean" depends="clean-temp-dir, clean-build-dir"/>

	<target name="clean-temp-dir">
		<clean-dir dir="${dir.temp}"/>
	</target>

	<target name="clean-build-dir">
		<clean-dir dir="${dir.build.epub}"/>
		<clean-dir dir="${dir.build.idx}"/>
		<clean-dir dir="${dir.build.linking}"/>
		<clean-dir dir="${dir.build.vocab}"/>
		<delete failonerror="false">
			<fileset dir="${dir.build}" includes="*.zip *.tar *.gz"/>
		</delete>
	</target>

	<macrodef name="clean-dir">
		<attribute name="dir"/>
		<sequential>
			<delete failonerror="false" includeemptydirs="true">
				<fileset dir="@{dir}" includes="**/*"/>
			</delete>
			<mkdir dir="@{dir}"/>
		</sequential>
	</macrodef>

	<macrodef name="trang">
		<attribute name="in"/>
		<attribute name="out"/>
		<sequential>
			<java jar="${dir.lib}/trang.jar" fork="true" failonerror="true" maxmemory="512m">
				<arg value="@{in}"/>
				<arg value="@{out}"/>
				<classpath refid="build.classpath"/>
			</java>
		</sequential>
	</macrodef>
	
	<macrodef name="iso-sch">
		<attribute name="in-isosch"/>
		<attribute name="in-basedir"/>
		<attribute name="in-includes"/>
		<attribute name="in-excludes"/>
		
		<sequential>
			<property name="dir.util.sch" value="${dir.util}/sch"/>
			<property name="xslt.sch.abstract" value="${dir.util}/sch/iso-schematron-abstract.xsl"/>
			<property name="xslt.sch.message" value="${dir.util}/sch/iso-schematron-message.xsl"/>
			
			<saxon-xslt in="@{in-isosch}" out="${dir.temp}/isosch-1.sch" style="${xslt.sch.abstract}" />
			<saxon-xslt in="${dir.temp}/isosch-1.sch" out="${dir.temp}/isosch-2.xsl" style="${xslt.sch.message}" />
			
			<saxon-xslt basedir="@{in-basedir}" includes="@{in-includes}" excludes="@{in-excludes}" 
				style="${dir.temp}/isosch-2.xsl" destdir="${dir.temp}/sch-out/"/>
													
		</sequential>
	</macrodef>

	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   t a s k d e f s - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	<taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask">
		<classpath>
			<pathelement location="${dir.lib}/jing.jar"/>
		</classpath>
	</taskdef>

	<taskdef name="saxon-xslt" classname="net.sf.saxon.ant.AntTransform">
		<classpath>
			<pathelement location="${dir.lib}/saxon9.jar"/>
			<pathelement location="${dir.lib}/saxon9-ant.jar"/>
		</classpath>
	</taskdef>

	<taskdef name="schematron" classname="com.schematron.ant.SchematronTask">
		<classpath>
			<path refid="build.classpath"/>
		</classpath>
	</taskdef>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib-10b3.jar"/>
		</classpath>
	</taskdef>

	<macrodef name="build-htaccess"
		description="builds a htaccess with settable DirectoryIndex value">
		<attribute name="dest-dir"/>
		<attribute name="index-name"/>
		<sequential>
			<echo file="@{dest-dir}/.htaccess">DirectoryIndex @{index-name} </echo>
		</sequential>
	</macrodef>

	<macrodef name="build-htaccess-dirlist" description="builds a htaccess with dirlisting enabler">
		<attribute name="dest-dir"/>
		<sequential>
			<echo file="@{dest-dir}/.htaccess">Options +Indexes </echo>
		</sequential>		
	</macrodef>
	
	<target name="copy-dated">
		<copy-dated-impl date="${TODAY}"/>
	</target>
	
	<target name="build-errata" description="generates errata dirs">
		<generate-errata-impl
			output-dir="${dir.build.altss-tags}/altss-tags-errata/"
			input-file="${dir.src.errata}/altss-tags.html" />
		<generate-errata-impl
			output-dir="${dir.build.cfi}/epub-cfi-errata/"
			input-file="${dir.src.errata}/epub-cfi.html" />
		<generate-errata-impl
			output-dir="${dir.build.spec}/epub30-contentdocs-errata/"
			input-file="${dir.src.errata}/epub30-contentdocs.html" />
		<generate-errata-impl
			output-dir="${dir.build.spec}/epub30-mediaoverlays-errata/"
			input-file="${dir.src.errata}/epub30-mediaoverlays.html" />
		<generate-errata-impl
			output-dir="${dir.build.spec}/epub30-ocf-errata/"
			input-file="${dir.src.errata}/epub30-ocf.html" />
		<generate-errata-impl
			output-dir="${dir.build.spec}/epub30-publications-errata/"
			input-file="${dir.src.errata}/epub30-publications.html" />		
	</target>
	
	<macrodef name="generate-errata-impl">
		<attribute name="output-dir"/>
		<attribute name="input-file"/>
		<sequential>
			<mkdir dir="@{output-dir}"/>
			<copy file="@{input-file}" tofile="@{output-dir}/index.html" overwrite="true" failonerror="true"/>
			<echo file="@{output-dir}/.htaccess">DirectoryIndex index.html </echo>
		</sequential>
	</macrodef>
	
	<macrodef name="copy-dated-impl" description="makes dated copies of the spec files">
		<attribute name="date"/>		
		<sequential>
			<!-- main specs -->
			<property name="sd" value="${dir.build.spec}/${spec.filename.prefix}"/>
			<copy file="${sd}-changes.html" tofile="${sd}-changes-@{date}.html" overwrite="true" failonerror="true"/>
			<copy file="${sd}-contentdocs.html" tofile="${sd}-contentdocs-@{date}.html" overwrite="true" failonerror="true"/>
			<copy file="${sd}-mediaoverlays.html" tofile="${sd}-mediaoverlays-@{date}.html" overwrite="true" failonerror="true"/>
			<copy file="${sd}-ocf.html" tofile="${sd}-ocf-@{date}.html" overwrite="true" failonerror="true"/>
			<copy file="${sd}-overview.html" tofile="${sd}-overview-@{date}.html" overwrite="true" failonerror="true"/>
			<copy file="${sd}-publications.html" tofile="${sd}-publications-@{date}.html" overwrite="true" failonerror="true"/>
			<!-- indexes -->
			<copy file="${dir.build.idx}/epub-indexes.html" tofile="${dir.build.idx}/epub-indexes-@{date}.html" overwrite="true" failonerror="true"/>
			<!-- cfi -->
			<copy file="${dir.build.linking}/cfi/epub-cfi.html" tofile="${dir.build.linking}/cfi/epub-cfi-@{date}.html" overwrite="true" failonerror="true"/>
			<!-- altsstags -->
			<copy file="${dir.build.altss-tags}/altss-tags.html" tofile="${dir.build.altss-tags}/altss-tags-@{date}.html" overwrite="true" failonerror="true"/>
			<!-- main zips -->
			<copy file="${dir.build}/epub30-@{date}.zip" tofile="${dir.build}/epub30-latest.zip" overwrite="true" failonerror="true"/>
			<copy file="${dir.build}/epub30-@{date}.tar.gz" tofile="${dir.build}/epub30-latest.tar.gz" overwrite="true" failonerror="true"/>
		</sequential>			
	</macrodef>

	<xmlcatalog id="xhtml-catalog">
		<dtd publicId="-//W3C//DTD XHTML 1.0 Strict//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml1-strict.dtd"/>
		<dtd publicId="-//W3C//DTD XHTML 1.0 Transitional//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml1-transitional.dtd"/>
		<dtd publicId="-//W3C//DTD XHTML 1.1//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml11.dtd"/>
		<dtd publicId="-//W3C//DTD XHTML+RDFa 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-rdfa-1.dtd"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Base Element 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-base-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Ruby 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-ruby-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Forms 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-basic-form-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Legacy Markup 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-legacy-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Scripting 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-script-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Link Element 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-link-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML BIDI Override Element 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-bdo-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Lists 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-list-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Server-side Image Maps 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-ssismap-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Client-side Image Maps 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-csismap-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Metainformation 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-meta-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Document Structure 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-struct-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Style Sheets 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-style-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Editing Elements 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-edit-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Embedded Object 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-object-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Param Element 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-param-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Tables 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-table-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Hypertext 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-hypertext-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Presentation 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-pres-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Target 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-target-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Images 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-image-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Text 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-text-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Style 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-inlstyle-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Structural 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-inlstruct-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Phrasal 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-inlphras-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Block Structural 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-blkstruct-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Block Phrasal 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-blkphras-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Presentation 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-inlpres-1.mod"/>
		<entity publicid="-//W3C//ELEMENTS XHTML Block Presentation 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-blkpres-1.mod"/>
		<entity publicid="-//W3C//ENTITIES XHTML Qualified Names 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-qname-1.mod"/>
		<entity publicid="-//W3C//ENTITIES XHTML Intrinsic Events 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-events-1.mod"/>
		<entity publicid="-//W3C//ENTITIES XHTML Modular Framework 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-framework-1.mod"/>
		<entity publicid="-//W3C//ENTITIES XHTML Common Attributes 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-attribs-1.mod"/>
		<entity publicid="-//W3C//ENTITIES XHTML Datatypes 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-datatypes-1.mod"/>
		<entity publicid="-//W3C//ENTITIES XHTML MetaAttributes 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-metaAttributes-1.mod"/>
		<entity publicid="-//W3C//ENTITIES XHTML+RDFa Document Model 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-rdfa-model-1.mod"/>
		<entity publicid="-//W3C//ENTITIES Symbols for XHTML//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-symbol.ent"/>
		<entity publicid="-//W3C//ENTITIES Special for XHTML//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-special.ent"/>
		<entity publicid="-//W3C//ENTITIES Latin 1 for XHTML//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-lat1.ent"/>
		<entity publicid="-//W3C//ENTITIES XHTML Character Entities 1.0//EN"
			location="${dir.util.xhtml.dtd.catalog}/xhtml-charent-1.mod"/>
	</xmlcatalog>

</project>

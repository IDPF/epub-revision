<?xml version="1.0" encoding="UTF-8"?>
<project name="epub-revision" basedir="." default="all">
	
	<tstamp>
		<format property="TODAY" pattern="yyyyMMdd" />
	</tstamp>	
					
	<property name="dir.src" value="${basedir}/src" />
	<property name="dir.src.schema" value="${dir.src}/schema" />
	<property name="dir.src.spec" value="${dir.src}/spec" />
	<property name="dir.src.spec.css" value="${dir.src}/spec/css" />
	<property name="dir.src.spec.examples" value="${dir.src}/spec/examples" />
	<property name="dir.src.vocab" value="${dir.src}/vocab" />
	<property name="dir.src.profile" value="${dir.src}/profile" />
	
	<property name="dir.util" value="${basedir}/util" />
	<property name="dir.util.rng" value="${dir.util}/relaxng" />
	<property name="dir.util.rng.schemadoc" value="${dir.util.rng}/schemadoc" />
	<property name="dir.util.docbook" value="${dir.util}/docbook" />
	<property name="dir.util.docbook.schema" value="${dir.util.docbook}/schema"/>
	<property name="dir.util.xhtml" value="${dir.util}/xhtml" />
	<property name="dir.util.xhtml.dtd.catalog" value="${dir.util.xhtml}/dtd" />
	<property name="dir.util.rdf" value="${dir.util}/rdf" />
	
	<property name="dir.test" value="${basedir}/test" />
	<property name="dir.lib" value="${basedir}/lib" />	
	<property name="dir.build" value="${basedir}/build" />
	<property name="dir.build.schema" value="${dir.build}/schema" />
	<property name="dir.build.schemadoc" value="${dir.build}/schemadoc" />
	<property name="dir.build.vocab" value="${dir.build}/vocab" />
	<property name="dir.build.profile" value="${dir.build}/profile" />
	<property name="dir.build.spec" value="${dir.build}/spec" />
	<property name="dir.temp" value="${basedir}/temp" />
	<property name="dir.temp.spec" value="${dir.temp}/spec" />
		
	<property name="schema.src.ops" value="${dir.src.schema}/ops30.rnc"/>
	
	<property name="schema.rng" value="${dir.util.rng}/relaxng.rng" />
	<property name="schema.docbook" value="${dir.util.docbook.schema}/docbook.nvdl" />
	<property name="schema.xhtml11" value="${dir.util.xhtml}/relaxng/xhtml.rng" />
	<property name="xslt.docbook2xhtml" value="${dir.util.docbook}/docbookspec.xsl" />
	<property name="xslt.biblio-cleaner" value="${dir.util.docbook}/biblio-cleaner.xsl" />
	<property name="xslt.terminology-cleaner" value="${dir.util.docbook}/terminology-cleaner.xsl" />
	<property name="xslt.switch"  value="${dir.util.docbook}/switch.xsl" />
	<property name="xslt.olink"  value="${dir.util.docbook}/olink.xsl" />
	<property name="xslt.link-decorator"  value="${dir.util.docbook}/link-decorator.xsl"/>
	<property name="css.docbook2xhtml" value="${dir.src.spec.css}/epub-spec.css" />
		
	<property name="file.exclude.list" value=".htaccess,.DS_Store,.localized"/>
	
	<path id="build.classpath">
		<fileset dir="${dir.lib}" includes="**/*.jar" />	
	    <pathelement path="${java.class.path}"/>  
	</path>


	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   b u i l d - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	

	<target name="all" depends=" clean,
		build-vocabs,
		build-profiles,
		build-specs,
		build-schemas,		
		build-archives, 
		copy-css" />

	<target name="build-specs" depends="clean, copy-css"> <!-- , validate-src-specs, validate-spec-examples" -->
		
		<!-- make a separate copy for the vocab injects to work on -->
		<mkdir dir="${dir.temp.spec}/00" />
		<copy todir="${dir.temp.spec}/00">
			<fileset dir="${dir.src.spec}"/>
		</copy>
			
		<!-- TODO inject overlays vocab defs -->
		
		<!-- run the olink preprocess xslt -->		
		<mkdir dir="${dir.temp.spec}/10" />
		<saxon-xslt description="process epub-specific olinks"
			classpathref="build.classpath"
			basedir="${dir.temp.spec}/00/"
			includes="*.xml"
			destdir="${dir.temp.spec}/10/"
			extension=".xml" 			
			style="${xslt.olink}">
			
			<param name="db-spec-base-uri" expression="${dir.temp.spec}/00/"/>
			
		</saxon-xslt>
		
		<!-- run the bibliocleaner preprocess xslt -->
		<mkdir dir="${dir.temp.spec}/20" />		
		<saxon-xslt description="filters out unreferenced bibliorefs"
					classpathref="build.classpath"
					basedir="${dir.temp.spec}/10"
					includes="*.xml"
					destdir="${dir.temp.spec}/20/"
					extension=".xml" 			
					style="${xslt.biblio-cleaner}">
		</saxon-xslt>
		
		<!-- run the terminology preprocess xslt -->
		<mkdir dir="${dir.temp.spec}/30" />
		<saxon-xslt description="filters out unreferenced glossentries"
					classpathref="build.classpath"
					basedir="${dir.temp.spec}/20/"
					includes="*.xml"
					destdir="${dir.temp.spec}/30/"
					extension=".xml" 			
					style="${xslt.terminology-cleaner}">
		</saxon-xslt>
		
		<!-- run the switch preprocess xslt -->		
		<mkdir dir="${dir.temp.spec}/40" />
		<saxon-xslt description="conditional exclude/include"
					classpathref="build.classpath"
					basedir="${dir.temp.spec}/30/"
					includes="*.xml"
					destdir="${dir.temp.spec}/40/"
					extension=".xml" 			
					style="${xslt.switch}">
		</saxon-xslt>
		
		<!-- run the link decorator xslt -->		
		<mkdir dir="${dir.temp.spec}/50" />
		<saxon-xslt description="decorate links with @role"
			classpathref="build.classpath"
			basedir="${dir.temp.spec}/40/"
			includes="*.xml"
			destdir="${dir.temp.spec}/50/"
			extension=".xml" 			
			style="${xslt.link-decorator}">
		</saxon-xslt>

		<!-- validate docbook sources -->
		<validate-fileset-rng 
					fileset-dir="${dir.temp.spec}/50" 
					fileset-includes="*.xml"
					fileset-excludes=""
					schema="${schema.docbook}"
					failonerror="true"
					compaxtsyntax="false" />
		
		<!-- run docbook-xhtml -->
		<saxon-xslt 
					classpathref="build.classpath"
					basedir="${dir.temp.spec}/50/"
					includes="*.xml"
					destdir="${dir.build.spec}"
					extension=".html" 			
					style="${xslt.docbook2xhtml}">
					
					<param name="section.autolabel" expression="1"/>
				    <param name="part.autolabel" expression="1"/>
				    <param name="chapter.autolabel" expression="1"/>
					<param name="toc.section.depth" expression="6"/>
					<param name="section.label.includes.component.label" expression="1"/> 
					<param name="section.autolabel.max.depth" expression="8"/>
					<param name="html.stylesheet" expression="../epub-spec.css"/>		
						
		</saxon-xslt>
						
		<!-- validate output html (dtd) -->
		<xmlvalidate classpathref="build.classpath" failonerror="false"> 
			<xmlcatalog refid="xhtml-catalog"/>
			<fileset dir="${dir.build.spec}" includes="*.html"/>			
		</xmlvalidate>
				
		
				
	</target>

	<target name="build-schemas" depends="clean"> <!-- , validate-src-rng-schemas" -->
		<!-- TODO run schemas against test suite -->
		
		<clean-dir dir="${dir.build.schema}"/>
		<copy todir="${dir.build.schema}">
			<fileset dir="${dir.src.schema}" /> <!--  includes="*.rng *.rnc *.sch" -->
		</copy>				
	</target>

	<target name="build-vocabs" depends="copy-css">
		
		<clean-dir dir="${dir.build.vocab}"/>
				
		<!-- structure vocab -->
		<echo>building structure vocab...</echo>
		<build-xhtml-vocab 
			in-n3="${dir.src.vocab}/structure.n3" 
			name="structure"
			out-xhtml="${dir.build.vocab}/structure/epub30-vocab-structure.html" 
			vocab-canonical-uri="http://www.idpf.org/epub/30/vocab/structure/"/>
		
		<!-- package vocab -->
		<echo>building package vocab...</echo>
		<build-vocab-from-docbook
			in-db="${dir.src.spec}/epub30-publications.xml" 
			name="package"
			out-xhtml="${dir.build.vocab}/package/epub30-vocab-package.html" 
			vocab-canonical-uri="http://www.idpf.org/epub/30/vocab/package/" />
		
		<!-- overlays vocab (properties for use in package docs, but in the future possibly also in smil/meta) -->
		<echo>building overlays vocab...</echo>
		<build-xhtml-vocab 
			in-n3="${dir.src.vocab}/overlays.n3" 
			name="overlays"
			out-xhtml="${dir.build.vocab}/overlays/epub30-vocab-overlays.html" 
			vocab-canonical-uri="http://www.idpf.org/epub/30/vocab/overlays/"/>
				
	</target>	
	
	<target name="build-profiles" depends="copy-css">
		<clean-dir dir="${dir.build.profile}"/>
		<copy todir="${dir.build.profile}" overwrite="true">
			<fileset dir="${dir.src.profile}" includes="**/*.html" />
		</copy>
	</target>
	
	<target name="copy-css">		
		<copy file="${css.docbook2xhtml}" overwrite="true" todir="${dir.build}" />
	</target>
	
	<macrodef name="build-xhtml-vocab" 
		description="builds an xhtml+rdfa vocab from an n3 source">
		
		<attribute name="in-n3" /> 				<!-- full path -->
		<attribute name="name" /> 			<!-- string identifier -->
		<attribute name="out-xhtml" />          <!-- full path -->
		<attribute name="vocab-canonical-uri" />
		
		<sequential>
			
			<clean-dir dir="${dir.temp}/vocab/"/>
			
			<!-- convert the n3 to RDF/XML as an xslt source -->
			<jena-n3-to-rdfxml 
				in="@{in-n3}" 
				out="${dir.temp}/vocab/rdfxml.xml"
				vocab-uri="@{vocab-canonical-uri}"/>
			
			<!-- extract the RDFa from the docbook -->
			<saxon-xslt in="${dir.temp}/vocab/rdfxml.xml" 
					out="${dir.temp}/vocab/rdfa.xhtml" 
					style="${dir.util.rdf}/rdfxml-to-rdfa.xslt">
					<param name="vocab-uri" expression="@{vocab-canonical-uri}" />
					<param name="vocab-as-n3" expression="" />
					<param name="vocab-as-rdfxml" expression="" />
					<param name="vocab-revision-history" expression="" />
			</saxon-xslt>
			
			<!-- add toc to the xhtml and place in final destination -->
			<saxon-xslt in="${dir.temp}/vocab/rdfa.xhtml" 
					out="@{out-xhtml}" 
					style="${dir.util}/xhtml/xsl/toc.xsl">					
			</saxon-xslt>
			
		</sequential>
	</macrodef>
		
	<macrodef name="build-vocab-from-docbook" 
		description="builds an xhtml+rdfa vocab from a docbook source">
		
		<attribute name="in-db" /> 				<!-- full path -->
		<attribute name="name" /> 			<!-- string identifier -->
		<attribute name="out-xhtml" />          <!-- full path -->
		<attribute name="vocab-canonical-uri" />
		
		<sequential>
			
			<clean-dir dir="${dir.temp}/vocab/"/>
			
			<!-- convert the n3 to RDF/XML as an xslt source -->
			<saxon-xslt in="@{in-db}" 
				out="${dir.temp}/vocab/docbook.xhtml" 
				style="${dir.util.rdf}/docbook-to-rdfa.xslt">
				<param name="vocab-canonical-uri" expression="@{vocab-canonical-uri}" />
				<param name="vocab-name" expression="@{name}"/>
			</saxon-xslt>
			
			<!-- add toc to the xhtml and place in final destination -->
			<saxon-xslt in="${dir.temp}/vocab/docbook.xhtml" 
				out="@{out-xhtml}" 
				style="${dir.util}/xhtml/xsl/toc.xsl">
			</saxon-xslt>
			
		</sequential>
	</macrodef>
	
	<macrodef name="jena-n3-to-rdfxml" description="convert N3 to RDF/XML using jena.rdfcopy">
		<attribute name="in" />
		<attribute name="out" />
		<attribute name="vocab-uri" /> <!-- the canonical uri of the vocab being converted -->
		<sequential>
			<property name="jena.intermediary" value="${dir.temp}/vocab/jena-intermediary.xml"/>
			<java output="${jena.intermediary}" classname="jena.rdfcopy" fork="true" failonerror="true" maxmemory="512m">
				<arg value="@{in}"/>
				<arg value="N3"/>			
				<arg value="RDF/XML"/>						
				<classpath refid="build.classpath" />
			</java>
			<saxon-xslt in="${jena.intermediary}" out="@{out}" 
				style="${dir.util.rdf}/jena-rdf-fix.xslt">
				<param name="vocab-uri" expression="@{vocab-uri}"/>
			</saxon-xslt>
		</sequential>
	</macrodef>
	
	<target name="build-archives" depends="clean, build-vocabs, build-specs, build-schemas">
		<zip 
			destfile="${dir.temp}/ebup30-${TODAY}.zip" 
			basedir="${dir.build}/" 
			excludes="${file.exclude.list}" />
			
		<tar 
			destfile="${dir.temp}/ebup30-${TODAY}.tar" 
			basedir="${dir.build}/"
			excludes="${file.exclude.list}" />
														
		<gzip 
			src="${dir.temp}/ebup30-${TODAY}.tar" 
			destfile="${dir.build}/ebup30-${TODAY}.tar.gz" />
		
		<copy file="${dir.temp}/ebup30-${TODAY}.zip" todir="${dir.build}" />
		
	</target>
	
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   v a l i d a t i o n - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	
	<target name="validate-tests-ncx-rnc" 
		description="validate the NCX tests using RNC (no ISO Schematron)">
		<validate-fileset-rng
			fileset-dir="${dir.test}" 
			fileset-includes="ncx/**/*.ncx"
			fileset-excludes=""
			schema="${dir.src.schema}/ncx30.rnc"
			failonerror="true"
			compaxtsyntax="true" />
	</target> <!-- NVDL (Jing-Trang implementation) has no support for ISO Schematron ==> no implementation available for schema language with namespace URI "http://purl.oclc.org/dsdl/schematron". See http://code.google.com/p/jing-trang/issues/detail?id=23 -->
	
	<target name="validate-tests-ncx-sch" 
		description="validate the NCX tests using ISO Schematron">
		<schematron
			OutputDir="${dir.build}"
			schema="${dir.src.schema}/ncx30.sch"
			failOnError="true">
			<fileset dir="${dir.test}" includes="ncx/**/*.ncx"/>
		</schematron>
	</target>
	
	<!-- target name="validate-tests-ncx-sch-custom" 
		description="validate a particular NCX test using ISO Schematron">
		<schematron
			OutputDir="${dir.build}"
			schema="${dir.src.schema}/ncx30.sch"
			failOnError="true">
			<fileset dir="${dir.test}" includes="ncx/invalid/ncx-multilang_inherited.ncx"/>
		</schematron>
	</target -->

	<target name="validate-src-rng-schemas" 
		description="validate the source schemas against the RelaxNG schema for RelaxNG">
		<validate-fileset-rng 
			fileset-dir="${dir.src.schema}" 
			fileset-includes="**/*.rng"
			fileset-excludes=""
			schema="${schema.rng}"
			failonerror="true"
			compaxtsyntax="false" />
	</target>
	
	<target name="validate-src-specs" 
		description="validate the source specs against the docbook schema">
		<validate-fileset-rng 
			fileset-dir="${dir.src.spec}" 
			fileset-includes="*.xml"
			fileset-excludes=""
			schema="${schema.docbook}"
			failonerror="true"
			compaxtsyntax="false" />
	</target>
	
	<target name="validate-spec-examples" 
		description="validate spec examples against corresponding schemas where available">
		<property name="example-exclude-pattern" value="**/*invalid* **/*partial*"/>
		
		<!-- ocf container -->		
		<validate-fileset-rng
			fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*container*.xml"
			fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/ocf30-container.rnc"
			failonerror="false"
			compaxtsyntax="true"
		/>
		
		<!-- ocf signatures -->
		<validate-fileset-rng
			fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*signatures*.xml"
			fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/ocf30-signatures.rnc"
			failonerror="false"
			compaxtsyntax="true"
		/>
		
		<!-- ocf encryption -->
		<validate-fileset-rng
			fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*encryption*.xml"
			fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/ocf30-encryption.rnc"
			failonerror="false"
			compaxtsyntax="true"
		/>
		
		<!-- ops TODO -->
		
		<!-- opf TODO -->
		
		<!-- ncx TODO -->
		
		<!-- media overlays -->
		<validate-fileset-rng
			fileset-dir="${dir.src.spec.examples}"
			fileset-includes="**/*overlay*.xml"
			fileset-excludes="${example-exclude-pattern}"
			schema="${dir.src.schema}/media-overlay.rnc"
			failonerror="false"
			compaxtsyntax="true"
		/>
		
		
	</target>
	
	<macrodef name="validate-fileset-rng" >
		<attribute name="fileset-dir" />
		<attribute name="fileset-includes" />
		<attribute name="fileset-excludes" />	 
		<attribute name="schema" />				
		<attribute name="failonerror" /> 		<!-- 'true'|false -->
		<attribute name="compaxtsyntax" /> 		<!-- 'true'|false -->
		<sequential>
			<echo level="info">Validating @{fileset-dir}/@{fileset-includes} against @{schema} ...</echo>
			<jing rngfile="@{schema}" failonerror="@{failonerror}" compactsyntax="@{compaxtsyntax}">				
				<fileset dir="@{fileset-dir}" includes="@{fileset-includes}">
					<exclude name="@{fileset-excludes}"/>
				</fileset>
			</jing>
		</sequential>					
	</macrodef>
	
	<xmlcatalog id="xhtml-catalog">
		<dtd publicId="-//W3C//DTD XHTML 1.0 Strict//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml1-strict.dtd" />
		<dtd publicId="-//W3C//DTD XHTML 1.0 Transitional//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml1-transitional.dtd" />
		<dtd publicId="-//W3C//DTD XHTML 1.1//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml11.dtd" />
		<dtd publicId="-//W3C//DTD XHTML+RDFa 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-rdfa-1.dtd" />
		<entity publicid="-//W3C//ELEMENTS XHTML Base Element 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-base-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Ruby 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-ruby-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Forms 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-basic-form-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Legacy Markup 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-legacy-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Scripting 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-script-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Link Element 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-link-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML BIDI Override Element 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-bdo-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Lists 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-list-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Server-side Image Maps 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-ssismap-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Client-side Image Maps 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-csismap-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Metainformation 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-meta-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Document Structure 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-struct-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Style Sheets 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-style-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Editing Elements 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-edit-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Embedded Object 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-object-1.mod" />					
		<entity publicid="-//W3C//ELEMENTS XHTML Param Element 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-param-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Tables 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-table-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Hypertext 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-hypertext-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Presentation 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-pres-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Target 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-target-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Images 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-image-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Text 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-text-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Style 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-inlstyle-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Structural 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-inlstruct-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Phrasal 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-inlphras-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Block Structural 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-blkstruct-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Block Phrasal 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-blkphras-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Inline Presentation 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-inlpres-1.mod" />
		<entity publicid="-//W3C//ELEMENTS XHTML Block Presentation 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-blkpres-1.mod" />
	    <entity publicid="-//W3C//ENTITIES XHTML Qualified Names 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-qname-1.mod" />
	    <entity publicid="-//W3C//ENTITIES XHTML Intrinsic Events 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-events-1.mod" />
		<entity publicid="-//W3C//ENTITIES XHTML Modular Framework 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-framework-1.mod" />
	    <entity publicid="-//W3C//ENTITIES XHTML Common Attributes 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-attribs-1.mod" />
		<entity publicid="-//W3C//ENTITIES XHTML Datatypes 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-datatypes-1.mod" />
		<entity publicid="-//W3C//ENTITIES XHTML MetaAttributes 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-metaAttributes-1.mod" />
		<entity publicid="-//W3C//ENTITIES XHTML+RDFa Document Model 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-rdfa-model-1.mod" />
		<entity publicid="-//W3C//ENTITIES Symbols for XHTML//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-symbol.ent" />
		<entity publicid="-//W3C//ENTITIES Special for XHTML//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-special.ent" />
		<entity publicid="-//W3C//ENTITIES Latin 1 for XHTML//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-lat1.ent" />
		<entity publicid="-//W3C//ENTITIES XHTML Character Entities 1.0//EN" location="${dir.util.xhtml.dtd.catalog}/xhtml-charent-1.mod" />		
	</xmlcatalog>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   u t i l i t i e s - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
		
	<target name="clean" depends="clean-temp-dir, clean-build-dir" />
	
	<target name="clean-temp-dir">	
		<clean-dir dir="${dir.temp}"/>
	</target>
		
	<target name="clean-build-dir">
		<clean-dir dir="${dir.build}" />
	</target>

	<macrodef name="clean-dir">
		<attribute name="dir"/>
		<sequential>
			<delete failonerror="false" includeemptydirs="true">
				<fileset dir="@{dir}" includes="**/*" />
			</delete>
			<mkdir dir="@{dir}" />
		</sequential>
	</macrodef>
	
	<target name="xmlgen-ops">
		<mkdir dir="${dir.temp}/trang" />
		<trang
			in="${schema.src.ops}"
			out="${dir.temp}/trang/ops30.rng"
			/>		
		<xmlgen 
			input-schema="${dir.temp}/trang/ops30.rng"
			output-dir="${dir.temp}/xmlgen"
			output-count="10"
			datatype-example="${dir.util}/xmlgen/ops-datatypes.xml"
			root="{http://www.w3.org/1999/xhtml}html"
		/>
	</target>
	

	<macrodef name="trang">
		<attribute name="in"/> 
		<attribute name="out"/> 
		<sequential>				
			<java jar="${dir.lib}/trang.jar" fork="true" failonerror="true" maxmemory="512m">
				<arg value="@{in}" />
				<arg value="@{out}" />
				<classpath refid="build.classpath" />
			</java>
		</sequential>
	</macrodef>
	
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   t a s k d e f s - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	
	<taskdef name="jing" classname="com.thaiopensource.relaxng.util.JingTask">
		<classpath>
			<pathelement location="${dir.lib}/jing.jar" />
		</classpath>
	</taskdef>

	<taskdef name="saxon-xslt" classname="net.sf.saxon.ant.AntTransform">
		<classpath>
			<pathelement location="${dir.lib}/saxon9.jar" />
			<pathelement location="${dir.lib}/saxon9-ant.jar" />
		</classpath>
	</taskdef>
		
	<taskdef name="schematron" classname="com.schematron.ant.SchematronTask">
		<classpath>
			<path refid="build.classpath"/>
		</classpath>		
	</taskdef>	
		
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!--   x m l g e n - - - - - - - - - - - - - - - - - - - - - - - - - -->
	<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

	
	<macrodef name="xmlgen">
			<attribute name="input-schema" />		<!-- can't be rnc -->
			<attribute name="output-dir" />
			<attribute name="output-count" />		<!-- number of instances to generate -->
			<attribute name="datatype-example" /> 	<!-- xmlgen datatype training -->
			<attribute name="root" /> 				<!-- clark syntax -->
			
			<sequential>
				<delete failonerror="false" includeemptydirs="true">
					<fileset dir="@{output-dir}" includes="**/*" />
				</delete>
				<mkdir dir="@{output-dir}" />
				<java jar="${dir.lib}/xmlgen/xmlgen.jar" 				   				  
					  fork="true" maxmemory="512m">			
									
					<arg value="-n" />
					<arg value="@{output-count}" />
					
					<arg value="-seed" />
					<arg value="3145349583" />
					
					<arg value="-depth" />
					<arg value="10" />
					
					<arg value="-width" />
					<arg value="10" />
					
					<arg value="-example" />				
					<arg value="@{datatype-example}" />
					
					<arg value="-encoding" />				
					<arg value="utf-8" />
					
					<arg value="-root"/>
					<arg value="@{root}" />
					
					<arg value="@{input-schema}"/>
					<arg value="@{output-dir}/out$.xml" />
													
					<classpath>					
						<pathelement path="${java.class.path}"/>
						<fileset dir="${dir.lib}/xmlgen/" includes="**/*.jar" />												  
					</classpath>
					
				</java>
			</sequential>
			<!--
		 [java]	Usage: XMLGenerator <options> <schema> [<output name>]
	     [java] Options:
	     [java]   -dtd      : use a DTD as a schema
	     [java]   -ascii    : use US-ASCII characters only
	     [java]   -seed <n> : set random seed
	     [java]   -depth <n>: set cut back depth
	     [java]   -width <n>: maximum number of times '*'/'+' are repeated
	     [java]   -n <n>    : # of files to be generated
	     [java]   -warning  : show warnings.
	     [java]   -quiet    : be quiet.
	     [java]   -root {<namespaceURI>}<localName>
	     [java]       fix the root element to the given element
	     [java]   -encoding <str>
	     [java]       output encoding (Java name)
	     [java]   -example <filename>
	     [java]       use the given file as an example. tokens found in the example
	     [java]       is used to generate documents
	     [java]   -error <n>/<m>
	     [java]       error ratio. generate n errors per m elemnts (average).
	     [java]       to control error generation, see manual for details.
	     [java]   -nocomment: suppress insertion of comments that indicate generated errors.
	     [java] 
	     [java]   <output name> must include one '$'. '$' will be replaced by number.
	     [java]   e.g., test.$.xml -> test.1.xml test.2.xml test.3.xml ...
	     [java]   if omitted, generated file will be sent to stdout.
			
			-->
		</macrodef>
	
		<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
		<!--   s c h e m a d o c - - - - - - - - - - - - - - - - - - - - - - -->
		<!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
		<!--
		<target name="build-schemadoc" depends="schemadoc-depends, build-schemadoc-ops"/>
		
		<target name="build-schemadoc-ops" depends="schemadoc-depends">
			<schemadoc 			
				in-schema="${schema.src.ops}"
				out-dir="${dir.build.schemadoc}/ops30"
				machine-name="ops30"		
			/>
		</target>	
		
		<macrodef name="schemadoc">
			<attribute name="in-schema" />
			<attribute name="out-dir" />
			<attribute name="machine-name" />
					
			<sequential>			
				<mkdir dir="@{out-dir}"/>
				
				<trang in="@{in-schema}" out="${dir.temp}/@{machine-name}-trangd.rng"/>
				
				<java classname="org.daisy.z3986.rng.RNGQuasiSimplifier" fork="true" failonerror="true" maxmemory="1024m">			
					<arg value="${dir.temp}/@{machine-name}-trangd.rng"/>
					<arg value="${dir.temp}/@{machine-name}-quasi.rng"/>
					<arg value="false"/>
					<arg value="false"/>
					<classpath refid="build.classpath"/>					
				</java>
				
				<saxon-xslt 
					in="${dir.temp}/@{machine-name}-quasi.rng" 
					style="${dir.util.rng.schemadoc}/schemadoc2.xsl" 
					out="${dir.temp}/dummy-schemadoc.xml">
					<param name="rd-summary" expression="${dir.temp}/summary.xml" />
					<param name="output-path" expression="${dir.build.schemadoc}/@{machine-name}/" />
					<param name="profile-machine-name" expression="ops30" />
					<param name="debug" expression="0" />
				</saxon-xslt> 
				
				<delete file="${dir.temp}/dummy-schemadoc.xml"/>				
				
				<copy file="${dir.util.rng.schemadoc}/schemadoc2.css" tofile="${dir.build.schemadoc}/@{machine-name}/schemadoc.css" />	
			</sequential>
			
		</macrodef>
		
		<target name="schemadoc-depends">
			<echoxml file="${dir.temp}/summary.xml">
				<summary>
					<profile nicename="OPS 3.0" machinename="ops30" rd-uri="http://www.idpf.org/draft/2010-10-02" />								
				</summary>
			</echoxml>
		</target>
		-->
		<!-- broken on ops
		<target name="rng-topology-ops">		 
			<rng-topology
				in-schema="${schema.src.ops}"
				out-dir="${dir.build}/topology"
				machine-name="ops30"
			/>
		</target>	
		-->
		<!--
		<macrodef name="rng-topology">
			<attribute name="in-schema"/>
			<attribute name="machine-name" />
			<attribute name="out-dir"/>
			<sequential>
				<mkdir dir="@{out-dir}"/>
				<trang in="@{in-schema}" out="${dir.temp}/@{machine-name}-trangd.rng"/>
				<saxon-xslt 
					in="${dir.temp}/@{machine-name}-trangd.rng" 
					style="${dir.util.rng}/rng-topology.xsl" 
					out="@{out-dir}/@{machine-name}-topology.html">							
				</saxon-xslt> 			
				<copy file="${dir.util.rng.schemadoc}/schemadoc2.css" todir="@{out-dir}"/>
			</sequential>
		</macrodef>
		-->
	
</project>

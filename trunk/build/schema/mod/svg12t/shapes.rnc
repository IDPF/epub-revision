default namespace = "http://www.w3.org/2000/svg"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace svg = "http://www.w3.org/2005/02/svg-annotations"
namespace xlink = "http://www.w3.org/1999/xlink"

# ==============================================================
#  SVG12-RNG | Shapes
# ==============================================================
[ xml:lang = "en" ]
grammar {
  svg.GCommon.group |=
    path | rect | circle | line | ellipse | polyline | polygon
  # Common Attributes
  svg.ShapeCommon.attr =
    svg.Core.attr,
    svg.Transform.attr,
    svg.Properties.attr,
    svg.FocusHighlight.attr,
    svg.Conditional.attr,
    svg.Focus.attr
  svg.D.attr &=
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute d { PathData.datatype }?
  svg.R.attr &=
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute r { Length.datatype }?
  svg.X12Y12.attr &=
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute x1 { Coordinate.datatype }?,
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute y1 { Coordinate.datatype }?,
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute x2 { Coordinate.datatype }?,
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute y2 { Coordinate.datatype }?
  svg.CxCy.attr &=
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute cx { Coordinate.datatype }?,
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute cy { Coordinate.datatype }?
  svg.RxRyCommon.attr =
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute rx { Length.datatype }?,
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute ry { Length.datatype }?
  # Common Content Model
  shapeCommon.CM =
    svg.Desc.group
    | svg.Handler.group
    | svg.Animate.group
    | svg.Discard.group
  # ... path ...................................................
  [ xml:id = "path" ]
  div {
    path = element path { path.AT, shapeCommon.CM* }
    path.AT &=
      svg.ShapeCommon.attr,
      svg.D.attr,
      [ svg:animatable = "true" svg:inheritable = "false" ]
      attribute pathLength { Number.datatype }?
  }
  # ... rect ...................................................
  [ xml:id = "rect" ]
  div {
    rect = element rect { rect.AT, shapeCommon.CM* }
    rect.AT &= svg.ShapeCommon.attr, svg.XYWH.attr, svg.RxRyCommon.attr
  }
  # ... circle .................................................
  [ xml:id = "circle" ]
  div {
    circle = element circle { circle.AT, shapeCommon.CM* }
    circle.AT &= svg.ShapeCommon.attr, svg.CxCy.attr, svg.R.attr
  }
  # ... line ...................................................
  [ xml:id = "line" ]
  div {
    line = element line { line.AT, shapeCommon.CM* }
    line.AT &= svg.ShapeCommon.attr, svg.X12Y12.attr
  }
  # ... ellipse ................................................
  [ xml:id = "ellipse" ]
  div {
    ellipse = element ellipse { ellipse.AT, shapeCommon.CM* }
    ellipse.AT &=
      svg.ShapeCommon.attr, svg.RxRyCommon.attr, svg.CxCy.attr
  }
  # ... polyline ...............................................
  [ xml:id = "polyline" ]
  div {
    polyline = element polyline { polyCommon.AT, shapeCommon.CM* }
    polyCommon.AT &=
      svg.ShapeCommon.attr,
      [ svg:animatable = "true" svg:inheritable = "false" ]
      attribute points { Points.datatype }?
  }
  # ... polygon ................................................
  [ xml:id = "polygon" ]
  div {
    polygon = element polygon { polyCommon.AT, shapeCommon.CM* }
  }
}

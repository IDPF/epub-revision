default namespace = "http://www.w3.org/2000/svg"
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace svg = "http://www.w3.org/2005/02/svg-annotations"
namespace xlink = "http://www.w3.org/1999/xlink"

# ==============================================================
#  SVG12-RNG | SVG 1.2 Tiny Structure
# ==============================================================
[ xml:lang = "en" ]
grammar {
  start = svg
  # Reusable groups
  svg.Desc.group |=
    desc
    | title
    | metadata
    | [ xml:id = "switch.el" ]
      element switch { switch.AT, svg.Desc.group* }
  svg.G-noA.group |=
    svg.Desc.group
    | svg.GCommon.group
    | g
    | defs
    | use
    | element switch { switch.AT, svg.G-noA.group* }
  svg.G.group |=
    svg.Desc.group
    | svg.GCommon.group
    | g
    | defs
    | use
    | element switch { switch.AT, svg.G.group* }
    | [ xml:id = "a.el" ] element a { a.AT, svg.G-noA.group* }
  svg.PAR.attr &=
    [ svg:animatable = "true" svg:inheritable = "false" ]
    attribute preserveAspectRatio {
      xsd:string { pattern = "\s*(none|xMidYMid)\s*(meet)?\s*" }
    }?
  # ... svg ....................................................
  [ xml:id = "svg" ]
  div {
    svg = element svg { svg.AT, svg.G.group* }
    svg.AT &=
      svg.Properties.attr,
      svg.FocusHighlight.attr,
      svg.External.attr,
      svg.Focus.attr,
      svg.AnimateSyncDefault.attr,
      svg.Core.attr,
      svg.WH.attr,
      svg.PAR.attr,
      [ svg:animatable = "true" svg:inheritable = "false" ]
      attribute viewBox { text }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute zoomAndPan { "disable" | "magnify" }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute version {
        xsd:string "1.0" | xsd:string "1.1" | xsd:string "1.2"
      }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute baseProfile {
        xsd:string "none"
        | xsd:string "tiny"
        | xsd:string "basic"
        | xsd:string "full"
      }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute contentScriptType { ContentType.datatype }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute snapshotTime {
        xsd:string "none" | Clock-value.datatype
      }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute timelineBegin {
        xsd:string "onLoad" | xsd:string "onStart"
      }?,
      [ svg:animatable = "false" svg:inheritable = "false" ]
      attribute playbackOrder {
        xsd:string "all" | xsd:string "forwardOnly"
      }?
  }
  # ... g ......................................................
  [ xml:id = "g" ]
  div {
    g = element g { g.AT, svg.G.group* }
    g.AT &=
      svg.Properties.attr,
      svg.FocusHighlight.attr,
      svg.Core.attr,
      svg.External.attr,
      svg.Conditional.attr,
      svg.Focus.attr,
      svg.Transform.attr
  }
  # ... defs ...................................................
  [ xml:id = "defs" ]
  div {
    defs = element defs { defs.AT, svg.G.group* }
    defs.AT &= svg.Properties.attr, svg.Core.attr
  }
  # ... desc, title, metadata ..................................
  [ xml:id = "desc" ]
  div {
    desc = element desc { DTM.AT, DTM.CM }
    DTM.AT &= svg.Core.attr, svg.Conditional.attr, svg.Media.attr
    DTM.CM = text
  }
  [ xml:id = "title" ]
  div {
    title = element title { DTM.AT, DTM.CM }
  }
  [ xml:id = "metadata" ]
  div {
    metadata = element metadata { DTM.AT, DTM.CM }
  }
  # ... use ....................................................
  [ xml:id = "use" ]
  div {
    use = element use { use.AT, use.CM }
    use.AT &=
      svg.Properties.attr,
      svg.FocusHighlight.attr,
      svg.Core.attr,
      svg.Conditional.attr,
      svg.Transform.attr,
      svg.XLinkEmbed.attr,
      svg.Focus.attr,
      svg.External.attr,
      svg.XY.attr
    use.CM = (svg.Desc.group | svg.Animate.group | svg.Handler.group)*
  }
}

#summary Linking implementation proposal using service provider OPF entry

= Linking using Service Provider OPF entry =

== Problems with URL/URI-based links ==

One problem with URL-based links is that while we have a lot of ideas on the "tail" of the link, there is no consensus on the "prefix" of the link. We considered these alternatives:

=== Hardcoded URL to a particular resolver ===

This is certainly doable even in EPUB2 - e.g. link to a target book website in you favorite ebook store.

The problems are that it is not vendor-neutral, and is unlikely to live very long (as sites disappear, content get rearranged, etc.)

=== Custom (EPUB) URL scheme ===

Idea is to create URLs with our own scheme, e.g. "epub:FOOBAR"

This is not acceptable to some members and will likely to cause controversy.

=== URL pattern ===

The idea is to designate URLs that match certain patterns as conceptual "resolvers", e.g. anything that starts with "http://epub." is actually an EPUB reference.

== OPF Service Provider entry ==

Proposal is to declare an entry in the package that would be referenced from other parts of EPUB (like all other package items), but which would not correspond to a particular package _resource_. Instead, it would correspond to a _service provider_, e.g. a link resolver.

For example:

{{{
<item href="resolver" service-type="http://idpf.org/link-resolver"/>
}}}

Note that the item does not have media-type and instead has service-type. There is no actual file named "resource" included in the package.

It can be referenced from XHTML as usual, but typically with query string:

{{{
<a href="resolver?uid=FOOBAR">that other book</a>
}}}

Query string format is determined by the service provider 
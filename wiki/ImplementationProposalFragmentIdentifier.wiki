#summary Fragment Identifiers for EPUB.

= Canonical Fragment Identifiers for EPUB =

Fragment Identifier is a part of URI that defines a location in a resource. Syntactically it is a part of URI that starts with # and is appended at the end of the URI of the file itself. For HTML documents, ids and named anchors are used as fragment identifiers.

This proposal defines syntax for precisely identifying a location inside EPUB file (or any ZIP-packaged cross-referenced XML for that matter, as long as the root file and referencing semantics is defined). I call these identifiers "canonical fragment identifiers" or "CFIs" because for each location in the file there is a unique identifier. Also, it is possible to compare the resulting identifiers to determine which one is coming first, even without access to the target document.

Example:

{{{#cfi(/2/6/4!/2/4/10/3:10)}}}

Canonical Fragment Identifier is processed in the following manner. Assume that all documents are parsed in W3C DOM (this is not needed for actual implementation). Start with the root (document) XML node of OPF file (NB: perhaps we should start with META-INF/container.xml instead?). Apply the following rules on each step:

Slash-number step refers to a child node(s) in the following manner:
 * each element or PI (except <?xml ...> PI) is assigned an _even_ positive index; first element/PI is given index 2, second element/PI - 4, etc.
 * each (possibly empty) collection of nodes before the first element/PI, between elements/PIs, and after last element/PI are given _odd_ indices according to their position.
This indexing scheme insures that nodes are not sensitive to XML parser handling of whitespace, entity references, and CDATA sections.

Column-number step refers to a character offset. If we are dealing with an element, we have a UTF-16 codepoint index in the element's intrinsic textual value. It is empty for most elements, except for XHTML img tag where alt attribute value is used. If we are dealing with a text node or a collection of nodes, UTF-16 codepoint index is calculated after concatenating text data from all the nodes. Position is zero-based and always refers to a place _between_ characters, so 0 means before the first character, and number equal to the total UTF-16 length means position after the last character.

Exclamation sign step means following a reference. Next step should be applied starting from the target node (root node when complete XML document is referenced). These specific references are honored:
  * opf:itemref refers to the file referenced by href attribute of the item element with the given id.
  * for HTML img, iframe, embed elements references are defined by src attribute
  * for HTML object element, reference is defined by data attribute
  * for SVG image and use elements references are defined by by xlink:href attribute
Note that this schema does not take into account hyperlinks, only "embedding" references; thus it is illegal to follow links from XHTML (or SVG) a element.

In the example above, if the opf file looks like this:
{{{
<?xml version="1.0"?>
<package version="2.0" unique-identifier="bookid" xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns="http://www.idpf.org/2007/opf" xmlns:opf="http://www.idpf.org/2007/opf">
  <metadata>
   <dc:title>...</dc:title> 
   <dc:identifier id="bookid">...</dc:identifier>
   <dc:creator>...</dc:creator> 
   <dc:language>en</dc:language> 
 </metadata>
 <manifest>
  <item id="ncxtoc" href="toc.ncx" media-type="application/x-dtbncx+xml"/>
  <item id="titlepage" href="titlepage.xhtml" media-type="application/xhtml+xml"/>
  <item id="chapter01" href="chapter01.xhtml" media-type="application/xhtml+xml"/>
  <item id="chapter02" href="chapter02.xhtml" media-type="application/xhtml+xml"/>
  <item id="chapter03" href="chapter03.xhtml" media-type="application/xhtml+xml"/>
  <item id="chapter04" href="chapter04.xhtml" media-type="application/xhtml+xml"/>
 </manifest>
 <spine toc="ncxtoc">
  <itemref idref="titlepage"/>
  <itemref idref="chapter01"/>
  <itemref idref="chapter02"/>
  <itemref idref="chapter03"/>
  <itemref idref="chapter04"/>
 </spine>
</package>
}}}

and chapter01.xhtml like this:

{{{
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>...</title>
</head>
<body>
<p>...</p>
<p>...</p>
<p>...</p>
<p>...</p>
<p>aaa <em>bbb</em>0123456789</p>
<p>...</p>
<p>...</p>
<img src="foo.svg"/>
<p>...</p>
<p>...</p>
</body>
</html>
}}}

Then the given fragment identifier refers to the position right after the digit 9.

When producing CFIs for text locations, unless the text is defined by img element's alt tag, one should always start with the text node or text node collection (even if it empty) that corresponds to the location and then trace the ancestor and reference chain to the OPF file root. Here are some examples: 

|| {{{#cfi(/2/6/4!/2/4/16)}}} || img element ||
|| {{{#cfi(/2/6/4!/2/4/16!/2/2)}}} || first child of the root svg element in foo.svg ||
|| {{{#cfi(/2/6/4!/2/4/10/1:0)}}} || location just before aaa ||
|| {{{#cfi(/2/6/4!/2/4/10/2/1:0)}}} || location just before bbb ||
|| {{{#cfi(/2/6/4!/2/4/10/2/1:3)}}} || location just after bbb ||
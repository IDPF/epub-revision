#summary Solutions for EGLS requirements

<wiki:toc max_depth="3" />

= Introduction = 
Each section or subsection in this wiki references to a section or subsection  in the [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list EGLS requirement list wiki].

= Solutions to Page Progression Direction [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Page_Progression_Direction +] =

== Solutions to Page progression direction [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Page_progression_direction +] ==

=== EGLS_PPD1　Solution A (Murata) ===
Allow the OPF 'item' element to have an optional attribute @page-progression-direction, which announces the page progression direction.  To specify a package-level default, allow the OPF 'package' element to have the same attribute.

Pros:
 * Simple and straightforward.

Cons:
 * Not aligned with http://dev.w3.org/csswg/css3-page/#progression.  It uses ‘direction’ and ‘block-progression’ properties to determine the page progression direction, but does not address our requirements (separation of page progression direction from these two properties).

== Solutions to Two-page-spread [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Two-page-spread +] ==
= Solutions to Vertical Writing [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Vertical_Writing +] =
== Solutions to Two Styles of Vertical Writing [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Two_Styles_of_Vertical_Writing +] ==
== Solutions to Principal Writing Mode [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Principal_Writing_Mode +] ==
== Solutions to Column Progression [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Column_Progression +] ==
== Solutions to Writing Mode of Captions and Table Entries [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Writing_Mode_of_Captions_and_Table_Entries +] ==
== Solutions to Providing Reasonable Fallbacks to Horizontal Writing [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Providing_Reasonable_Fallbacks_to_Horizontal_Writing +] ==
== Solutions to Providing Optimal Layouts for more than one Principal Writing Mode [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Providing_Optimal_Layouts_for_more_than_one_Principal_Writing_Mo +] ==
== Solutions to Announcing non-optimality [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Announcing_non-optimality +] ==
= Solutions to Mixed Text [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Mixed_Text +] =
== Solutions to One by One [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#One_by_One +] ==
== Solutions to Rotation [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Rotation +] ==
== Solutions to Tate-chu-yoko [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Tate-chu-yoko +] ==
== Solutions to Selection of the Three Setting Styles [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Selection_of_the_Three_Setting_Styles +] ==
= Solutions to Line Breaking Rules [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Line_Breaking_Rules Line Breaking Rules +] =
== Solutions to Line-start and Line-end Prohibition Rules [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Line-start_and_Line-end_Prohibition_Rules +] ==
== Solutions to Unbreakable Character Sequences [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Unbreakable_Character_Sequences +] ==
== Solutions to Hanging Punctuations [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Hanging_Punctuations +] ==
== Solutions to Non-separating Characters [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Non-separating_Characters +] ==
= Solutions to Ruby and Emphasis Dots [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Ruby_and_Emphasis_Dots +] =



== Q1: Should we use [http://www.w3.org/TR/html5/text-level-semantics.html#the-ruby-element HTML5 ruby] or should we use [http://www.w3.org/TR/ruby/ Ruby Annotation] (XHTML)? == 

Quite a few people think that HTML5 ruby is easier to write and implement than Ruby Annotation.  Meanwhile, some people think that HTML5 ruby fails to handle some important use cases in [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Multiple_Ruby_Text_(Japanese) Multiple Ruby Text (Japanese) EGLS_RE6], which can be addressed by [http://www.w3.org/TR/ruby/#complex "complex ruby markup"] in Ruby Annotation.  However, some implementers are strongly against "complex ruby markup".  "complex ruby markup" has not been widely implemented, but there are three implementations: a Firefox add-on ([https://addons.mozilla.org/en-US/firefox/addon/1935/ XHTML Ruby Support] ), [https://bugzilla.mozilla.org/show_bug.cgi?id=256274 a Firefox patch], and Amaya.

== Q2: Should we use OPS switch elements (i.e., {{{<ops:switch>}}}) for wrapping {{{ruby}}} or should we use {{{ruby}}} directly?  == 

We assume that EPUB 3.0 is going to use HTML5 rather than XHTML 1.1 as a basis.  If  this is the case, wrapping HTML5 ruby by {{{<ops:switch>}}} does not make a lot of sense.  Wrapping Ruby annotation ruby by {{{<ops:switch>}}} makes sense.

If we wrap {{{ruby}}} with {{{<ops:switch>}}}, we do not need {{{rp}}}, which is for fallback.  If not, we do need {{{rp}}}.

== Q3: Should we distinguish Japanese ruby, Chinese ruby, and Bopomofo Ruby?  If so, how? ==

Japanese [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Mono-Ruby mono ruby] and Chinese mono ruby are rendered similarly, and Japanese [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Group-ruby group ruby] and Chinese group ruby are also rendered similarly.

[http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Jukugo-ruby Jukugo ruby] and [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Multiple_Ruby_Text_(Japanese) Multiple ruby text] are specific to Japan.

[http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Bopomofo_Ruby_(Zhuyin_Fuhao) Bopomofo ruby] is similar to Japanese or Chinese mono ruby, although bopomofo ruby text, which is always represented by Unicode characters in the ranges 3100-312F or 31A0-31BF, is rendered differently.  Moreover, [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Ruby_Positioning Bopomoto ruby positioning is different from Japanese or Chinese ruby].

In this document we assume that we can use the same HTML syntax for Japanese ruby, Chinese ruby, and Bopomofo Ruby except that jukugo ruby and multiple ruby text need different syntax.

== Q4: Which of the three styles of Japanese ruby, namely mono, group, and jukugo ruby is supported by HTML5 and Ruby Annotation (XHTML)? ==

The latest HTML5 working draft (as of 2010-09-26) does not mention mono, group, or jukugo ruby.  The [http://www.w3.org/TR/ruby/ Ruby annotation] mentions mono ruby and group ruby only in the glossary and does not mention jukugo ruby.

 * An [http://lists.w3.org/Archives/Public/public-html-ig-jp/2010Mar/0027.html e-mail] to the public-html-ig-jp@w3.org by Roland Steiner (the author of the current WebKit implementation of ruby) shows how to capture mono/group/jukugo ruby in HTML5.

 * [http://www.w3.org/International/datespace/2010/02/jlreq-examples/ Ruby use cases from the JLReq document] shows how HTML5 and and Ruby Annotation (XHTML) can be used for capturing mono, group, and jukugo ruby.

 * (note 2) in "ii JUkugo-ruby" in "2." in "a. PURPOSE" in "3.3.1 Usage of Ruby says 

{{{
The following examples show the relationship between ruby letters and base kanji characters.

Example of mono-ruby: "凝+(ぎよう)" "視+(し)"

Example of jukugo-ruby 1: "凝+(ぎよう) 視+(し)"

Example of jukugo-ruby 2: "(凝視)+(ぎよう/し)"
}}}



== Q5: Should we use CSS3 Ruby? ==

[http://www.w3.org/TR/css3-ruby/ CSS3 Ruby] is a candidate recommendation, but is likely to be thoroughly changed for HTML5 ruby.  [http://dev.w3.org/csswg/css3-ruby/ The latest editor's draft] is available.  Here we assume that we will not use CSS3 ruby for EPUB 3.0.



== Q6: Should we replace ぁぃぅぇぉ in ruby text by あいうえお? ==

In traditional publishing in Japan, ruby text typically uses あいうえお in stead of ぁぃぅぇぉ.  Unicode has あいうえお(U+3042 U+3044 U+3046 U+3048 U+304a) as well as ぁぃぅぇぉ(U+3041 U+3043 U+3045 U+3047 U+3049).

In this document, we assume that an EPUB document always uses ぁぃぅぇぉ and the reading system replaces them by あいうえお when they are displayed as part of ruby text.

Note: Yamamoto-san wrote "Traditionally in Japanese typography, it is true that a small kana character is usually not used for a palatalized or labio-velarized syllable, if it is used as a ruby character. However, it is the author or editor who decides which kana style is to be used (small or large) in the real-world publishing business. Hence, it should be noted that this is neither a glyph issue, nor a font issue. This issue is clearly on the abstracted layer of characters and text. Therefore, any automatic conversion or replacement of characters must not be allowed usually. In fact, there are not a few authors and editors who want to use small kana characters in ruby instances to describe palatalized or labio-velarized syllables, depending on the usages and purposes of their content."

Note: [http://dev.w3.org/csswg/css3-fonts/ The latest editor's draft] for CSS Fonts Module Level 3 provides {{{font-variant:ruby}}}, which enables display of ruby glyphs (OpenType feature: ruby).



Note: Yamamoto-san also wrote "On the other hand, I think this issue is on the layer of glyphs. For example, if you specify the "ruby" OpenType glyph substitution feature, its effect is only that the stroke weight of your ruby glyphs are added. This "ruby" glyph substitution is intended to prevent ruby characters from looking too thin, because composing ruby glyphs by reducing the body size of ordinary kana glyphs in the font to 1/2 the type size used will usually make them look too thin. The "ruby" glyph substitution feature replaces the specified ruby glyphs only. It doesn't affect any characters at all. Therefore, even if you specify the "ruby" OpenType glyph substitution feature to a small kana character that you have specified to be used as a ruby character, the character won't be replaced with its larger version, and must not be."


== Solutions to Mono-Ruby [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Mono-Ruby +] ==

=== EGLS_RE1 Solution A (Murata): HTML5 ruby without {{{ops:switch}}} (and with {{{rp}}}) === 

Example:
{{{
<p>
  <ruby>東<rp>(</rp><rt>とう</rt><rp>)</rp></ruby><ruby>京<rp>(</rp><rt>きょう</rt><rp>)</rp></ruby>は日本の首都です。
</p>
}}}

{{{
<p>
  <ruby>东<rp>(</rp><rt>dōng</rt><rp>)</rp></ruby><ruby>京<rp>(</rp><rt>jīng</rt><rp>)</rp></ruby>是日本首都
</p>
}}}

Pros:
 * Reading systems that does not support ruby can provide reasonable fallback.
Cons:
 * {{{rp}}} looks ugly

Note: Since the latest HTML5 working draft (as of 2010-09-26) does not mention mono ruby, it is not completely clear HTML5 can capture mono ruby.

=== EGLS_RE1 Solution B (Murata): HTML5 ruby with {{{ops:switch}}} (and without {{{rp}}}) === 
Example:
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>東<rt>とう</rt></ruby><ruby>京<rt>きょう</rt></ruby>
    </ops:case>
   <ops:default>
      <span>東（とう）京（きょう）</span>
   </ops:default>
  </ops:switch>は日本の首都です。
</p>
}}}

{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>东<rt>dōng</rt></ruby><ruby>京<rt>jīng</rt></ruby>
    </ops:case>
      <span>东(dōng)京(jīng)</span>
   </ops:default>
  </ops:switch>是日本首都
</p>
}}}

Pros:
 * Reading systems that does not support ruby can provide reasonable fallback.
Cons:
 * OPS switch elements between HTML5 p and HTML5 ruby looks clumsy and verbose.

=== EGLS_RE1 Solution C (Murata): Ruby annotation  with {{{ops:switch}}} (and without {{{rp}}}) === 

Example:
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby><rb>東</rb><rt>とう</rt></ruby><ruby><rb>京</rb><rt>きょう</rt></ruby>
    </ops:case ...>
   <ops:default>
      <span>東（とう）京（きょう）</span>
   </ops:default>
  </ops:switch>は日本の首都です。
</p>
}}}

Pros:
 * Reading systems that does not support ruby can provide reasonable fallback.
Cons:
 * What's the point of using Ruby annotation when HTML5 supports ruby?

== Solutions to Jukugo-ruby [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Jukugo-ruby +] ==

=== EGLS_RE2 Solution A (Murata): HTML5 ruby without {{{ops:switch}}} (and with {{{rp}}}) === 

Example:
{{{
<p>
  <ruby>東<rp>(</rp><rt>とう</rt><rp>)</rp>京<rp>(</rp><rt>きょう</rt><rp>)</rp></ruby>は日本の首都です。
</p>
}}}
=== EGLS_RE2 Solution B (Murata): HTML5 ruby with {{{ops:switch}}} (and without {{{rp}}}) === 
Example:
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>東<rt>とう</rt>京<rt>きょう</rt></ruby>
    </ops:case ...>
   <ops:default>
      <span>東（とう）京（きょう）</span>
   </ops:default>
  </ops:switch>は日本の首都です。
</p>
}}}
=== EGLS_RE2 Solution C (Murata): Ruby Annotation with {{{ops:switch}}} (and without {{{rp}}})  === 

== Solutions to Group-ruby [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Group-ruby +] ==
=== EGLS_RE3 Solution A (Murata): HTML5 ruby without {{{ops:switch}}} (and with {{{rp}}}) === 

Example:
{{{
<p>
   <ruby>東京<rp>(</rp><rt>とうきょう</rt><rp>)</rp></ruby>は日本の首都です。
</p>
}}}
{{{
<p>
  <ruby>东京<rp>(</rp><rt>dōng jīng</rt><rp>)</rp></ruby>是日本首都
</p>
}}}
=== EGLS_RE3 Solution B (Murata): HTML5 ruby with {{{ops:switch}}} (and without {{{rp}}}) === 
Example:
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>東京<rt>とうきょう</rt></ruby>
    </ops:case>
   <ops:default>
      <span>東京（とうきょう）</span>
   </ops:default>
  </ops:switch>は日本の首都です。
</p>
}}}
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>东京<rt>dōng jīng</rt></ruby>
    </ops:case>
      <span>东京(dōng jīng)</span>
   </ops:default>
  </ops:switch>是日本首都
</p>
}}}
=== EGLS_RE3 Solution C (Murata): Ruby Annotation with ops:switch (and without rp) === 
== Solutions to Bopomofo Ruby (Zhuyin Fuhao) [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Bopomofo_Ruby_%28Zhuyin_Fuhao%29 +] ==

=== EGLS_RE4 Solution A (Murata): HTML5 ruby without ops:switch (and with rp) ===
Example:
{{{
<p>
  <ruby>世<rp>（</rp><rt>ㄕˋ</rt><rp>）</rp></ruby><ruby>上<rp>（</rp><rt>ㄕㄤˋ</rt><rp>）</ruby>
</p>
}}}

=== EGLS_RE4 Solution B (Murata): HTML5 ruby with {{{ops:switch}}} (and without {{{rp}}}) === 
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>世<rp>（</rp><rt>ㄕˋ</rt><rp>）</rp></ruby><ruby>上<rp>（</rp><rt>ㄕㄤˋ</rt><rp>）</ruby>
    </ops:case>
    <ops:default>
      <span>世（ㄕˋ）上（ㄕㄤˋ）</span>
    </ops:default>
  </ops:switch>
</p>
}}}
== Solutions to Ruby Positioning [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Ruby_Positioning +] ==
=== EGLS_RE5-1/2 Solution A (Murata) ===
Do nothing in the EPUB 3.0 specification.  Details of ruby positioning should ideally be described in HTML5 ruby or XHTML Ruby annotation.  If these specifications do not provide enough information, it might be a good idea for each country or region to create some guideline document and submit it to IDPF so that it can be linked from the IDPF web site. 

== Solutions to Multiple Ruby Text (Japanese) [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Multiple_Ruby_Text_%28Japanese%29 +] ==

=== EGLS_RE6 Solution A (Murata) ===
{{{
<ruby>
     <ruby>東<rp>（</rp><rt>とう</rt><rp>)</rp>南<rp>（</rp><rt>なん</rt><rp>）</rp></ruby>
     <rt><rp>[</rp>たつみ</rt><rp>]</rp>
</ruby>
}}}

== Solutions to Handling Ruby According on User preferences or Displays Properties [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Handling_Ruby_According_on_User_preferences_or_Displays_Properti +] ==

=== EGLS_RE7 Solution A (Murata) ===
The EPUB specification should make clear what is intended by the content provider but should not try to restrict the behavior of reading systems.  In other words, reading systems should be allowed to do anything.  This point is already made clear in [http://www.idpf.org/2007/ops/OPS_2.0_final_spec.html#Section2.7 2.7: Rendering of Documents on Reading Systems] in OPS 2.0.  We might want to add some examples for ruby.


== Solutions to Emphasis Dots [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Emphasis_Dots +] ==

=== EGLS_RE8 Solution A (Murata) ===
Ideally, W3C will create a candidate recommendation for the 'text-emphasis' property of (currently in [http://www.w3.org/TR/css3-text/#text-emphasis CSS Text]) in a very timely manner, and EPUB 3.0 should simply adopt it.

=== EGLS_RE8 Solution B (Murata) ===

EPUB 3.0 uses 'idpf-text-emphasis', which is based on a non-CR working draft from W3C.

=== EGLS_RE8 Solution C (Murata) ===

EPUB 3.0 provides its own 'idpf-text-emphasis' without relying on any W3C specs.


= Solutions to Characters or Glyphs [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Characters_or_Glyphs +] ==
== Solutions to Versions of Unicode or ISO/IEC 10646 [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Versions_of_Unicode_or_ISO/IEC_10646 +] ==

=== EGLS_CG1 Solution A (MURATA) ===

Reference to Unicode 6.0 without mandating all conformance requirements present in Unicode 6.0.

Pros:
 * Unicode is well-known.
 * Unicode has more information about semantics of each code point and imposes more requirements on conformant implementations.
Cons:
 * Unicode sometimes imposes too demanding requirements.
 * Normative reference to Unicode 6.0 without mandating its conformance requirements is strange.

=== EGLS_CG1 Solution B (MURATA) ===

Reference to a particular version of ISO/IEC 10646 that has all code points of Unicode 6.0.  Do not reference to Unicode.

Pros:
 * ISO/IEC 10646 does not impose too demanding conformance requirements.
Cons:
 * ISO/IEC 10646 has too little information about semantics of each code point and does not impose enough requirements on conformant implementations.
 * ISO/IEC 10646 is not as well-known as Unicode.

== Solutions to Prohibiting Private-use Characters [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Prohibiting_Private-use_Characters +] ==

=== EGLS_CG2 Solution A (MURATA) ===
Deprecate the use of code values in the range U+E000--U+F8FF (Private Use Area in the BMP),
the range U+F0000-U+FFFFD (The Plane 15 without U+FFFFE and U+FFFFF), and
the range U+100000-U+10FFFFD (The Plane 16 without U+FFFFE and U+FFFFF) for EPUB 3.0 documents.

== Solutions to In-line Graphics [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#In-line_Graphics +] ==
== Solutions to Font Embedding [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Font_Embedding +] ==

=== EGLS_CG4 Solution A (Fujisawa) ===

Ideally, W3C will create a CR for [http://www.w3.org/TR/css3-fonts/ CSS Fonts Module Level 3], and EPUB will use its {{{@font-face}}} property to reference to SVG fonts (([http://www.w3.org/TR/2008/REC-SVGTiny12-20081222/fonts.html SVG 1.1 Fonts] and [http://www.w3.org/TR/2008/REC-SVGTiny12-20081222/fonts.html SVG Tiny 1.2]) or [http://www.w3.org/Submission/WOFF/ WOFF fonts].  Relative URIs specified in {{{@font-face}}} reference to SVG fonts or WOFF fonts within the ZIP file.

Note: WOFF is merely a W3C member submission, but is widely implemented already.

= Solutions to Others [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Others +] =
== Solutions to Phonetics in Metadata [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Phonetics_in_Metadata +] ==
=== EGLS_O1 Solution A (Murata): {{{xml:lang}}} ===
Use two elements of the same tag name.  One is for a kanji string (which may contain 
non-Kanji characters) and the other is for a katakana string.  Specify xml:lang="ja-jp" and xml:lang="ja-ka-jp" for the first and second elements, respectively.

This is actually possible in EPUB 2.0 but has never been clarified.

{{{
<metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:opf="http://www.idpf.org/2007/opf">
   <dc:title xml:lang="ja-jp">伊達姿五侍</dc:title>
   <dc:title xml:lang="ja-kana-jp">ダテスガタゴサムライ</dc:title>
   ...
</metadata>
}}}

Pros:
 * This approach directly simulates forms in Japan, which provide two fields for a name, for example.
 * Many metadata formats (such as [http://www.ndl.go.jp/jp/library/data/meta.html National Diet Library metadata]) in Japan use two fields.

Cons:
 * Need two elements

=== EGLS_O1 Solution B (Ishii): INTERLINEAR ANNOTATION ===
Use Unicode INTERLINEAR ANNOTATION to embed phonetics into the text as defined in http://www.unicode.org/charts/PDF/UFFF0.pdf

 * U+FFF9 INTERLINEAR ANNOTATION ANCHOR marks start of annotated text
 * U+FFFA INTERLINEAR ANNOTATION SEPARATOR marks start of annotating character(s)
 * U+FFFB INTERLINEAR ANNOTATION TERMINATOR marks end of annotation text

What epub applications should do against this Unicode sequence is described in http://www.w3.org/TR/unicode-xml/#Interlinear

Reading systems are recommended to take one or more of the following actions:
 # introduce two text fields, and display all characters between U+FFF9 and U+FFFA in the first field while displaying all characters between U+FFFA and U+FFFB in the second field.
 # remove U+FFF9 together with removing all characters between U+FFFA and following U+FFFB
 # ignore U+FFF9 and turn U+FFFA and U+FFFB  into "[" and "]" respectively, or into similar characters
 # tentatively convert into appropriate ruby markup for further editing and formatting by the user


*Example:*
{{{
<metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:opf="http://www.idpf.org/2007/opf">
   <dc:title xml:lang="ja-jp">U+FFF9伊達姿五侍U+FFFAダテスガタゴサムライU+FFFB</dc:title>
   ...
</metadata>
}}}
Where U+FFF9, U+FFFA, and U+FFFB in the example represents single Unicode characters.

Pros
 * Does not need two elements.
 * Requires less additional code for application developers.

Cons
 * This method is not commonly used.
 * Pre-epub 3.0 devices may display this Unicode sequence incorrectly if it does not follow rules described in http://www.w3.org/TR/unicode-xml/#Interlinear
 * "Unicode in XML and other Markup Languages" <http://www.w3.org/TR/unicode-xml/#Interlinear> (Unicode Technical Report #20 and W3C Working Group Note 16) discourages the use of Interlinear Annotation Characters in the context of markup in XML/HTML.

== Solutions to Language Inheritance [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Language_Inheritance +] ==
== Solutions to Normalization [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Normalization +] ==

=== EGLS_O3 Solution A (Murata) ===

Make Unicode Normalization optional in [http://www.idpf.org/2007/ops/OPS_2.0_final_spec.html#TOC1.3.6 OPS] and [http://www.idpf.org/2007/opf/OPF_2.0_final_spec.html#TOC1.3.4 OPF].

Pros:
 * We can avoid normalization when it unifies what should not be unified. 
Cons:
 * Since normalization is not guaranteed, consistent searching and sorting behavior is not guaranteed. 


=== EGLS_O3 Solution B (Murata) ===
Use variation selectors of Unicode rather than avoiding Unicode Normalization C. See [http://www.google.co.jp/url?q=http://www.dkuug.dk/jtc1/sc2/wg2/docs/n3525.pdf&sa=U&ei=u6VwTPPZApGavAP4luWiDg&ved=0CB4QFjAC&sig2=JR61RqVXb1T5G_9Dmt6a6w&usg=AFQjCNHMzUF1bPqWEKGbgOUI8-KMM8zmCg ISO/IEC JTC1/SC2 WG2 N3525].

Pros:
 * Consistent searching and sorting behavior is guaranteed. 
Cons:
 * Have to register all required variation selectors.
 * The support of variation selectors is not common yet.
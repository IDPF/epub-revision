#summary Solutions for EGLS requirements

= Introduction = 
Each section or subsection in this wiki references to a section or subsection  in the [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list EGLS requirement list wiki].

= Solutions to Page Progression Direction [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Page_Progression_Direction +] =

== Solutions to Page progression direction [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Page_progression_direction +] ==

=== Solution A (Murata) ===
Allow the OPF 'item' element to have an optional attribute @page-progression-direction, which announces the page progression direction.  To specify a package-level default, allow the OPF 'package' element to have the same attribute.

Pros:
 * Simple and straightforward.

Cons:
 * Not aligned with http://dev.w3.org/csswg/css3-page/#progression.  It uses ‘direction’ and ‘block-progression’ properties to determine the page progression direction, but does not address our requirements (separation of page progression direction from these two properties).

== Solutions to Two-page-spread [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Two-page-spread +] ==
= Solutions to Vertical Writing [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Vertical_Writing +] =
== Solutions to Two Styles of Vertical Writing [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Two_Styles_of_Vertical_Writing +] ==
== Solutions to Principal Writing Mode [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Principal_Writing_Mode +] ==
== Solutions to Column Progression [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Column_Progression +] ==
== Solutions to Writing Mode of Captions and Table Entries [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Writing_Mode_of_Captions_and_Table_Entries +] ==
== Solutions to Providing Reasonable Fallbacks to Horizontal Writing [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Providing_Reasonable_Fallbacks_to_Horizontal_Writing +] ==
== Solutions to Providing Optimal Layouts for more than one Principal Writing Mode [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Providing_Optimal_Layouts_for_more_than_one_Principal_Writing_Mo +] ==
== Solutions to Announcing non-optimality [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Announcing_non-optimality +] ==
= Solutions to Mixed Text [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Mixed_Text +] =
== Solutions to One by One [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#One_by_One +] ==
== Solutions to Rotation [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Rotation +] ==
== Solutions to Tate-chu-yoko [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Tate-chu-yoko +] ==
== Solutions to Selection of the Three Setting Styles [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Selection_of_the_Three_Setting_Styles +] ==
= Solutions to Line Breaking Rules [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Line_Breaking_Rules Line Breaking Rules +] =
== Solutions to Line-start and Line-end Prohibition Rules [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Line-start_and_Line-end_Prohibition_Rules +] ==
== Solutions to Unbreakable Character Sequences [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Unbreakable_Character_Sequences +] ==
== Solutions to Hanging Punctuations [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Hanging_Punctuations +] ==
== Solutions to Non-separating Characters [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Non-separating_Characters +] ==
= Solutions to Ruby and Emphasis Dots [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Ruby_and_Emphasis_Dots +] =

=== Q1: Should we use [http://www.w3.org/TR/html5/text-level-semantics.html#the-ruby-element HTML5 ruby] or should we use [http://www.w3.org/TR/ruby/ Ruby Annotation] (an XHTML module)? === 

Quite a few people think that HTML5 ruby is easier to write and implement than Ruby Annotation.  Meanwhile, some people think that HTML5 ruby fails to handle some important use cases in [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Multiple_Ruby_Text_(Japanese) Multiple Ruby Text (Japanese) EGLS_RE6], which can be addressed by [http://www.w3.org/TR/ruby/#complex "complex ruby markup"] in Ruby Annotation.  However, "complex ruby markup" has never been implemented, and some implementers are strongly against it. 

=== Q2: Should we use OPS switch elements (i.e., {{{<ops:switch>}}}) for wrapping {{{ruby}}} or should we use {{{ruby}}} directly?  === 

We assume that EPUB 3.0 is going to use HTML5 rather than XHTML 1.1 as a basis.  If  this is the case, wrapping HTML5 ruby by {{{<ops:switch>}}} does not make a lot of sense.  Wrapping Ruby annotation ruby by {{{<ops:switch>}}} makes sense.

If we wrap {{{ruby}}} with {{{<ops:switch>}}}, we do not need {{{rp}}}, which is for fallback.  If not, we do need {{{rp}}}.

=== Q3: Should we replace ぁぃぅぇぉ in ruby text by あいうえお? ===

Ruby text typically uses あいうえお in stead of ぁぃぅぇぉ in traditional publishing in Japan.

In this document, we assume that an EPUB document always uses ぁぃぅぇぉ and the reading system replaces them by あいうえお when they are displayed as part of ruby text.

== Solutions to Mono-Ruby [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Mono-Ruby +] ==

=== Solution A: HTML5 ruby without {{{ops:switch}}} (and with {{{rp}}}) === 

Example:
{{{
<p>
  <ruby>東<rp>(</rp><rt>とう</rt><rp>)</rp></ruby><ruby>京<rp>(</rp><rt>きょう</rt><rp>)</rp></ruby>は日本の首都です。
</p>
}}}
=== Solution B: HTML5 ruby with {{{ops:switch}}} (and without {{{rp}}}) === 
Example:
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>東<rt>とう</rt></ruby><ruby>京<rt>きょう</rt>
    </ops:case ...>
   <ops:default>
      <span>東（とう）京（きょう）</span>
   </ops:default>
  </ops:switch>は日本の首都です。
</p>
}}}

== Solutions to Jukugo-ruby [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Jukugo-ruby +] ==

=== Solution A: HTML5 ruby without {{{ops:switch}}} (and with {{{rp}}}) === 

Example:
{{{
<p>
  <ruby>東<rp>(</rp><rt>とう</rt><rp>)</rp>京<rp>(</rp><rt>きょう</rt><rp>)</rp></ruby>は日本の首都です。
</p>
}}}
=== Solution B: HTML5 ruby with {{{ops:switch}}} (and without {{{rp}}}) === 
Example:
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>東<rt>とう</rt>京<rt>きょう</rt>
    </ops:case ...>
   <ops:default>
      <span>東（とう）京（きょう）</span>
   </ops:default>
  </ops:switch>は日本の首都です。
</p>
}}}


== Solutions to Group-ruby [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Group-ruby +] ==
=== Solution A: HTML5 ruby without {{{ops:switch}}} (and with {{{rp}}}) === 

Example:
{{{
<p>
   <ruby>東京<rp>(</rp><rt>とうきょう</rt><rp>)</rp></ruby>は日本の首都です。
</p>
}}}

=== Solution B: HTML5 ruby with {{{ops:switch}}} (and without {{{rp}}}) === 
Example:
{{{
<p>
  <ops:switch>
    <ops:case ...>
      <ruby>東京<rt>とうきょう</rt></ruby>
    </ops:case >
   <ops:default>
      <span>東京（とうきょう）</span>
   </ops:default>
  </ops:switch>は日本の首都です。
</p>
}}}

== Solutions to Bopomofo Ruby (Zhuyin Fuhao) [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Bopomofo_Ruby_%28Zhuyin_Fuhao%29 +] ==
== Solutions to Ruby Positioning [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Ruby_Positioning +] ==
== Solutions to Multiple Ruby Text (Japanese) [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Multiple_Ruby_Text_%28Japanese%29 +] ==
== Solutions to Handling Ruby According on User preferences or Displays Properties [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Handling_Ruby_According_on_User_preferences_or_Displays_Properti +] ==
== Solutions to Emphasis Dots [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Emphasis_Dots +] ==
= Solutions to Characters or Glyphs [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Characters_or_Glyphs +] ==
== Solutions to Versions of Unicode or ISO/IEC 10646 [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Versions_of_Unicode_or_ISO/IEC_10646 +] ==

=== Solution A (MURATA) ===

Reference to Unicode 6.0 without mandating all conformance requirements present in Unicode 6.0.

Pros:
 * Unicode is well-known.
 * Unicode has more information about semantics of each code point and imposes more requirements on conformant implementations.
Cons:
 * Unicode sometimes imposes too demanding requirements.
 * Normative reference to Unicode 6.0 without mandating its conformance requirements is strange.

=== Solution B (MURATA) ===

Reference to a particular version of ISO/IEC 10646 that has all code points of Unicode 6.0.  Do not reference to Unicode.

Pros:
 * ISO/IEC 10646 does not impose too demanding conformance requirements.
Cons:
 * ISO/IEC 10646 has too little information about semantics of each code point and does not impose enough requirements on conformant implementations.
 * ISO/IEC 10646 is not as well-known as Unicode.

= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Prohibiting_Private-use_Characters Prohibiting Private-use Characters] =

Deprecate the use of code values in the range U+E000--U+F8FF (Private Use Area in the BMP),
the range U+F0000-U+FFFFD (The Plane 15 without U+FFFFE and U+FFFFF), and
the range U+100000-U+10FFFFD (The Plane 16 without U+FFFFE and U+FFFFF) for EPUB 3.0 documents.

== Solutions to In-line Graphics [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#In-line_Graphics +] ==
== Solutions to Font Embedding [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Font_Embedding +] ==
= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Others Others] =
== Solutions to Phonetics in Metadata [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Phonetics_in_Metadata +] ==
=== Solution A (Murata) ===
Use two elements of the same tag name.  One is for a kanji string (which may contain 
non-Kanji characters) and the other is for a katakana string.  Specify xml:lang="ja-jp" and xml:lang="ja-ka-jp" for the first and second elements, respectively.

This is actually possible in EPUB 2.0 but has never been clarified.

{{{
<metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:opf="http://www.idpf.org/2007/opf">
   <dc:title xml:lang="ja-jp">伊達姿五侍</dc:title>
   <dc:title xml:lang="ja-kana-jp">ダテスガタゴサムライ</dc:title>
   ...
</metadata>
}}}

Pros:
 * This approach directly simulates forms in Japan, which provide two fields for a name, for example.
 * Many metadata formats (such as [http://www.ndl.go.jp/jp/library/data/meta.html National Diet Library metadata]) in Japan use two fields.

Cons:
 * Need two elements

=== Solution B (Ishii) ===
Use Unicode INTERLINEAR ANNOTATION to embed phonetics into the text as defined in http://www.unicode.org/charts/PDF/UFFF0.pdf

 * U+FFF9 INTERLINEAR ANNOTATION ANCHOR marks start of annotated text
 * U+FFFA INTERLINEAR ANNOTATION SEPARATOR marks start of annotating character(s)
 * U+FFFB INTERLINEAR ANNOTATION TERMINATOR marks end of annotation text

What epub applications should do against this Unicode sequence is described in http://www.w3.org/TR/unicode-xml/#Interlinear

Reading systems are recommended to take one or more of the following actions:
 # introduce two text fields, and display all characters between U+FFF9 and U+FFFA in the first field while displaying all characters between U+FFFA and U+FFFB in the second field.
 # remove U+FFF9 together with removing all characters between U+FFFA and following U+FFFB
 # ignore U+FFF9 and turn U+FFFA and U+FFFB  into "[" and "]" respectively, or into similar characters
 # tentatively convert into appropriate ruby markup for further editing and formatting by the user


*Example:*
{{{
<metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:opf="http://www.idpf.org/2007/opf">
   <dc:title xml:lang="ja-jp">U+FFF9伊達姿五侍U+FFFAダテスガタゴサムライU+FFFB</dc:title>
   ...
</metadata>
}}}
Where U+FFF9, U+FFFA, and U+FFFB in the example represents single Unicode characters.

Pros
 * Does not need two elements.
 * Requires less additional code for application developers.

Cons
 * This method is not commonly used.
 * Pre-epub 3.0 devices may display this Unicode sequence incorrectly if it does not follow rules described in http://www.w3.org/TR/unicode-xml/#Interlinear
 * "Unicode in XML and other Markup Languages" <http://www.w3.org/TR/unicode-xml/#Interlinear> (Unicode Technical Report #20 and W3C Working Group Note 16) discourages the use of Interlinear Annotation Characters in the context of markup in XML/HTML.

== Solutions to Language Inheritance [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Language_Inheritance +] ==
== Solutions to Normalization [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Normalization +] ==

=== Solution A (Murata) ===

Make Unicode Normalization optional in [http://www.idpf.org/2007/ops/OPS_2.0_final_spec.html#TOC1.3.6 OPS] and [http://www.idpf.org/2007/opf/OPF_2.0_final_spec.html#TOC1.3.4 OPF].

Pros:
 * We can avoid normalization when it unifies what should not be unified. 
Cons:
 * Since normalization is not guaranteed, consistent searching and sorting behavior is not guaranteed. 


=== Solution B (Murata) ===
Use variation selectors of Unicode rather than avoiding Unicode Normalization C. See [http://www.google.co.jp/url?q=http://www.dkuug.dk/jtc1/sc2/wg2/docs/n3525.pdf&sa=U&ei=u6VwTPPZApGavAP4luWiDg&ved=0CB4QFjAC&sig2=JR61RqVXb1T5G_9Dmt6a6w&usg=AFQjCNHMzUF1bPqWEKGbgOUI8-KMM8zmCg ISO/IEC JTC1/SC2 WG2 N3525].

Pros:
 * Consistent searching and sorting behavior is guaranteed. 
Cons:
 * Have to register all required variation selectors.
 * The support of variation selectors is not common yet.
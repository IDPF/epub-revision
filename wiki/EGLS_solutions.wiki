#summary Solutions for EGLS requirements

= Introduction = 
Each section or subsection in this wiki references to a section or subsection  in the [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list EGLS requirement list wiki].

= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Page_Progression_Direction Page Progression Direction] =

== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Page_progression_direction Page progression direction] ==

=== Solution A (Murata) ===
Allow the OPF 'item' element to have an optional attribute @page-progression-direction, which announces the page progression direction.  To specify a package-level default, allow the OPF 'package' element to have the same attribute.

Pros:
 * Simple and straightforward.

Cons:
 * Not aligned with http://dev.w3.org/csswg/css3-page/#progression.  It uses ‘direction’ and ‘block-progression’ properties to determine the page progression direction, but does not address our requirements (separation of page progression direction from these two properties).

== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Two-page-spread Two-page-spread] ==
= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Vertical_Writing Vertical Writing] =
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Two_Styles_of_Vertical_Writing Two Styles of Vertical Writing] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Principal_Writing_Mode Principal Writing Mode] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Column_Progression Column Progression] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Writing_Mode_of_Captions_and_Table_Entries Writing Mode of Captions and Table Entries] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Providing_Reasonable_Fallbacks_to_Horizontal_Writing Providing Reasonable Fallbacks to Horizontal Writing] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Providing_Optimal_Layouts_for_more_than_one_Principal_Writing_Mo Providing Optimal Layouts for more than one Principal Writing Mode] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Announcing_non-optimality Announcing non-optimality] ==
= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Mixed_Text Mixed Text] =
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#One_by_One One by One] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Rotation Rotation] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Tate-chu-yoko Tate-chu-yoko] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Selection_of_the_Three_Setting_Styles Selection of the Three Setting Styles] ==
= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Line_Breaking_Rules Line Breaking Rules] =
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Line-start_and_Line-end_Prohibition_Rules Line-start and Line-end Prohibition Rules] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Unbreakable_Character_Sequences Unbreakable Character Sequences] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Hanging_Punctuations Hanging Punctuations] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Non-separating_Characters Non-separating Characters] ==
= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Ruby_and_Emphasis_Dots Ruby and Emphasis Dots] =
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Mono-Ruby Mono-Ruby] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Jukugo-ruby Jukugo-ruby] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Group-ruby Group-ruby] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Bopomofo_Ruby_%28Zhuyin_Fuhao%29 Bopomofo Ruby (Zhuyin Fuhao)] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Ruby_Positioning Ruby Positioning] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Multiple_Ruby_Text_%28Japanese%29 Multiple Ruby Text (Japanese)] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Handling_Ruby_According_on_User_preferences_or_Displays_Properti Handling Ruby According on User preferences or Displays Properties] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Emphasis_Dots Emphasis Dots] ==
= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Characters_or_Glyphs Characters or Glyphs] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Versions_of_Unicode_or_ISO/IEC_10646 Versions of Unicode or ISO/IEC 10646] ==

=== Solution A (MURATA) ===

Reference to Unicode 6.0 without mandating all conformance requirements present in Unicode 6.0.

Pros:
 * Unicode is well-known.
 * Unicode has more information about semantics of each code point and imposes more requirements on conformant implementations.
Cons:
 * Unicode sometimes imposes too demanding requirements.
 * Normative reference to Unicode 6.0 without mandating its conformance requirements is strange.

=== Solution B (MURATA) ===

Reference to a particular version of ISO/IEC 10646 that has all code points of Unicode 6.0.  Do not reference to Unicode.

Pros:
 * ISO/IEC 10646 does not impose too demanding conformance requirements.
Cons:
 * ISO/IEC 10646 has too little information about semantics of each code point and does not impose enough requirements on conformant implementations.
 * ISO/IEC 10646 is not as well-known as Unicode.

= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Prohibiting_Private-use_Characters Prohibiting Private-use Characters] =
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#In-line_Graphics In-line Graphics] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Font_Embedding Font Embedding] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Reference Reference] ==
= Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Others Others] =
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Phonetics_in_Metadata Phonetics in Metadata] ==
=== Solution A (Murata) ===
Use two elements of the same tag name.  One is for a kanji string (which may contain 
non-Kanji characters) and the other is for a katakana string.  Specify xml:lang="ja-jp" and xml:lang="ja-ka-jp" for the first and second elements, respectively.

This is actually possible in EPUB 2.0 but has never been clarified.

{{{
<metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:opf="http://www.idpf.org/2007/opf">
   <dc:title xml:lang="ja-jp">伊達姿五侍</dc:title>
   <dc:title xml:lang="ja-kana-jp">ダテスガタゴサムライ</dc:title>
   ...
</metadata>
}}}

Pros:
 * This approach directly simulates forms in Japan, which provide two fields for a name, for example.
 * Many metadata formats (such as [http://www.ndl.go.jp/jp/library/data/meta.html National Diet Library metadata]) in Japan use two fields.

Cons:
 * Need two elements

=== Solution B (Ishii) ===
Use Unicode INTERLINEAR ANNOTATION to embed phonetics into the text as defined in http://www.unicode.org/charts/PDF/UFFF0.pdf

 * U+FFF9 INTERLINEAR ANNOTATION ANCHOR marks start of annotated text
 * U+FFFA INTERLINEAR ANNOTATION SEPARATOR marks start of annotating character(s)
 * U+FFFB INTERLINEAR ANNOTATION TERMINATOR marks end of annotation text

What epub applications should do against this Unicode sequence is described in http://www.w3.org/TR/unicode-xml/#Interlinear

Reading systems are recommended to take one or more of the following actions:
 # introduce two text fields, and display all characters between U+FFF9 and U+FFFA in the first field while displaying all characters between U+FFFA and U+FFFB in the second field.
 # remove U+FFF9 together with removing all characters between U+FFFA and following U+FFFB
 # ignore U+FFF9 and turn U+FFFA and U+FFFB  into "[" and "]" respectively, or into similar characters
 # tentatively convert into appropriate ruby markup for further editing and formatting by the user


*Example:*
{{{
<metadata xmlns:dc="http://purl.org/dc/elements/1.1/"
          xmlns:opf="http://www.idpf.org/2007/opf">
   <dc:title xml:lang="ja-jp">U+FFF9伊達姿五侍U+FFFAダテスガタゴサムライU+FFFB</dc:title>
   ...
</metadata>
}}}
Where U+FFF9, U+FFFA, and U+FFFB in the example represents single Unicode characters.

Pros
 * Does not need two elements.
 * Requires less additional code for application developers.

Cons
 * This method is not commonly used.
 * Pre-epub 3.0 devices may display this Unicode sequence incorrectly if it does not follow rules described in http://www.w3.org/TR/unicode-xml/#Interlinear
 * "Unicode in XML and other Markup Languages" <http://www.w3.org/TR/unicode-xml/#Interlinear> (Unicode Technical Report #20 and W3C Working Group Note 16) discourages the use of Interlinear Annotation Characters in the context of markup in XML/HTML.

== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Language_Inheritance Language Inheritance] ==
== Solutions to [http://code.google.com/p/epub-revision/wiki/EGLS_requirement_list#Normalization Normalization] ==
=== Solution A (Murata) ===

Make Unicode Normalization optional in [http://www.idpf.org/2007/ops/OPS_2.0_final_spec.html#TOC1.3.6 OPS] and [http://www.idpf.org/2007/opf/OPF_2.0_final_spec.html#TOC1.3.4 OPF].

Pros:
 * We can avoid normalization when it unifies what should not be unified. 
Cons:
 * Since normalization is not guaranteed, consistent searching and sorting behavior is not guaranteed. 


=== Solution B (Murata) ===
Use variation selectors of Unicode rather than avoiding Unicode Normalization C. See [http://www.google.co.jp/url?q=http://www.dkuug.dk/jtc1/sc2/wg2/docs/n3525.pdf&sa=U&ei=u6VwTPPZApGavAP4luWiDg&ved=0CB4QFjAC&sig2=JR61RqVXb1T5G_9Dmt6a6w&usg=AFQjCNHMzUF1bPqWEKGbgOUI8-KMM8zmCg ISO/IEC JTC1/SC2 WG2 N3525].

Pros:
 * Consistent searching and sorting behavior is guaranteed. 
Cons:
 * Have to register all required variation selectors.
 * The support of variation selectors is not common yet.
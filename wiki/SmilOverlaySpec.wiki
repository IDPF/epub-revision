#summary specification language for the SMIL overlay feature

= Introduction =

_This section is informative._

Books with synchronized text and audio can be found today in popular reading software, educational tools, and in formats for persons with print disabilities (often required by law). This is a proposal of how to add text/audio synchronization to EPUB (based on recorded human narration, not on live TTS Text-To-Speech rendition). It is designed as a transparent overlay to the current EPUB text file format and it will not break compatibility with text-only reading systems. 

The mechanism by which audio is synchronized with text is SMIL, a W3C standard for representing synchronized multimedia information in XML.

= How to include SMIL files in EPUB =

== The manifest ==

_This section is normative._

SMIL files for an EPUB publication are to be listed in the manifest and will be given media-type="application/smil".

== The media-timeline attribute ==

_This section is normative._

 * What: a new attribute called *media-timeline*
 * Where: optional on OPF *itemref* elements
 * Contents: ID of the manifest item containing the SMIL overlay for the part of the publication referred to by that *itemref*.  
 * When this feature is enabled, there MUST be exactly one OPS spine itemref element per SMIL file.  In other words, multiple OPS spine items cannot share a single SMIL file.  
 * Reading systems MAY support this new attribute
 * Content creators MAY include this feature

== Example ==

_This section is informative._

Example of how to specify that there is an audio overlay available.

Add SMIL files to the manifest of the OPF file:
{{{
<manifest>
  <item id="ch1" href="chapter1.html" media-type=application/xhtml+xml"/>
  <item id="ch1_smil"href="chapter1.smil" media-type="application/smil"/>
  ...
</manifest>
}}}

Add the *media-timeline* attribute to the OPF *itemref* element and reference the manifest item containing the SMIL file resource.
{{{
<spine>
  <itemref idref="ch1" media-timeline="ch1_smil"/>
  ...
</spine>
}}}

This is a forwards-compatible addition: 2.0 reading systems can safely ignore the *media-timeline* attribute and process documents in their normal fashion.

= SMIL =

== Introduction to SMIL ==

_This section is informative._

SMIL (Synchronized Multimedia Integration Language) is a W3C recommendation for describing multimedia presentations in XML.  The current version is [http://www.w3.org/TR/SMIL3/ SMIL 3.0].  This specification defines a subset of SMIL for the purpose of synchronizing an audio overlay with the text document(s) in EPUB publications.  SMIL is capable of doing much more and this subset could be built upon in future EPUB revisions, but this revision purposely defines a minimal set of SMIL elements and attributes in order to maintain simplicity.

The key to understanding how SMIL works here is to see how it handles synchronization of media objects.  Media objects can be presented one at a time or in parallel with other media objects.  The elements for these behaviors are called *seq* (sequence) and *par* (parallel).  An EPUB SMIL overlay is, in its simplest form, defined as a sequence of parallel text and audio media objects, where the text consists of a reference to an element in the text content file and the audio consists of a clip of audio media.  The parallel sets of media objects are played one at a time.  

A basic SMIL document describing an audio overlay for an EPUB book is shown here:

{{{
<smil>
	<head>
	...
	</head>
	
	<body>
		<seq>
			<par>
				<text src="bookchapter.html#id1"/>
				<audio src="bookaudio.mp3" clipBegin="0" clipEnd="10"/>
			</par>
			<par>
				<text src="bookchapter.html#id2"/>
				<audio src="bookaudio.mp3" clipBegin="10" clipEnd="20"/>
			</par>
			<par>
				<text src="bookchapter.html#id3"/>
				<audio src="bookaudio.mp3" clipBegin="20" clipEnd="30"/>
			</par>
			...
		</seq>
	</body>
</smil>
}}}

Typical reading system playback behavior would be to play the audio clip and highlight the text element pointed to by the ID fragment.  Then, when the first audio clip reaches the specified end time, the next one is loaded and the next piece of text is highlighted.

There are additional features not represented in this very simple example, but they do not add much complexity.  They are described in the following sections as well as in the full example.

== Schema for the EPUB SMIL subset ==

_This section is normative._

Reading systems that support the *media-timeline* attribute MUST support the SMIL subset defined here.  This is a subset of [http://www.w3.org/TR/SMIL3/ SMIL 3.0] plus two attributes defined in this standard, *ops:textref* and *role*.

{{{
default namespace = ""
namespace ops = "http://www.idpf.org/2007/ops"

start =
    element smil {
        element head {
            element meta {
                attribute content { text },
                attribute name { text }
            }
        },
        element body { (seq | par)* }
    }
seq =
    element seq {
        attribute role { text }?,
        attribute id { text },
        attribute ops:textref { xsd:anyURI },
        (seq | par)*
    }
par =
    element par {
        attribute role { text }?,
        attribute id { text },
        element text {
            attribute src { xsd:anyURI },
			attribute id { text }?
        },
        element audio {
            attribute clipBegin { text }?,
            attribute clipEnd { text }?,
            attribute src { xsd:anyURI },
			attribute id { text }?
        }
    }+
}}}

== Media clipping attributes ==

_This section is normative._

The attributes *clipBegin* and *clipEnd*, used to represent audio media clip times, are defined as follows:

 * Are a subset of [http://www.w3.org/TR/SMIL3/smil-extended-media-object.html#adef-clipBegin]
 * Use the same Normal play time (npt) but without the metric ("npt=") stated explicitly
 * Are written as hh:mm:ss.fraction or as seconds.fraction (e.g. "1:33:23.453", "345.21", "0:00:32.434")
 * Are non-negative
 * The value of clipEnd must be chronologically after that of clipBegin
 * If clipBegin is not specified, its value is assumed to be 0
 * If clipEnd is not specified, its value is assumed to be the end of the physical media
 * If clipEnd exceeds the duration of the physical media, then its value is assumed to be the end of the physical media 

== The ops:textref attribute ==

=== Requirements and allowed values ===

_This section is normative._

The *ops:textref* attribute:
 * Must contain relative URIs with fragment identifiers
 * Must point to a text document within the publication
 * The contents must resolve to an element in the OPS text document corresponding to this SMIL file

=== The purpose of ops:textref ===

_This section is informative._

An audio book has a linear flow; however, users may wish to change section or hear a particular sentence by clicking the text, and the player needs to update the audio playback accordingly.

The *ops:textref* attribute has been added to seq containers to facilitate linkage between text structural containers and the corresponding media overlay.

== The role attribute ==

Note that *role* may be renamed *ops:type*, depending on decisions by other subgroups.

=== Requirements and allowed values ===

_This section is normative._

The *role* attribute takes its values from the list of allowed roles in OPS.

It is STRONGLY RECOMMENDED for content creators to include *role* information in SMIL.

Reading systems MAY support the *role* attribute in SMIL.

=== About skippability ===

_This section is informative._

While reading, users may want to turn on or off certain features of the publication, such as sidebars, footnotes, page numbers, etc.  This feature is called "skippability".  In addition to default element names, the *role* attribute in the text document is used to express semantics of an element. In order to offer an equivalent set of options in the audio presentation, the *role* attribute can be used in the SMIL document. This approach provides an easy global switch to control rendering.

See how the *role* attribute is used in the full example below. 

= The relationship between the SMIL file and the text document =

_This section is informative._

TODO

= CSS  =

_This section is normative._

Often, depending on reading system features, portions of text for which the corresponding audio narration is currently playing need to be highlighted visually, and scrolled into view.

A CSS pseudo class *epub-time-active* is used to indicate that a particular text fragment is "active".

Content creators MAY include style information for *epub-time-active*.

Reading systems MAY implement this pseudo class.  


= Full example =

== OPF file ==
TODO

== SMIL file ==
{{{
<body>
	<par id="smil1">
		<text src="chapter1.html#id1"/>
		<audio src="aud.mp3" clipBegin="0" clipEnd="12.5"/>
	</par>
	<par id="smil2">
	    <text src="chapter1.html#id2"/>
	    <audio src="aud.mp3" clipBegin="12.5" clipEnd="17.34"/>
	</par>
	<par id="smil3">
		<text src="chapter1.html#id3"/>
		<audio src="aud.mp3" clipBegin="17.34" clipEnd="28"/>
	</par>
	<seq ops:textref="chapter1.html#id4" id="smil4" role="sidebar">
		<par id="smil5">
		    <text src="chapter1.html#id5"/>
		    <audio src="aud.mp3" clipBegin="28" clipEnd="35.634"/>
		</par>
		<par id="smil6">
			<text src="chapter1.html#id6"/>
			<audio src="aud.mp3" clipBegin="35.634" clipEnd="43.2"/>
		</par>
	</seq>
</body>

}}}

== Text content file ==
TODO

== CSS file ==
TODO

= Pending TODOs  =

 * Daniel => The demo shows how to handle HTML5 video/audio media elements targeted by a SMIL's "text" elements, but we need to normatively define the expected Reading System behavior(s), like how default video controls get overridden by the SMIL scheduler.
 * Requiring head element implies that there is a required metadata element -- what is it?  Is head otherwise entirely optional?  No point in having an empty head.
 * Prose for the text doc/SMIL relationship section:
  * How to mirror the structure of the text document in SMIL (nested seqs etc)
  * Reinforce that ID fragments are used to point to text
  * That the author chooses a granularity and marks up the text accordingly (e.g. paragraph, span)
 * Where are the OPS role (or ops:type) values defined?
 * Improve the sample SMIL (more document structural features)
 * Regarding the requirement to apply audio selectively:
  * Add to media-timeline attribute bullet point: "However, there may be OPS spine items without any corresponding SMIL file."  In other words, perhaps there is a text/partial audio ebook.  
  * Is it required that a SMIL file cover an entire text document?  Could it apply only to a portion?
 * Language: SMIL overlay, media-overlay, audio overlay, media-timeline, epub-time-active.  Let's pick a single term and use it everywhere (and use that term + "-active" for the CSS class).
 * What media-type for SMIL files in the manifest?  "application/smil" used here.
 * Certain text structures without @role may still be given a role value in the SMIL seq corresponding to that particular structure, e.g. an *aside* element does not always take @role but in the SMIL, you would want to specify one so that the aside could be skipped.  Do allowed OPS role values include this case or do we have to extend the values allowed in SMIL's @role to include OPS text element names?
 * Add full example